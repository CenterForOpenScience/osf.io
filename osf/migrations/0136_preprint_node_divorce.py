# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-03-12 18:25
from __future__ import unicode_literals
import logging

from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from django.db import migrations
from django.db.models import Func, Value, F, Q
from django.core.management.sql import emit_post_migrate_signal
from bulk_update.helper import bulk_update

logger = logging.getLogger(__name__)

def reverse_func(apps, schema_editor):
    PreprintContributor = apps.get_model('osf', 'PreprintContributor')
    PreprintTags = apps.get_model('osf', 'Preprint_Tags')
    NodeSettings = apps.get_model('addons_osfstorage', 'NodeSettings')
    AbstractNode = apps.get_model('osf', 'AbstractNode')
    Preprint = apps.get_model('osf', 'Preprint')
    BaseFileNode = apps.get_model('osf', 'BaseFileNode')
    PageCounter = apps.get_model('osf', 'PageCounter')
    Guid = apps.get_model('osf', 'Guid')

    preprints = []
    files = []
    nodes = []

    modified_field = Preprint._meta.get_field('modified')
    modified_field.auto_now = False
    node_modified_field = AbstractNode._meta.get_field('modified')
    node_modified_field.auto_now = False

    for preprint in Preprint.objects.filter(node__isnull=False).select_related('node'):
        node = preprint.node
        preprint.title = 'Untitled'
        preprint.description = ''
        preprint.creator = None
        preprint.article_doi = ''
        preprint.is_public = True
        preprint.region_id = None
        preprint.spam_status = None
        preprint.spam_pro_tip = ''
        preprint.spam_data = {}
        preprint.date_last_reported = None
        preprint.reports = {}

        preprint_file = None
        if preprint.primary_file:
            preprint_file = BaseFileNode.objects.get(id=preprint.primary_file.id)
            preprint_file.target_object_id = node.id
            preprint_file.target_content_type_id = ContentType.objects.get_for_model(AbstractNode).id
            preprint_file.parent_id = NodeSettings.objects.get(owner_id=node.id).root_node_id

            node_id = Guid.objects.get(content_type=ContentType.objects.get_for_model(AbstractNode).id, object_id=node.id)._id
            preprint_id = Guid.objects.get(content_type=ContentType.objects.get_for_model(Preprint).id, object_id=preprint.id)._id
            PageCounter.objects.filter(Q(_id__contains=preprint_id) & Q(_id__contains=preprint_file._id)).update(
                _id=Func(F('_id'), Value(preprint_id), Value(node_id), function='replace')
            )

        node.preprint_file = preprint_file
        preprint.primary_file = None

        preprint.deleted = None
        preprint.migrated = None

        preprints.append(preprint)
        nodes.append(node)
        files.append(preprint_file)

        # Deleting the particular preprint admin/read/write groups will remove the users from the groups
        # and their permission to these preprints
        Group.objects.get(name=format_group(preprint, 'admin')).delete()
        Group.objects.get(name=format_group(preprint, 'write')).delete()
        Group.objects.get(name=format_group(preprint, 'read')).delete()

    PreprintContributor.objects.all().delete()
    PreprintTags.objects.all().delete()
    bulk_update(preprints, update_fields=['title', 'description', 'creator', 'article_doi', 'is_public', 'region_id', 'deleted', 'migrated', 'modified', 'primary_file', 'spam_status', 'spam_pro_tip', 'spam_data', 'date_last_reported', 'reports'])
    bulk_update(nodes, update_fields=['preprint_file'])
    bulk_update(files)
    # Order is important - remove the preprint root folders after the files have been saved back onto the nodes
    BaseFileNode.objects.filter(type='osf.osfstoragefolder', is_root=True, target_content_type_id=ContentType.objects.get_for_model(Preprint).id).delete()
    modified_field.auto_now = True
    node_modified_field.auto_now = True

group_format = 'preprint_{self.id}_{group}'

def format_group(self, name):
    return group_format.format(self=self, group=name)

def emit_signals(state, schema):
    # this is to make sure that the permissions created earlier exist!
    emit_post_migrate_signal(2, False, 'default')
    logger.info('Starting preprint node divorce [SQL]:')


class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0135_update_preprint_model_for_divorce'),
    ]

    operations = [
        migrations.RunPython(migrations.RunPython.noop, migrations.RunPython.noop)
    ]
