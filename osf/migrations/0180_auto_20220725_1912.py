# Generated by Django 3.2 on 2022-07-25 19:12

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.text
import django.utils.timezone
import django_extensions.db.fields
import osf.models.base
import osf.models.notable_email_domain
import osf.models.registration_bulk_upload_job
import osf.models.validators
import osf.utils.datetime_aware_jsonfield
import osf.utils.fields


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('osf', '0179_apioauth2personaltoken_scopes_temp'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseFileVersionsThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_name', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('hero_logo_image', models.URLField()),
                ('topnav_logo_image', models.URLField()),
                ('hero_background_image', models.URLField()),
                ('primary_color', models.CharField(max_length=7)),
                ('secondary_color', models.CharField(max_length=7)),
            ],
            options={
                'permissions': (('modify_brand', 'Can modify brands'),),
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='DraftRegistrationContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DraftRegistrationGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftRegistrationUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotableEmailDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('domain', osf.utils.fields.LowercaseCharField(db_index=True, max_length=255, unique=True)),
                ('note', models.IntegerField(choices=[(0, 'EXCLUDE_FROM_ACCOUNT_CREATION'), (1, 'ASSUME_HAM_UNTIL_REPORTED')], default=osf.models.notable_email_domain.NotableEmailDomain.Note['EXCLUDE_FROM_ACCOUNT_CREATION'])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept_submission', 'AcceptSubmission'), ('reject_submission', 'RejectSubmission'), ('request_withdrawal', 'RequestWithdrawal'), ('accept_withdrawal', 'AcceptWithdrawal'), ('reject_withdrawal', 'RejectWithdrawal'), ('force_withdraw', 'ForceWithdraw')], max_length=31)),
                ('from_state', models.CharField(choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'), ('pending_withdraw_request', 'PendingWithdrawRequest'), ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], max_length=31)),
                ('to_state', models.CharField(choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'), ('pending_withdraw_request', 'PendingWithdrawRequest'), ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationBulkUploadJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('payload_hash', models.CharField(max_length=255, unique=True)),
                ('state', models.IntegerField(choices=[(osf.models.registration_bulk_upload_job.JobState['PENDING'], 'PENDING'), (osf.models.registration_bulk_upload_job.JobState['INITIALIZED'], 'INITIALIZED'), (osf.models.registration_bulk_upload_job.JobState['PICKED_UP'], 'PICKED_UP'), (osf.models.registration_bulk_upload_job.JobState['DONE_FULL'], 'DONE_FULL'), (osf.models.registration_bulk_upload_job.JobState['DONE_PARTIAL'], 'DONE_PARTIAL'), (osf.models.registration_bulk_upload_job.JobState['DONE_ERROR'], 'DONE_ERROR')], default=osf.models.registration_bulk_upload_job.JobState['PENDING'])),
                ('email_sent', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationBulkUploadRow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_completed', models.BooleanField(default=False)),
                ('is_picked_up', models.BooleanField(default=False)),
                ('csv_raw', models.TextField(default='')),
                ('csv_parsed', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('row_hash', models.CharField(default='', max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationSchemaBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('help_text', models.TextField()),
                ('example_text', models.TextField(null=True)),
                ('registration_response_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('schema_block_group_key', models.CharField(db_index=True, max_length=24, null=True)),
                ('block_type', models.CharField(choices=[('page-heading', 'page-heading'), ('section-heading', 'section-heading'), ('subsection-heading', 'subsection-heading'), ('paragraph', 'paragraph'), ('question-label', 'question-label'), ('short-text-input', 'short-text-input'), ('long-text-input', 'long-text-input'), ('file-input', 'file-input'), ('contributors-input', 'contributors-input'), ('single-select-input', 'single-select-input'), ('multi-select-input', 'multi-select-input'), ('select-input-option', 'select-input-option'), ('select-other-option', 'select-other-option')], db_index=True, max_length=31)),
                ('display_text', models.TextField()),
                ('required', models.BooleanField(default=False)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='SchemaResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('revision_justification', models.CharField(blank=True, max_length=2048, null=True)),
                ('submitted_timestamp', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('reviews_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='in_progress', max_length=255)),
                ('object_id', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['-created'],
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='SchemaResponseAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('approve', 'Approve'), ('accept', 'Accept'), ('admin_reject', 'AdminReject'), ('moderator_reject', 'ModeratorReject')], max_length=31)),
                ('from_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], max_length=31)),
                ('to_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='SchemaResponseBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('schema_key', models.CharField(max_length=255)),
                ('response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, null=True)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.DeleteModel(
            name='BlacklistedEmailDomain',
        ),
        migrations.CreateModel(
            name='DraftNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.AlterModelOptions(
            name='adminprofile',
            options={'permissions': (('mark_spam', 'Can mark comments, projects and registrations as spam'), ('view_spam', 'Can view nodes, comments, and projects marked as spam'), ('view_metrics', 'Can view metrics on the OSF Admin app'), ('view_desk', 'Can view details about Desk users'), ('delete_preprintrequest', 'Can delete preprints withdrawal requests'), ('change_preprintrequest', 'Can update preprints withdrawal requests'))},
        ),
        migrations.AlterModelOptions(
            name='draftregistration',
            options={'permissions': (('read_draft_registration', 'Can read the draft registration'), ('write_draft_registration', 'Can edit the draft registration'), ('admin_draft_registration', 'Can manage the draft registration'))},
        ),
        migrations.AlterModelOptions(
            name='draftregistrationlog',
            options={'get_latest_by': 'created', 'ordering': ['-created']},
        ),
        migrations.AlterModelOptions(
            name='institution',
            options={'permissions': (('view_institutional_metrics', 'Can access metrics endpoints for their Institution'),)},
        ),
        migrations.AlterModelOptions(
            name='osfuser',
            options={},
        ),
        migrations.AlterModelOptions(
            name='preprint',
            options={'permissions': (('read_preprint', 'Can read the preprint'), ('write_preprint', 'Can write the preprint'), ('admin_preprint', 'Can manage the preprint'))},
        ),
        migrations.AlterModelOptions(
            name='preprintprovider',
            options={},
        ),
        migrations.AlterModelManagers(
            name='fileversion',
            managers=[
            ],
        ),
        migrations.RemoveField(
            model_name='apioauth2personaltoken',
            name='scopes_temp',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='admin',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='read',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='write',
        ),
        migrations.RemoveField(
            model_name='draftregistration',
            name='approval',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='admin',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='read',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='write',
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='additional_metadata',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='branched_from_node',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='custom_storage_usage_limit_private',
            field=models.DecimalField(blank=True, decimal_places=9, max_digits=100, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='custom_storage_usage_limit_public',
            field=models.DecimalField(blank=True, decimal_places=9, max_digits=100, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='external_registration',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='ia_url',
            field=models.URLField(blank=True, help_text='Where the archive.org data for the registration is stored', null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='moderation_state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'), ('pending_withdraw_request', 'PendingWithdrawRequest'), ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], default='initial', max_length=30),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_responses',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_responses_migrated',
            field=models.BooleanField(db_index=True, default=True, null=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='additional_metadata_fields',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, null=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='advertises_on_discovery',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='allow_bulk_uploads',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='allow_updates',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='branded_discovery_page',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='bulk_upload_auto_approval',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='default_schema',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_schema', to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='has_landing_page',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='purged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='collection',
            name='school_type_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collection',
            name='study_design_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='school_type',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='study_design',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AddField(
            model_name='comment',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='conference',
            name='auto_check_spam',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='affiliated_institutions',
            field=models.ManyToManyField(related_name='draft_registrations', to='osf.Institution'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='category',
            field=models.CharField(blank=True, choices=[('analysis', 'Analysis'), ('communication', 'Communication'), ('data', 'Data'), ('hypothesis', 'Hypothesis'), ('instrumentation', 'Instrumentation'), ('methods and measures', 'Methods and Measures'), ('procedure', 'Procedure'), ('project', 'Project'), ('software', 'Software'), ('other', 'Other'), ('', 'Uncategorized')], default='', max_length=255),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='draft_registrations', to='osf.nodelicenserecord'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_responses',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_responses_migrated',
            field=models.BooleanField(db_index=True, default=True, null=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='draftregistrations', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='tags',
            field=models.ManyToManyField(related_name='draftregistration_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='title',
            field=models.TextField(blank=True, default='', validators=[osf.models.validators.validate_title]),
        ),
        migrations.AddField(
            model_name='draftregistrationlog',
            name='params',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='fileversion',
            name='purged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='deactivated',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='identifier_domain',
            field=models.URLField(blank=True, help_text='The full domain this institutions that will appear in DOI metadata.', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='orcid_record_verified_source',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.AddField(
            model_name='institution',
            name='ror_uri',
            field=models.URLField(blank=True, help_text='The full URI for the this institutions ROR.', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='contacted_deactivation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='department',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='conflict_of_interest_statement',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='data_links',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_coi',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_data_links',
            field=models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'), ('not_applicable', 'Not applicable')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_prereg_links',
            field=models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'), ('not_applicable', 'Not applicable')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='prereg_link_info',
            field=models.TextField(blank=True, choices=[('prereg_designs', 'Pre-registration of study designs'), ('prereg_analysis', 'Pre-registration of study analysis'), ('prereg_both', 'Pre-registration of study designs and study analysis')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='prereg_links',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='preprint',
            name='why_no_data',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='why_no_prereg',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='privatelink',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='config',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='providers',
            field=models.ManyToManyField(blank=True, related_name='schemas', to='osf.RegistrationProvider'),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.registrationprovider'),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='registered_meta',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='type',
            field=models.CharField(choices=[('osf.node', 'node'), ('osf.draftnode', 'draft node'), ('osf.registration', 'registration'), ('osf.quickfilesnode', 'quick files node')], db_index=True, max_length=255),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='additional_providers',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='preprint_word',
            field=models.CharField(choices=[('preprint', 'Preprint'), ('paper', 'Paper'), ('thesis', 'Thesis'), ('work', 'Work'), ('none', 'None')], default='preprint', max_length=10),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='share_publish_type',
            field=models.CharField(choices=[('Preprint', 'Preprint'), ('Thesis', 'Thesis'), ('Registration', 'Registration')], default='Thesis', help_text='This SHARE type will be used when pushing publications to SHARE', max_length=32),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='share_source',
            field=models.CharField(blank=True, default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='share_title',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='subjects_acceptable',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.RemoveField(
            model_name='apioauth2personaltoken',
            name='scopes',
        ),
        migrations.AddField(
            model_name='apioauth2personaltoken',
            name='scopes',
            field=models.ManyToManyField(related_name='tokens', to='osf.ApiOAuth2Scope'),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='target_content_type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='target_object_id',
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name='collection',
            name='collected_types',
            field=models.ManyToManyField(limit_choices_to={'model__in': ['abstractnode', 'basefilenode', 'collection', 'preprint']}, related_name='_osf_collection_collected_types_+', to='contenttypes.ContentType'),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='branched_from',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registered_draft', to='osf.abstractnode'),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='provider',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='draft_registrations', to='osf.registrationprovider'),
        ),
        migrations.AlterField(
            model_name='draftregistrationlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='embargo',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='embargoterminationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='institution',
            name='delegation_protocol',
            field=models.CharField(blank=True, choices=[('saml-shib', 'SAML_SHIBBOLETH'), ('cas-pac4j', 'CAS_PAC4J'), ('oauth-pac4j', 'OAUTH_PAC4J'), ('via-orcid', 'AFFILIATION_VIA_ORCID'), ('', 'NONE')], default='', max_length=15),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='license_id',
            field=models.CharField(help_text='A unique id for the license. for example', max_length=128, unique=True),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='name',
            field=models.CharField(help_text='The name of the license', max_length=256, unique=True),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='properties',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, default=list, help_text="The custom elements in a license's text surrounded with curly brackets for example: <i>{year,copyrightHolders}</i>", size=None),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='text',
            field=models.TextField(help_text='The text of the license with custom properties surround by curly brackets, for example: <i>Copyright (c) {{year}}, {{copyrightHolders}} All rights reserved.</i>'),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='url',
            field=models.URLField(blank=True, help_text="The license's url for example: <i>http://opensource.org/licenses/BSD-3-Clause</i>"),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='_id',
            field=models.CharField(db_index=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='event_name',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='osfuser',
            name='date_last_login',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='preprint',
            name='ever_public',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='registrationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='retraction',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterUniqueTogether(
            name='notificationsubscription',
            unique_together={('_id', 'provider')},
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(fields=['-registered_date'], name='registered_date_index'),
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(condition=models.Q(('is_public', True), ('is_deleted', False), ('type', 'osf.registration')), fields=['is_public', 'is_deleted', 'type'], name='reg_pub_del_type_index'),
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(condition=models.Q(('is_public', True), ('is_deleted', False), ('type', 'osf.node')), fields=['is_public', 'is_deleted', 'type'], name='node_pub_del_type_index'),
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(condition=models.Q(('is_public', True), ('is_deleted', False), ('type', 'osf.collection')), fields=['is_public', 'is_deleted', 'type'], name='collection_pub_del_type_index'),
        ),
        migrations.AddIndex(
            model_name='nodelog',
            index=models.Index(fields=['node_id', '-date'], name='nodelog__node_id_date_desc'),
        ),
        migrations.AddIndex(
            model_name='nodelog',
            index=models.Index(fields=['node_id', 'should_hide'], name='osf_nodelog_should_hide_nid'),
        ),
        migrations.AddIndex(
            model_name='pagecounter',
            index=models.Index(fields=['action', 'resource_id', 'file_id', 'version'], name='page_counter_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(django.db.models.functions.text.Lower('name'), django.db.models.expressions.F('system'), name='lowercase_tag_index'),
        ),
        migrations.AddConstraint(
            model_name='noderequest',
            constraint=models.UniqueConstraint(condition=models.Q(machine_state='accepted'), fields=('target_id', 'creator_id'), name='osf_noderequest_target_creator_non_accepted'),
        ),
        migrations.AddConstraint(
            model_name='subject',
            constraint=models.CheckConstraint(check=models.Q(('bepress_subject_id__isnull', True), models.Q(_negated=True, provider___id='osf'), _connector='OR'), name='customs_must_be_mapped'),
        ),
        migrations.DeleteModel(
            name='DraftRegistrationApproval',
        ),
        migrations.AddField(
            model_name='schemaresponseblock',
            name='source_schema_response',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updated_response_blocks', to='osf.schemaresponse'),
        ),
        migrations.AddField(
            model_name='schemaresponseaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponseaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.schemaresponse'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='initiator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='pending_approvers',
            field=models.ManyToManyField(related_name='pending_submissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='previous_response',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='updated_response', to='osf.schemaresponse'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='response_blocks',
            field=models.ManyToManyField(to='osf.SchemaResponseBlock'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='registrationschemablock',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schema_blocks', to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadrow',
            name='draft_registration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadrow',
            name='upload',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.registrationbulkuploadjob'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadjob',
            name='initiator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadjob',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.registrationprovider'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadjob',
            name='schema',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='registrationaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registrationaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.registration'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='draft_registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='basefileversionsthrough',
            name='basefilenode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.basefilenode'),
        ),
        migrations.AddField(
            model_name='basefileversionsthrough',
            name='fileversion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.fileversion'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='providers', to='osf.brand'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='_contributors',
            field=models.ManyToManyField(related_name='draft_registrations', through='osf.DraftRegistrationContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='versions',
            field=models.ManyToManyField(through='osf.BaseFileVersionsThrough', to='osf.FileVersion'),
        ),
        migrations.AlterUniqueTogether(
            name='schemaresponseblock',
            unique_together={('source_schema_response', 'schema_key')},
        ),
        migrations.AddIndex(
            model_name='schemaresponse',
            index=models.Index(fields=['reviews_state'], name='osf_schemar_reviews_c361bc_idx'),
        ),
        migrations.AddIndex(
            model_name='schemaresponse',
            index=models.Index(fields=['object_id', 'content_type'], name='osf_schemar_object__8cc95e_idx'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='registrationschemablock',
            order_with_respect_to='schema',
        ),
        migrations.AlterUniqueTogether(
            name='registrationschemablock',
            unique_together={('schema', 'registration_response_key')},
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationgroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='draftregistrationcontributor',
            order_with_respect_to='draft_registration',
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationcontributor',
            unique_together={('user', 'draft_registration')},
        ),
        migrations.AlterUniqueTogether(
            name='basefileversionsthrough',
            unique_together={('basefilenode', 'fileversion')},
        ),
        migrations.AlterIndexTogether(
            name='basefileversionsthrough',
            index_together={('basefilenode', 'fileversion')},
        ),
    ]
