# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-03-23 20:34
from __future__ import unicode_literals

import dirtyfields.dirtyfields
from django.conf import settings
from django.contrib.admin.models import LogEntry
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import osf.models.admin_log_entry
import osf.models.base
import osf.models.conference
import osf.models.mixins
import osf.models.oauth
import osf.models.sanctions
import osf.models.spam
import osf.models.user
import osf.models.validators
import osf.utils.datetime_aware_jsonfield
import osf.utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='OSFUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('guid_string', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True), blank=True, null=True, size=None)),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('username', models.CharField(db_index=True, max_length=255, unique=True)),
                ('fullname', models.CharField(max_length=255)),
                ('is_registered', models.BooleanField(db_index=True, default=False)),
                ('is_claimed', models.BooleanField(db_index=True, default=False)),
                ('security_messages', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('is_invited', models.BooleanField(db_index=True, default=False)),
                ('unclaimed_records', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('contributor_added_email_records', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('verification_key', models.CharField(blank=True, max_length=255, null=True)),
                ('verification_key_v2', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, null=True)),
                ('email_last_sent', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('emails', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('email_verifications', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('mailing_lists', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('mailchimp_mailing_lists', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('osf_mailing_lists', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=osf.models.user.get_default_mailing_lists)),
                ('date_registered', osf.utils.fields.NonNaiveDateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('given_name', models.CharField(blank=True, max_length=255)),
                ('middle_names', models.CharField(blank=True, max_length=255)),
                ('family_name', models.CharField(blank=True, max_length=255)),
                ('suffix', models.CharField(blank=True, max_length=255)),
                ('external_identity', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('jobs', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list, validators=[osf.models.validators.validate_history_item])),
                ('schools', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list, validators=[osf.models.validators.validate_history_item])),
                ('social', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, validators=[osf.models.validators.validate_social])),
                ('piwik_token', models.CharField(blank=True, max_length=255)),
                ('date_last_login', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('date_confirmed', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('date_disabled', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('comments_viewed_timestamp', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('timezone', models.CharField(blank=True, default='Etc/UTC', max_length=255)),
                ('locale', models.CharField(blank=True, default='en_US', max_length=255)),
                ('requested_deactivation', models.BooleanField(default=False)),
                ('notifications_configured', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
            ],
            options={
                'permissions': (('view_user', 'Can view user details'),),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AbstractNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid_string', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True), blank=True, null=True, size=None)),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('type', models.CharField(choices=[('osf.node', 'node'), ('osf.collection', 'collection'), ('osf.registration', 'registration')], db_index=True, max_length=255)),
                ('spam_status', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                ('spam_pro_tip', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('spam_data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('date_last_reported', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('reports', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, validators=[osf.models.spam._validate_reports])),
                ('category', models.CharField(blank=True, choices=[('analysis', 'Analysis'), ('communication', 'Communication'), ('data', 'Data'), ('hypothesis', 'Hypothesis'), ('instrumentation', 'Instrumentation'), ('methods and measures', 'Methods and Measures'), ('procedure', 'Procedure'), ('project', 'Project'), ('software', 'Software'), ('other', 'Other'), ('', 'Uncategorized')], default='', max_length=255)),
                ('child_node_subscriptions', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('date_modified', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('deleted_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('file_guid_to_share_uuids', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('forked_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('is_fork', models.BooleanField(db_index=True, default=False)),
                ('is_public', models.BooleanField(db_index=True, default=False)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('piwik_site_id', models.IntegerField(blank=True, null=True)),
                ('public_comments', models.BooleanField(default=True)),
                ('suspended', models.BooleanField(db_index=True, default=False)),
                ('title', models.TextField(validators=[osf.models.validators.validate_title])),
                ('wiki_pages_current', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('wiki_pages_versions', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('wiki_private_uuids', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('preprint_article_doi', models.CharField(blank=True, max_length=128, null=True, validators=[osf.models.validators.validate_doi])),
                ('_is_preprint_orphan', models.NullBooleanField(default=False)),
                ('_has_abandoned_preprint', models.BooleanField(default=False)),
                ('keenio_read_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_bookmark_collection', models.NullBooleanField(db_index=True, default=False)),
                ('registered_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('registered_meta', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, null=True)),
            ],
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, osf.models.mixins.CommentableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AdminLogEntry',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(LogEntry,),
            managers=[
                ('objects', osf.models.admin_log_entry.AdminLogEntryManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desk_token', models.CharField(blank=True, max_length=45)),
                ('desk_token_secret', models.CharField(blank=True, max_length=45)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('mark_spam', 'Can mark comments, projects and registrations as spam'), ('view_spam', 'Can view nodes, comments, and projects marked as spam'), ('view_metrics', 'Can view metrics on the OSF Admin app'), ('view_prereg', 'Can view entries for the preregistration chellenge on the admin'), ('administer_prereg', 'Can update, comment on, and approve entries to the prereg challenge'), ('view_desk', 'Can view details about Desk users')),
            },
        ),
        migrations.CreateModel(
            name='AlternativeCitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(max_length=256)),
                ('text', models.CharField(max_length=2048)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApiOAuth2Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('client_id', models.CharField(db_index=True, default=osf.models.oauth.generate_client_id, max_length=50, unique=True)),
                ('client_secret', models.CharField(default=osf.models.oauth.generate_client_secret, max_length=40)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('home_url', models.URLField()),
                ('callback_url', models.URLField()),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApiOAuth2PersonalToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('token_id', models.CharField(default=osf.models.oauth.generate_token_id, max_length=70, unique=True)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('scopes', models.CharField(max_length=300)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApiOAuth2Scope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArchiveJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('done', models.BooleanField(default=False, verbose_name='completed')),
                ('sent', models.BooleanField(default=False, verbose_name='emails sent')),
                ('status', models.CharField(default='INITIATED', max_length=40)),
                ('datetime_initiated', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now, verbose_name='initiated at')),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArchiveTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(max_length=2048)),
                ('status', models.CharField(default='INITIATED', max_length=40)),
                ('stat_result', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('errors', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseFileNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('guid_string', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True), blank=True, null=True, size=None)),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('type', models.CharField(choices=[('osf.trashedfilenode', 'trashed file node'), ('osf.trashedfile', 'trashed file'), ('osf.trashedfolder', 'trashed folder'), ('osf.osfstoragefilenode', 'osf storage file node'), ('osf.osfstoragefile', 'osf storage file'), ('osf.osfstoragefolder', 'osf storage folder'), ('osf.boxfilenode', 'box file node'), ('osf.boxfolder', 'box folder'), ('osf.boxfile', 'box file'), ('osf.dataversefilenode', 'dataverse file node'), ('osf.dataversefolder', 'dataverse folder'), ('osf.dataversefile', 'dataverse file'), ('osf.dropboxfilenode', 'dropbox file node'), ('osf.dropboxfolder', 'dropbox folder'), ('osf.dropboxfile', 'dropbox file'), ('osf.figsharefilenode', 'figshare file node'), ('osf.figsharefolder', 'figshare folder'), ('osf.figsharefile', 'figshare file'), ('osf.githubfilenode', 'github file node'), ('osf.githubfolder', 'github folder'), ('osf.githubfile', 'github file'), ('osf.googledrivefilenode', 'google drive file node'), ('osf.googledrivefolder', 'google drive folder'), ('osf.googledrivefile', 'google drive file'), ('osf.owncloudfilenode', 'owncloud file node'), ('osf.owncloudfolder', 'owncloud folder'), ('osf.owncloudfile', 'owncloud file'), ('osf.s3filenode', 's3 file node'), ('osf.s3folder', 's3 folder'), ('osf.s3file', 's3 file')], db_index=True, max_length=255)),
                ('last_touched', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('_history', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list)),
                ('provider', models.CharField(db_index=True, max_length=25)),
                ('name', models.TextField(blank=True, null=True)),
                ('_path', models.TextField(blank=True, null=True)),
                ('_materialized_path', models.TextField(blank=True, null=True)),
                ('deleted_on', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('checkout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('copied_from', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='copy_of', to='osf.BaseFileNode')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files_deleted_by', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='osf.AbstractNode')),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_children', to='osf.BaseFileNode')),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.mixins.CommentableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BlackListGuid',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('guid', osf.utils.fields.LowercaseCharField(db_index=True, max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CitationStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('date_parsed', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('short_title', models.CharField(blank=True, max_length=2048, null=True)),
                ('summary', models.CharField(blank=True, max_length=4200, null=True)),
            ],
            options={
                'abstract': False,
                'ordering': ['_id'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid_string', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True), blank=True, null=True, size=None)),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('spam_status', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                ('spam_pro_tip', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('spam_data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('date_last_reported', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('reports', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, validators=[osf.models.spam._validate_reports])),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('date_modified', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('modified', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('page', models.CharField(blank=True, max_length=255)),
                ('content', models.TextField(validators=[osf.models.validators.CommentMaxLength(500), osf.models.validators.string_required])),
                ('ever_mentioned', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=10), blank=True, default=list, size=None)),
                ('node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.mixins.CommentableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('endpoint', models.CharField(db_index=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('info_url', models.URLField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, max_length=2048, null=True)),
                ('start_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('is_meeting', models.BooleanField(default=True)),
                ('active', models.BooleanField()),
                ('public_projects', models.BooleanField(default=True)),
                ('poster', models.BooleanField(default=True)),
                ('talk', models.BooleanField(default=True)),
                ('field_names', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=osf.models.conference.get_default_field_names)),
                ('num_submissions', models.IntegerField(default=0)),
                ('admins', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('view_conference', 'Can view conference details in the admin app.'),),
            },
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read', models.BooleanField(default=False)),
                ('write', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('visible', models.BooleanField(default=False)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DraftRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('datetime_initiated', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('datetime_updated', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('registration_metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('_metaschema_flags', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftRegistrationApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('unapproved', 'Unapproved'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='unapproved', max_length=255)),
                ('meta', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftRegistrationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('date', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('action', models.CharField(max_length=255)),
                ('draft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.DraftRegistration')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Embargo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('unapproved', 'Unapproved'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('for_existing_registration', models.BooleanField(default=False)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.sanctions.SanctionCallbackMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EmbargoTerminationApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('unapproved', 'Unapproved'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExternalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('oauth_key', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('oauth_secret', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('refresh_token', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('date_last_refreshed', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('expires_at', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('scopes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, default=list, size=None)),
                ('provider', models.CharField(max_length=50)),
                ('provider_name', models.CharField(max_length=255)),
                ('provider_id', models.CharField(max_length=255)),
                ('display_name', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('profile_url', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FileVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('identifier', models.CharField(max_length=100)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('size', models.BigIntegerField(blank=True, default=-1)),
                ('content_type', models.CharField(blank=True, max_length=100, null=True)),
                ('date_modified', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('location', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=None, null=True, validators=[osf.models.validators.validate_location])),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('date_created',),
            },
        ),
        migrations.CreateModel(
            name='Guid',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('_id', osf.utils.fields.LowercaseCharField(db_index=True, default=osf.models.base.generate_guid, max_length=255, unique=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('created', osf.utils.fields.NonNaiveDateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('category', models.CharField(max_length=10)),
                ('value', models.CharField(max_length=50)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('banner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('login_url', models.URLField(blank=True, null=True)),
                ('domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, db_index=True, null=True, size=None)),
                ('email_domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, db_index=True, null=True, size=None)),
                ('logo_name', models.CharField(max_length=255, null=True)),
                ('logout_url', models.URLField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstitutionalContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read', models.BooleanField(default=False)),
                ('write', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('visible', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Institution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MailRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField()),
                ('users_created', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MetaSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('schema', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('schema_version', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='NodeLicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('license_id', models.CharField(max_length=128, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('text', models.TextField()),
                ('properties', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, default=list, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='NodeLicenseRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('year', models.CharField(blank=True, max_length=128, null=True)),
                ('copyright_holders', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=256, null=True), blank=True, default=list, size=None)),
                ('node_license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='osf.NodeLicense')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NodeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('date', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('should_hide', models.BooleanField(default=False)),
                ('foreign_user', models.CharField(blank=True, max_length=255, null=True)),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.AbstractNode')),
                ('original_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='NodeRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('is_node_link', models.BooleanField(db_index=True, default=False)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node_relations', to='osf.AbstractNode')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationDigest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('timestamp', osf.utils.fields.NonNaiveDateTimeField()),
                ('send_type', models.CharField(db_index=True, max_length=50, validators=[osf.models.validators.validate_subscription_type])),
                ('event', models.CharField(max_length=50)),
                ('message', models.CharField(max_length=2048)),
                ('node_lineage', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=None)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=50)),
                ('event_name', models.CharField(max_length=50)),
                ('email_digest', models.ManyToManyField(related_name='_notificationsubscription_email_digest_+', to=settings.AUTH_USER_MODEL)),
                ('email_transactional', models.ManyToManyField(related_name='_notificationsubscription_email_transactional_+', to=settings.AUTH_USER_MODEL)),
                ('none', models.ManyToManyField(related_name='_notificationsubscription_none_+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=300, unique=True)),
                ('date', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('total', models.PositiveIntegerField(default=0)),
                ('unique', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreprintProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('logo_name', models.CharField(blank=True, max_length=128, null=True)),
                ('header_text', models.TextField(blank=True, default='')),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('banner_name', models.CharField(blank=True, max_length=128, null=True)),
                ('external_url', models.URLField(blank=True, null=True)),
                ('email_contact', models.CharField(blank=True, max_length=200, null=True)),
                ('email_support', models.CharField(blank=True, max_length=200, null=True)),
                ('example', models.CharField(blank=True, max_length=20, null=True)),
                ('access_token', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('advisory_board', models.TextField(blank=True, null=True)),
                ('social_twitter', models.CharField(blank=True, max_length=200, null=True)),
                ('social_facebook', models.CharField(blank=True, max_length=200, null=True)),
                ('social_instagram', models.CharField(blank=True, max_length=200, null=True)),
                ('subjects_acceptable', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list)),
                ('licenses_acceptable', models.ManyToManyField(blank=True, to='osf.NodeLicense')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreprintService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid_string', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True), blank=True, null=True, size=None)),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('date_modified', osf.utils.fields.NonNaiveDateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(db_index=True, default=False)),
                ('date_published', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('subjects', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list, null=True)),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='osf.NodeLicenseRecord')),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preprints', to='osf.AbstractNode')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preprint_services', to='osf.PreprintProvider')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('key', models.CharField(max_length=512, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('anonymous', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('nodes', models.ManyToManyField(related_name='private_links', to='osf.AbstractNode')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QueuedMail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('to_addr', models.CharField(max_length=255)),
                ('send_at', osf.utils.fields.NonNaiveDateTimeField(db_index=True)),
                ('email_type', models.CharField(db_index=True, max_length=255)),
                ('data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('sent_at', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecentlyAddedContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recently_added_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('unapproved', 'Unapproved'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.sanctions.SanctionCallbackMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Retraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('unapproved', 'Unapproved'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('justification', models.CharField(blank=True, max_length=2048, null=True)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('date_modified', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('text', models.CharField(max_length=256, unique=True)),
                ('parents', models.ManyToManyField(related_name='children', to='osf.Subject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1024)),
                ('system', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserActivityCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=5, unique=True)),
                ('action', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('date', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('total', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together=set([('name', 'system')]),
        ),
        migrations.AlterUniqueTogether(
            name='nodelicense',
            unique_together=set([('_id', 'license_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='metaschema',
            unique_together=set([('name', 'schema_version')]),
        ),
        migrations.AddField(
            model_name='institution',
            name='contributors',
            field=models.ManyToManyField(related_name='institutions', through='osf.InstitutionalContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='externalaccount',
            unique_together=set([('provider', 'provider_id')]),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='approval',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistrationApproval'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='initiator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_schema',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.MetaSchema'),
        ),
        migrations.AddField(
            model_name='comment',
            name='root_target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to='osf.Guid'),
        ),
        migrations.AddField(
            model_name='comment',
            name='target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_comments', to='osf.Guid'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='tags',
            field=models.ManyToManyField(related_name='basefilenode_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='versions',
            field=models.ManyToManyField(to='osf.FileVersion'),
        ),
        migrations.AddField(
            model_name='archivejob',
            name='target_addons',
            field=models.ManyToManyField(to='osf.ArchiveTarget'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='_contributors',
            field=models.ManyToManyField(related_name='nodes', through='osf.Contributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='_nodes',
            field=models.ManyToManyField(related_name='parent_nodes', through='osf.NodeRelation', to='osf.AbstractNode'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='affiliated_institutions',
            field=models.ManyToManyField(related_name='nodes', to='osf.Institution'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='alternative_citations',
            field=models.ManyToManyField(related_name='nodes', to='osf.AlternativeCitation'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='embargo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.Embargo'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='embargo_termination_approval',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.EmbargoTerminationApproval'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='forked_from',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forks', to='osf.AbstractNode'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nodes', to='osf.NodeLicenseRecord'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='preprint_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='osf.BaseFileNode'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registered_from',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.AbstractNode'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registered_schema',
            field=models.ManyToManyField(to='osf.MetaSchema'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registered_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_to', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_approval',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.RegistrationApproval'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='retraction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.Retraction'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='root',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='descendants', to='osf.AbstractNode'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='tags',
            field=models.ManyToManyField(related_name='abstractnode_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='template_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='templated_from', to='osf.AbstractNode'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='users_watching_node',
            field=models.ManyToManyField(related_name='watching', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='affiliated_institutions',
            field=models.ManyToManyField(blank=True, to='osf.Institution'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='external_accounts',
            field=models.ManyToManyField(blank=True, to='osf.ExternalAccount'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='merged_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='merger', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='recently_added',
            field=models.ManyToManyField(through='osf.RecentlyAddedContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='tags',
            field=models.ManyToManyField(blank=True, to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='BoxFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.abstractnode',),
        ),
        migrations.CreateModel(
            name='DataverseFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='DropboxFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='FigshareFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='GithubFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='GoogleDriveFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
            ],
            options={
                'proxy': True,
                'permissions': (('view_node', 'Can view node details'),),
            },
            bases=('osf.abstractnode',),
        ),
        migrations.CreateModel(
            name='OsfStorageFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='OwncloudFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
            ],
            options={
                'proxy': True,
                'permissions': (('view_registration', 'Can view registration details'),),
            },
            bases=('osf.abstractnode',),
        ),
        migrations.CreateModel(
            name='S3FileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='TrashedFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.AlterUniqueTogether(
            name='recentlyaddedcontributor',
            unique_together=set([('user', 'contributor')]),
        ),
        migrations.AlterUniqueTogether(
            name='preprintservice',
            unique_together=set([('node', 'provider')]),
        ),
        migrations.AddField(
            model_name='notificationsubscription',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to='osf.Node'),
        ),
        migrations.AlterUniqueTogether(
            name='noderelation',
            unique_together=set([('parent', 'child')]),
        ),
        migrations.AlterIndexTogether(
            name='noderelation',
            index_together=set([('is_node_link', 'child', 'parent')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='noderelation',
            order_with_respect_to='parent',
        ),
        migrations.AddField(
            model_name='mailrecord',
            name='nodes_created',
            field=models.ManyToManyField(to='osf.Node'),
        ),
        migrations.AlterUniqueTogether(
            name='institutionalcontributor',
            unique_together=set([('user', 'institution')]),
        ),
        migrations.AlterUniqueTogether(
            name='identifier',
            unique_together=set([('object_id', 'content_type', 'category')]),
        ),
        migrations.AlterIndexTogether(
            name='guid',
            index_together=set([('content_type', 'object_id', 'created')]),
        ),
        migrations.AddField(
            model_name='embargoterminationapproval',
            name='embargoed_registration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.Registration'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='branched_from',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registered_draft', to='osf.Node'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registered_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='draft_registration', to='osf.Registration'),
        ),
        migrations.AlterUniqueTogether(
            name='contributor',
            unique_together=set([('user', 'node')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='contributor',
            order_with_respect_to='node',
        ),
        migrations.AddField(
            model_name='archivejob',
            name='dst_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='archive_jobs', to='osf.Registration', verbose_name='destination node'),
        ),
        migrations.AddField(
            model_name='archivejob',
            name='src_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.Node', verbose_name='source node'),
        ),
        migrations.AlterIndexTogether(
            name='abstractnode',
            index_together=set([('is_public', 'is_deleted', 'type')]),
        ),
        migrations.CreateModel(
            name='BoxFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.boxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='BoxFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.boxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DataverseFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dataversefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DataverseFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dataversefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DropboxFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dropboxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DropboxFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dropboxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='FigshareFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.figsharefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='FigshareFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.figsharefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GithubFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.githubfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GithubFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.githubfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GoogleDriveFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.googledrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GoogleDriveFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.googledrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OsfStorageFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.osfstoragefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OsfStorageFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.osfstoragefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OwncloudFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.owncloudfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OwncloudFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.owncloudfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='S3File',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.s3filenode', models.Model),
        ),
        migrations.CreateModel(
            name='S3Folder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.s3filenode', models.Model),
        ),
        migrations.CreateModel(
            name='TrashedFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.trashedfilenode',),
        ),
        migrations.CreateModel(
            name='TrashedFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.trashedfilenode',),
        ),
        migrations.RunSQL(
            [
                """
                CREATE UNIQUE INDEX one_bookmark_collection_per_user ON osf_abstractnode (creator_id, is_bookmark_collection, is_deleted)
                WHERE is_bookmark_collection=TRUE AND is_deleted=FALSE;
                """
            ], [
                """
                DROP INDEX IF EXISTS one_bookmark_collection_per_user RESTRICT;
                """
            ]
        ),
        migrations.RunSQL(
            [
                """
                CREATE INDEX osf_abstractnode_registered_date_index ON public.osf_abstractnode (registered_date DESC);
                CREATE INDEX osf_abstractnode_registration_pub_del_type_index ON public.osf_abstractnode (is_public, is_deleted, type) WHERE is_public=TRUE and is_deleted=FALSE and type = 'osf.registration';
                CREATE INDEX osf_abstractnode_node_pub_del_type_index ON public.osf_abstractnode (is_public, is_deleted, type) WHERE is_public=TRUE and is_deleted=FALSE and type = 'osf.node';
                CREATE INDEX osf_abstractnode_collection_pub_del_type_index ON public.osf_abstractnode (is_public, is_deleted, type) WHERE is_public=TRUE and is_deleted=FALSE and type = 'osf.collection';
                """
            ],
            [
                """
                DROP INDEX public.osf_abstractnode_registered_date_index RESTRICT;
                DROP INDEX public.osf_abstractnode_registration_pub_del_type_index RESTRICT;
                DROP INDEX public.osf_abstractnode_node_pub_del_type_index RESTRICT;
                DROP INDEX public.osf_abstractnode_collection_pub_del_type_index RESTRICT;
                """
            ]
        ),
        migrations.RunSQL(
            [
                """
                CREATE UNIQUE INDEX osf_basefilenode_non_trashed_unique_index
                ON public.osf_basefilenode
                (node_id, name, parent_id, type, _path)
                WHERE type NOT IN ('osf.trashedfilenode', 'osf.trashedfile', 'osf.trashedfolder');
                """,
            ],
            [
                """
                DROP INDEX public.osf_basefilenode_non_trashed_unique_index RESTRICT;
                """
            ]
        ),
    ]
