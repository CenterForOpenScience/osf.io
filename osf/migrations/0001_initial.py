# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-03-23 20:34
from __future__ import unicode_literals

from django.contrib.admin.models import LogEntry
import django.contrib.postgres.fields
from django.db import migrations, models
import django.utils.timezone
import osf.models.admin_log_entry
import osf.models.mixins
import osf.models.validators
import osf.utils.datetime_aware_jsonfield
import osf.utils.fields
import dirtyfields.dirtyfields
from django.conf import settings
import django.db.models.functions.text
import django.utils.timezone
import django_extensions.db.fields
import osf.utils.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='OSFUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('username', models.CharField(db_index=True, max_length=255, unique=True)),
                ('fullname', models.CharField(max_length=255)),
                ('is_registered', models.BooleanField(db_index=True, default=False)),
                ('security_messages', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('is_invited', models.BooleanField(db_index=True, default=False)),
                ('unclaimed_records', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('contributor_added_email_records', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('verification_key', models.CharField(blank=True, max_length=255, null=True)),
                ('verification_key_v2', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, null=True)),
                ('email_last_sent', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('email_verifications', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('mailchimp_mailing_lists', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('osf_mailing_lists', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=osf.models.user.get_default_mailing_lists)),
                ('date_registered', osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True, db_index=True)),
                ('given_name', models.CharField(blank=True, max_length=255)),
                ('middle_names', models.CharField(blank=True, max_length=255)),
                ('family_name', models.CharField(blank=True, max_length=255)),
                ('suffix', models.CharField(blank=True, max_length=255)),
                ('external_identity', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('jobs', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list, validators=[osf.models.validators.validate_history_item])),
                ('schools', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list, validators=[osf.models.validators.validate_history_item])),
                ('social', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, validators=[osf.models.validators.validate_social])),
                ('date_last_login', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('date_confirmed', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('date_disabled', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('comments_viewed_timestamp', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('timezone', models.CharField(blank=True, default='Etc/UTC', max_length=255)),
                ('locale', models.CharField(blank=True, default='en_US', max_length=255)),
                ('requested_deactivation', models.BooleanField(default=False)),
                ('notifications_configured', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('accepted_terms_of_service', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('change_password_last_attempt', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('chronos_user_id', models.TextField(blank=True, db_index=True, null=True)),
                ('contacted_deactivation', models.BooleanField(default=False)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('date_last_reported', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('department', models.TextField(blank=True, null=True)),
                ('group_connected_email_records', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('member_added_email_records', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('old_password_invalid_attempts', models.PositiveIntegerField(default=0)),
                ('reports', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder,
                                                                            validators=[
                                                                                osf.models.spam._validate_reports])),
                ('spam_data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('spam_pro_tip', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('spam_status', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
            ],
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='NodeLicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('license_id',
                 models.CharField(help_text='A unique id for the license. for example', max_length=128, unique=True)),
                ('name', models.CharField(help_text='The name of the license', max_length=256, unique=True)),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('url', models.URLField(blank=True,
                                        help_text="The license's url for example: <i>http://opensource.org/licenses/BSD-3-Clause</i>")),
                ('text', models.TextField(
                    help_text='The text of the license with custom properties surround by curly brackets, for example: <i>Copyright (c) {{year}}, {{copyrightHolders}} All rights reserved.</i>')),
                ('properties',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True,
                                                           default=list,
                                                           help_text="The custom elements in a license's text surrounded with curly brackets for example: <i>{year,copyrightHolders}</i>",
                                                           size=None)),
            ],
        ),
        migrations.CreateModel(
            name='NodeLicenseRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('year', models.CharField(blank=True, max_length=128, null=True)),
                ('copyright_holders', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(blank=True, max_length=256, null=True), blank=True, default=list,
                    size=None)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('node_license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   to='osf.NodeLicense')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Embargo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                    ('pending_moderation', 'PendingModeration'),
                                                    ('approved', 'Approved'),
                                                    ('rejected', 'Rejected'),
                                                    ('moderator_rejected', 'ModeratorRejected'),
                                                    ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                           default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('for_existing_registration', models.BooleanField(default=False)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.sanctions.SanctionCallbackMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EmbargoTerminationApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                    ('pending_moderation', 'PendingModeration'),
                                                    ('approved', 'Approved'),
                                                    ('rejected', 'Rejected'),
                                                    ('moderator_rejected', 'ModeratorRejected'),
                                                    ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                           default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),

            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('banner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('login_url', models.URLField(blank=True, null=True)),
                ('domains',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True,
                                                           db_index=True, null=True, size=None)),
                ('email_domains',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True,
                                                           db_index=True, null=True, size=None)),
                ('logo_name', models.CharField(blank=True, max_length=255, null=True)),
                ('logout_url', models.URLField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('deactivated', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('delegation_protocol',
                 models.CharField(blank=True, choices=[('saml-shib', 'SAML_SHIBBOLETH'), ('cas-pac4j', 'CAS_PAC4J'),
                                                       ('oauth-pac4j', 'OAUTH_PAC4J'),
                                                       ('via-orcid', 'AFFILIATION_VIA_ORCID'), ('', 'NONE')],
                                  default='', max_length=15)),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('identifier_domain', models.URLField(blank=True,
                                                      help_text='The full domain this institutions that will appear in DOI metadata.',
                                                      max_length=500, null=True)),
                ('last_logged',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now,
                                                        null=True)),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('orcid_record_verified_source', models.CharField(blank=True, default='', max_length=255)),
                ('ror_uri',
                 models.URLField(blank=True, help_text='The full URI for the this institutions ROR.', max_length=500,
                                 null=True)),
            ],
            options={
                'permissions': (('view_institutional_metrics', 'Can access metrics endpoints for their Institution'),)
            },
        ),
        migrations.CreateModel(
            name='InstitutionalContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Institution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='institution',
            name='contributors',
            field=models.ManyToManyField(related_name='institutions', through='osf.InstitutionalContributor',
                                         to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='RegistrationApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                    ('pending_moderation', 'PendingModeration'),
                                                    ('approved', 'Approved'),
                                                    ('rejected', 'Rejected'),
                                                    ('moderator_rejected', 'ModeratorRejected'),
                                                    ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                           default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                              default=django.utils.timezone.now,
                                                                              verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.sanctions.SanctionCallbackMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Retraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('approval_state', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('initiation_date',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                    ('pending_moderation', 'PendingModeration'),
                                                    ('approved', 'Approved'),
                                                    ('rejected', 'Rejected'),
                                                    ('moderator_rejected', 'ModeratorRejected'),
                                                    ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                           default='unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('justification', models.CharField(blank=True, max_length=2048, null=True)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('date_retracted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('type', models.CharField(
                    choices=[
                        ('osf.node', 'node'),
                        ('osf.draftnode', 'draft node'),
                        ('osf.registration', 'registration'),
                        ('osf.quickfilesnode', 'quick files node')
                    ],
                    db_index=True, max_length=255)
                 ),
                ('spam_status', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                ('spam_pro_tip', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('spam_data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('date_last_reported', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('reports', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, validators=[osf.models.spam._validate_reports])),
                ('category', models.CharField(blank=True, choices=[('analysis', 'Analysis'), ('communication', 'Communication'), ('data', 'Data'), ('hypothesis', 'Hypothesis'), ('instrumentation', 'Instrumentation'), ('methods and measures', 'Methods and Measures'), ('procedure', 'Procedure'), ('project', 'Project'), ('software', 'Software'), ('other', 'Other'), ('', 'Uncategorized')], default='', max_length=255)),
                ('child_node_subscriptions', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('deleted_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('file_guid_to_share_uuids', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('forked_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('is_fork', models.BooleanField(db_index=True, default=False)),
                ('is_public', models.BooleanField(db_index=True, default=False)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('piwik_site_id', models.IntegerField(blank=True, null=True)),
                ('registered_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='registrations', to='osf.AbstractNode')),
                ('suspended', models.BooleanField(db_index=True, default=False)),
                ('title', models.TextField(validators=[osf.models.validators.validate_title])),
                ('wiki_private_uuids', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('node_license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='nodes', to='osf.NodeLicenseRecord')),
                ('forked_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='forks', to='osf.AbstractNode')),
                ('keenio_read_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('embargo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='registrations', to='osf.Embargo')),
                ('registered_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('embargo_termination_approval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='registrations', to='osf.EmbargoTerminationApproval')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='nodes_created', to=settings.AUTH_USER_MODEL)),
                ('registered_meta', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('registered_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='related_to', to=settings.AUTH_USER_MODEL)),
                ('affiliated_institutions', models.ManyToManyField(related_name='nodes', to='osf.Institution')),
                ('registration_approval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='registrations', to='osf.RegistrationApproval')),
                ('retraction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='registrations', to='osf.Retraction')),
                ('root', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='descendants', to='osf.AbstractNode')),
                ('template_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='templated_from', to='osf.AbstractNode')),
                ('access_requests_enabled', models.BooleanField(db_index=True, default=True, null=True)),
                ('additional_metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder,
                                                                            null=True)),
                ('article_doi', models.CharField(blank=True, max_length=128, null=True,
                                   validators=[osf.models.validators.validate_doi])),
                ('branched_from_node', models.BooleanField(blank=True, null=True)),
                ('comment_level', models.CharField(default='public', max_length=10)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('custom_citation', models.TextField(blank=True, null=True)),
                ('custom_storage_usage_limit_private', models.DecimalField(blank=True, decimal_places=9, max_digits=100, null=True)),
                ('custom_storage_usage_limit_public', models.DecimalField(blank=True, decimal_places=9, max_digits=100, null=True)),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('external_registration', models.BooleanField(default=False, null=True)),
                ('files_count', models.PositiveIntegerField(blank=True, null=True)),
                ('ia_url', models.URLField(blank=True, help_text='Where the archive.org data for the registration is stored',
                                  null=True)),
                ('last_logged', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now,
                                                         null=True)),
                ('moderation_state', models.CharField(
                    choices=[
                        ('undefined', 'Undefined'),
                        ('initial', 'Initial'),
                        ('reverted', 'Reverted'),
                        ('pending', 'Pending'),
                        ('rejected', 'Rejected'),
                        ('accepted', 'Accepted'),
                        ('embargo', 'Embargo'),
                        ('pending_embargo_termination', 'PendingEmbargoTermination'),
                        ('pending_withdraw_request', 'PendingWithdrawRequest'),
                        ('pending_withdraw', 'PendingWithdraw'),
                        ('withdrawn', 'Withdrawn')
                    ], default='initial',
                    max_length=30)
                 ),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('registration_responses', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('registration_responses_migrated', models.BooleanField(db_index=True, default=True, null=True)),
            ],
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, osf.models.mixins.CommentableMixin, models.Model),
            options={
                'base_manager_name': 'objects',
                'permissions': (
                    ('read_node', 'Can read the node'),
                    ('write_node', 'Can edit the node'),
                    ('admin_node', 'Can manage the node')
                )
            }
        ),
        migrations.CreateModel(
            name='NodeRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('is_node_link', models.BooleanField(db_index=True, default=False)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_parents',
                                            to='osf.AbstractNode')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node_relations',
                                             to='osf.AbstractNode')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
        ),
        migrations.AddField(
            model_name='AbstractNode',
            name='_nodes',
            field=models.ManyToManyField(related_name='parent_nodes', through='osf.NodeRelation', to='osf.AbstractNode')
        ),
        migrations.CreateModel(
            name='AdminLogEntry',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(LogEntry,),
            managers=[
                ('objects', osf.models.admin_log_entry.AdminLogEntryManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desk_token', models.CharField(blank=True, max_length=45)),
                ('desk_token_secret', models.CharField(blank=True, max_length=45)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={'permissions': (('mark_spam', 'Can mark comments, projects and registrations as spam'),
                                     ('view_spam', 'Can view nodes, comments, and projects marked as spam'),
                                     ('view_metrics', 'Can view metrics on the OSF Admin app'),
                                     ('view_desk', 'Can view details about Desk users'),
                                     ('delete_preprintrequest', 'Can delete preprints withdrawal requests'),
                                     ('change_preprintrequest', 'Can update preprints withdrawal requests'))},
        ),
        migrations.CreateModel(
            name='ApiOAuth2Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('client_id', models.CharField(db_index=True, default=osf.models.oauth.generate_client_id, max_length=50, unique=True)),
                ('client_secret', models.CharField(default=osf.models.oauth.generate_client_secret, max_length=40)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('home_url', models.URLField()),
                ('callback_url', models.URLField()),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApiOAuth2PersonalToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('token_id', models.CharField(default=osf.models.oauth.generate_token_id, max_length=70, unique=True)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApiOAuth2Scope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_public', models.BooleanField(db_index=True, default=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArchiveJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('done', models.BooleanField(default=False, verbose_name='completed')),
                ('sent', models.BooleanField(default=False, verbose_name='emails sent')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.CharField(default='INITIATED', max_length=40)),
                ('datetime_initiated', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now, verbose_name='initiated at')),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArchiveTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(max_length=2048)),
                ('status', models.CharField(default='INITIATED', max_length=40)),
                ('stat_result', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('errors', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseFileNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('type', models.CharField(
                    choices=[
                        ('osf.trashedfilenode', 'trashed file node'),
                        ('osf.trashedfile', 'trashed file'),
                        ('osf.trashedfolder', 'trashed folder'),
                        ('osf.osfstoragefilenode', 'osf storage file node'),
                        ('osf.osfstoragefile', 'osf storage file'),
                        ('osf.osfstoragefolder', 'osf storage folder'),
                        ('osf.bitbucketfilenode', 'bitbucket file node'),
                        ('osf.bitbucketfolder', 'bitbucket folder'),
                        ('osf.bitbucketfile', 'bitbucket file'),
                        ('osf.boxfilenode', 'box file node'),
                        ('osf.boxfolder', 'box folder'),
                        ('osf.boxfile', 'box file'),
                        ('osf.dataversefilenode', 'dataverse file node'),
                        ('osf.dataversefolder', 'dataverse folder'),
                        ('osf.dataversefile', 'dataverse file'),
                        ('osf.dropboxfilenode', 'dropbox file node'),
                        ('osf.dropboxfolder', 'dropbox folder'),
                        ('osf.dropboxfile', 'dropbox file'),
                        ('osf.figsharefilenode', 'figshare file node'),
                        ('osf.figsharefolder', 'figshare folder'),
                        ('osf.figsharefile', 'figshare file'),
                        ('osf.githubfilenode', 'github file node'),
                        ('osf.githubfolder', 'github folder'),
                        ('osf.githubfile', 'github file'),
                        ('osf.gitlabfilenode', 'git lab file node'),
                        ('osf.gitlabfolder', 'git lab folder'),
                        ('osf.gitlabfile', 'git lab file'),
                        ('osf.googledrivefilenode', 'google drive file node'),
                        ('osf.googledrivefolder', 'google drive folder'),
                        ('osf.googledrivefile', 'google drive file'),
                        ('osf.onedrivefilenode', 'one drive file node'),
                        ('osf.onedrivefolder', 'one drive folder'),
                        ('osf.onedrivefile', 'one drive file'),
                        ('osf.owncloudfilenode', 'owncloud file node'),
                        ('osf.owncloudfolder', 'owncloud folder'),
                        ('osf.owncloudfile', 'owncloud file'),
                        ('osf.s3filenode', 's3 file node'),
                        ('osf.s3folder', 's3 folder'),
                        ('osf.s3file', 's3 file')
                    ],
                    db_index=True,
                    max_length=255
                )
                ),
                ('last_touched', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('_history', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list)),
                ('provider', models.CharField(db_index=True, max_length=25)),
                ('name', models.TextField(blank=True, default='default name')),
                ('_path', models.TextField(blank=True, null=True)),
                ('_materialized_path', models.TextField(blank=True, null=True)),
                ('deleted_on', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('checkout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('copied_from', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='copy_of', to='osf.BaseFileNode')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files_deleted_by', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_children', to='osf.BaseFileNode')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('is_root', models.BooleanField(blank=True, null=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('purged', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('target_content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='contenttypes.contenttype')),
                ('target_object_id', models.PositiveIntegerField(blank=True, default=None, null=True)),
            ],
            options={'base_manager_name': 'objects'},
            bases=(osf.models.mixins.CommentableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BlackListGuid',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('guid', osf.utils.fields.LowercaseCharField(db_index=True, max_length=255, unique=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CitationStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('date_parsed', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('short_title', models.CharField(blank=True, max_length=2048, null=True)),
                ('summary', models.CharField(blank=True, max_length=4200, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('has_bibliography', models.BooleanField(default=False)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('parent_style', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
                'ordering': ['_id'],
            },
        ),
        migrations.CreateModel(
            name='Guid',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('_id', osf.utils.fields.LowercaseCharField(db_index=True, default=osf.models.base.generate_guid,
                                                            max_length=255, unique=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('created', osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True, db_index=True)),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('spam_status', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                ('spam_pro_tip', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('spam_data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('date_last_reported', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('reports', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, validators=[osf.models.spam._validate_reports])),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('page', models.CharField(blank=True, max_length=255)),
                ('edited', models.BooleanField(default=False)),
                ('content', models.TextField(
                    validators=[osf.models.validators.CommentMaxLength(1000),
                                osf.models.validators.string_required]
                )
                ),
                ('node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('ever_mentioned', models.ManyToManyField(blank=True, related_name='mentioned_in', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='child_comments', to='osf.Guid')),
                ('root_target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='comments', to='osf.Guid')),
            ],
            options={
                'abstract': False,
            },
            bases=(osf.models.mixins.CommentableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('endpoint', models.CharField(db_index=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('info_url', models.URLField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, max_length=2048, null=True)),
                ('start_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('is_meeting', models.BooleanField(default=True)),
                ('active', models.BooleanField()),
                ('public_projects', models.BooleanField(default=True)),
                ('poster', models.BooleanField(default=True)),
                ('talk', models.BooleanField(default=True)),
                ('field_names', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=osf.models.conference.get_default_field_names)),
                ('admins', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('auto_check_spam', models.BooleanField(default=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
            ],
        ),
        migrations.AddField(
            model_name='conference',
            name='submissions',
            field=models.ManyToManyField(related_name='conferences', to='osf.AbstractNode'),
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='_contributors',
            field=models.ManyToManyField(related_name='nodes', through='osf.Contributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DraftRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('datetime_initiated', osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True)),
                ('datetime_updated', osf.utils.fields.NonNaiveDateTimeField(auto_now=True)),
                ('registration_metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('affiliated_institutions', models.ManyToManyField(related_name='draft_registrations', to='osf.Institution')),
                ('category', models.CharField(
                    blank=True,
                    choices=[
                        ('analysis', 'Analysis'),
                        ('communication', 'Communication'),
                        ('data', 'Data'),
                        ('hypothesis', 'Hypothesis'),
                        ('instrumentation', 'Instrumentation'),
                        ('methods and measures', 'Methods and Measures'),
                        ('procedure', 'Procedure'),
                        ('project', 'Project'),
                        ('software', 'Software'),
                        ('other', 'Other'),
                        ('', 'Uncategorized')
                    ], default='', max_length=255
                )
                ),
                ('_metaschema_flags', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('notes', models.TextField(blank=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('last_logged', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now,
                                                         null=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('registration_responses', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('registration_responses_migrated', models.BooleanField(db_index=True, default=True, null=True)),
                ('title', models.TextField(blank=True, default='', validators=[osf.models.validators.validate_title])),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to=settings.AUTH_USER_MODEL)),
            ],
            options={'permissions': (('read_draft_registration', 'Can read the draft registration'),
                                     ('write_draft_registration', 'Can edit the draft registration'),
                                     ('admin_draft_registration', 'Can manage the draft registration'))},
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='draft_registrations', to='osf.nodelicenserecord'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='branched_from',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='registered_draft', to='osf.abstractnode'),
        ),
        migrations.CreateModel(
            name='DraftRegistrationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('date', osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now)),
                ('action', models.CharField(max_length=255)),
                ('draft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.DraftRegistration')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict,
                                                                            encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
            ],
            options={'get_latest_by': 'created', 'ordering': ['-created']},
        ),
        migrations.CreateModel(
            name='ExternalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('oauth_key', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('oauth_secret', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('refresh_token', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('date_last_refreshed', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('expires_at', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('scopes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, default=list, size=None)),
                ('provider', models.CharField(max_length=50)),
                ('provider_name', models.CharField(max_length=255)),
                ('provider_id', models.CharField(max_length=255)),
                ('display_name', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('profile_url', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
        ),
        migrations.CreateModel(
            name='FileVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('identifier', models.CharField(max_length=100)),
                ('size', models.BigIntegerField(blank=True, default=-1, null=True)),
                ('content_type', models.CharField(blank=True, max_length=100, null=True)),
                ('metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('location', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=None, null=True, validators=[osf.models.validators.validate_location])),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('external_modified', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('purged', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
            ],
            options={'ordering': ('-created',)},
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('category', models.CharField(max_length=20)),
                ('value', models.CharField(max_length=50)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='MailRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField()),
                ('users_created', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NodeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('date', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('should_hide', models.BooleanField(default=False)),
                ('foreign_user', models.CharField(blank=True, max_length=255, null=True)),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.AbstractNode')),
                ('original_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
            ],
            options={
                'ordering': ['-date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='NotificationDigest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('timestamp', osf.utils.fields.NonNaiveDateTimeField()),
                ('send_type', models.CharField(db_index=True, max_length=50, validators=[osf.models.validators.validate_subscription_type])),
                ('event', models.CharField(max_length=50)),
                ('message', models.TextField()),
                ('node_lineage', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=None)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=100)),
                ('event_name', models.CharField(max_length=100)),
                ('email_digest', models.ManyToManyField(related_name='_notificationsubscription_email_digest_+', to=settings.AUTH_USER_MODEL)),
                ('email_transactional', models.ManyToManyField(related_name='_notificationsubscription_email_transactional_+', to=settings.AUTH_USER_MODEL)),
                ('none', models.ManyToManyField(related_name='_notificationsubscription_none_+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=300, unique=True)),
                ('date', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('total', models.PositiveIntegerField(default=0)),
                ('unique', models.PositiveIntegerField(default=0)),
                ('action', models.CharField(blank=True, max_length=128, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='pagecounters', to='osf.basefilenode')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='pagecounters', to='osf.guid')),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrivateLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('key', models.CharField(max_length=512, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('anonymous', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('nodes', models.ManyToManyField(related_name='private_links', to='osf.AbstractNode')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QueuedMail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('to_addr', models.CharField(max_length=255)),
                ('send_at', osf.utils.fields.NonNaiveDateTimeField(db_index=True)),
                ('email_type', models.CharField(db_index=True, max_length=255)),
                ('data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('sent_at', osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecentlyAddedContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', osf.utils.fields.NonNaiveDateTimeField(auto_now=True)),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recently_added_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('text', models.CharField(db_index=True, max_length=256)),
                ('bepress_subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='aliases', to='osf.subject')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('highlighted', models.BooleanField(db_index=True, default=False)),
                ('parent', models.ForeignKey(
                    blank=True,
                    null=True,
                    on_delete=django.db.models.deletion.SET_NULL,
                    related_name='children',
                    to='osf.subject',
                    validators=[osf.models.validators.validate_subject_hierarchy_length]
                )
                ),
            ],
            options={'base_manager_name': 'objects'},
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='draftregistrations', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='abstractnodes', to='osf.Subject'),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1024)),
                ('system', models.BooleanField(default=False)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True,
                                                                    default=django.utils.timezone.now,
                                                                    verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={'ordering': ('name',)}
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='tags',
            field=models.ManyToManyField(related_name='abstractnode_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='tags',
            field=models.ManyToManyField(blank=True, to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='tags',
            field=models.ManyToManyField(related_name='draftregistration_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='tags',
            field=models.ManyToManyField(related_name='basefilenode_tagged', to='osf.Tag'),
        ),
        migrations.CreateModel(
            name='UserActivityCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, max_length=5, unique=True)),
                ('action', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('date', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('total', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together=set([('name', 'system')]),
        ),
        migrations.AlterUniqueTogether(
            name='nodelicense',
            unique_together=set([('_id', 'license_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='externalaccount',
            unique_together=set([('provider', 'provider_id')]),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='versions',
            field=models.ManyToManyField(to='osf.FileVersion'),
        ),
        migrations.AddField(
            model_name='archivejob',
            name='target_addons',
            field=models.ManyToManyField(to='osf.ArchiveTarget'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='affiliated_institutions',
            field=models.ManyToManyField(blank=True, to='osf.Institution'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='external_accounts',
            field=models.ManyToManyField(blank=True, to='osf.ExternalAccount'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='merged_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='merger', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='recently_added',
            field=models.ManyToManyField(through='osf.RecentlyAddedContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='BoxFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='DataverseFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='DropboxFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='FigshareFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='GithubFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='GoogleDriveFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.CreateModel(
            name='OsfStorageFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='OwncloudFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.abstractnode',),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registered_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='draft_registration', to='osf.Registration'),
        ),
        migrations.CreateModel(
            name='S3FileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='TrashedFileNode',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.basefilenode',),
        ),
        migrations.AlterUniqueTogether(
            name='recentlyaddedcontributor',
            unique_together=set([('user', 'contributor')]),
        ),
        migrations.AddField(
            model_name='notificationsubscription',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to='osf.Node'),
        ),
        migrations.AlterUniqueTogether(
            name='noderelation',
            unique_together=set([('parent', 'child')]),
        ),
        migrations.AlterIndexTogether(
            name='noderelation',
            index_together=set([('is_node_link', 'child', 'parent')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='noderelation',
            order_with_respect_to='parent',
        ),
        migrations.AddField(
            model_name='mailrecord',
            name='nodes_created',
            field=models.ManyToManyField(to='osf.Node'),
        ),
        migrations.AlterUniqueTogether(
            name='institutionalcontributor',
            unique_together=set([('user', 'institution')]),
        ),
        migrations.AlterUniqueTogether(
            name='identifier',
            unique_together=set([('object_id', 'content_type', 'category')]),
        ),
        migrations.AlterIndexTogether(
            name='guid',
            index_together=set([('content_type', 'object_id', 'created')]),
        ),
        migrations.AddField(
            model_name='embargoterminationapproval',
            name='embargoed_registration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.Registration'),
        ),

        migrations.AlterUniqueTogether(
            name='contributor',
            unique_together=set([('user', 'node')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='contributor',
            order_with_respect_to='node',
        ),
        migrations.AddField(
            model_name='archivejob',
            name='dst_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='archive_jobs', to='osf.Registration', verbose_name='destination node'),
        ),
        migrations.AddField(
            model_name='archivejob',
            name='src_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.Node', verbose_name='source node'),
        ),
        migrations.AlterIndexTogether(
            name='abstractnode',
            index_together=set([('is_public', 'is_deleted', 'type')]),
        ),
        migrations.CreateModel(
            name='BoxFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.boxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='BoxFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.boxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DataverseFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dataversefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DataverseFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dataversefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DropboxFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dropboxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='DropboxFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.dropboxfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='FigshareFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.figsharefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='FigshareFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.figsharefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GithubFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.githubfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GithubFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.githubfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GoogleDriveFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.googledrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GoogleDriveFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.googledrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OsfStorageFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.osfstoragefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OsfStorageFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.osfstoragefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OwncloudFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.owncloudfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OwncloudFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.owncloudfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='S3File',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.s3filenode', models.Model),
        ),
        migrations.CreateModel(
            name='S3Folder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.s3filenode', models.Model),
        ),
        migrations.CreateModel(
            name='TrashedFile',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.trashedfilenode',),
        ),
        migrations.CreateModel(
            name='TrashedFolder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('osf.trashedfilenode',),
        ),
        migrations.CreateModel(
            name='AbstractProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24)),
                ('reviews_workflow', models.CharField(blank=True,
                                                      choices=[(None, 'None'), ('pre-moderation', 'Pre-Moderation'),
                                                               ('post-moderation', 'Post-Moderation')], max_length=15,
                                                      null=True)),
                ('reviews_comments_private', models.BooleanField(blank=True, null=True)),
                ('reviews_comments_anonymous', models.BooleanField(blank=True, null=True)),
                ('type', models.CharField(choices=[('osf.collectionprovider', 'collection provider'),
                                                   ('osf.registrationprovider', 'registration provider'),
                                                   ('osf.preprintprovider', 'preprint provider')], db_index=True,
                                          max_length=255)),
                ('name', models.CharField(max_length=128)),
                ('advisory_board', models.TextField(blank=True, default='')),
                ('description', models.TextField(blank=True, default='')),
                ('domain', models.URLField(blank=True, default='')),
                ('domain_redirect_enabled', models.BooleanField(default=False)),
                ('external_url', models.URLField(blank=True, null=True)),
                ('email_contact', models.CharField(blank=True, max_length=200, null=True)),
                ('email_support', models.CharField(blank=True, max_length=200, null=True)),
                ('social_twitter', models.CharField(blank=True, max_length=200, null=True)),
                ('social_facebook', models.CharField(blank=True, max_length=200, null=True)),
                ('social_instagram', models.CharField(blank=True, max_length=200, null=True)),
                ('footer_links', models.TextField(blank=True, default='')),
                ('facebook_app_id', models.BigIntegerField(blank=True, null=True)),
                ('example', models.CharField(blank=True, max_length=20, null=True)),
                ('allow_submissions', models.BooleanField(default=True)),
                ('allow_commenting', models.BooleanField(default=False)),
                ('access_token', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('branded_discovery_page', models.BooleanField(default=True)),
                ('advertises_on_discovery', models.BooleanField(default=True)),
                ('has_landing_page', models.BooleanField(default=False)),
                ('share_publish_type', models.CharField(
                    choices=[('Preprint', 'Preprint'), ('Thesis', 'Thesis'), ('Registration', 'Registration')],
                    default='Thesis', help_text='This SHARE type will be used when pushing publications to SHARE',
                    max_length=32)),
                ('share_source', models.CharField(blank=True, default='', max_length=200)),
                ('share_title', models.TextField(blank=True, default='')),
                ('doi_prefix', models.CharField(blank=True, max_length=32, null=True)),
                ('additional_metadata_fields', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True,
                                                                                                         encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder,
                                                                                                         null=True)),
                ('bulk_upload_auto_approval', models.BooleanField(default=False, null=True)),
                ('allow_updates', models.BooleanField(default=False, null=True)),
                ('allow_bulk_uploads', models.BooleanField(default=False, null=True)),
                ('additional_providers',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True,
                                                           default=list, size=None)),
                ('preprint_word', models.CharField(
                    choices=[('preprint', 'Preprint'), ('paper', 'Paper'), ('thesis', 'Thesis'), ('work', 'Work'),
                             ('none', 'None')], default='preprint', max_length=10)),
                ('subjects_acceptable',
                 osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list,
                                                                           encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
            ],
            options={
                'permissions': (('set_up_moderation', 'Can set up moderation for this provider'),
                                ('view_submissions', 'Can view all submissions to this provider'),
                                ('accept_submissions', 'Can accept submissions to this provider'),
                                ('reject_submissions', 'Can reject submissions to this provider'),
                                ('withdraw_submissions', 'Can withdraw submissions from this provider'),
                                ('edit_review_comments', 'Can edit comments on actions for this provider'),
                                ('view_actions', 'Can view actions on submissions to this provider'),
                                ('add_moderator', 'Can add other users as moderators for this provider'),
                                ('update_moderator', 'Can elevate or lower other moderators/admins'), (
                                'remove_moderator',
                                'Can remove moderators from this provider. Implicitly granted to self'),
                                ('edit_reviews_settings', 'Can edit reviews settings for this provider'),
                                ('add_reviewer', 'Can add other users as reviewers for this provider'), (
                                'assign_reviewer',
                                'Can assign reviewers to review specific submissions to this provider'), (
                                'view_assigned_submissions',
                                'Can view submissions to this provider which have been assigned to this user'), (
                                'review_assigned_submissions',
                                'Can submit reviews for submissions to this provider which have been assigned to this user')),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='AbstractProviderGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractProviderUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BannerImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=256, unique=True)),
                ('image', models.BinaryField()),
            ],
        ),
        migrations.CreateModel(
            name='BaseFileVersionsThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_name', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('hero_logo_image', models.URLField()),
                ('topnav_logo_image', models.URLField()),
                ('hero_background_image', models.URLField()),
                ('primary_color', models.CharField(max_length=7)),
                ('secondary_color', models.CharField(max_length=7)),
            ],
            options={
                'permissions': (('modify_brand', 'Can modify brands'),),
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='ChronosJournal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField()),
                ('title', models.TextField()),
                ('journal_id', models.TextField(unique=True)),
                ('raw_response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(
                    encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='ChronosSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('publication_id', models.TextField(unique=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')],
                                               default=None, null=True)),
                ('raw_response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(
                    encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('submission_url', models.TextField()),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='CollectionGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DismissedAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, max_length=255)),
                ('location', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='DraftRegistrationContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DraftRegistrationGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftRegistrationUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('address', osf.utils.fields.LowercaseEmailField(db_index=True, max_length=254, unique=True,
                                                                 validators=[osf.models.validators.validate_email])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='FileMetadataRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                                       encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='FileMetadataSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('name', models.CharField(max_length=255)),
                ('schema', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict,
                                                                                     encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('visible', models.BooleanField(default=True)),
                ('schema_version', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='FileVersionUserMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='MaintenanceState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(choices=[(1, 'info'), (2, 'warning'), (3, 'danger')], default=1)),
                ('start', osf.utils.fields.NonNaiveDateTimeField()),
                ('end', osf.utils.fields.NonNaiveDateTimeField()),
                ('message', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='NodeGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NodeRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('machine_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected')], db_index=True, default='initial', max_length=15)),
                ('date_last_transitioned', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('request_type',
                 models.CharField(choices=[('access', 'Access'), ('withdrawal', 'Withdrawal')], max_length=31)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='NodeRequestAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept', 'Accept'), ('reject', 'Reject'),
                                                      ('edit_comment', 'Edit_Comment')], max_length=31)),
                ('from_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected')], max_length=31)),
                ('to_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected')], max_length=31)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('permissions',
                 models.CharField(choices=[('read', 'Read'), ('write', 'Write'), ('admin', 'Admin')], default='read',
                                  max_length=5)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='NodeUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotableEmailDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('domain', osf.utils.fields.LowercaseCharField(db_index=True, max_length=255, unique=True)),
                ('note',
                 models.IntegerField(choices=[(0, 'EXCLUDE_FROM_ACCOUNT_CREATION'), (1, 'ASSUME_HAM_UNTIL_REPORTED')],
                                     default=osf.models.notable_email_domain.NotableEmailDomain.Note[
                                         'EXCLUDE_FROM_ACCOUNT_CREATION'])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='OSFGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('last_logged',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now,
                                                        null=True)),
                ('name', models.TextField()),
            ],
            options={
                'permissions': (('view_group', 'Can view group details'), ('member_group', 'Has group membership'),
                                ('manage_group', 'Can manage group membership')),
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='OSFGroupGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OSFGroupLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict,
                                                                                     encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('should_hide', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='OSFGroupUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Preprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('spam_status', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                ('spam_pro_tip', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('spam_data', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                                        encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('date_last_reported',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('reports', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                                      encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder,
                                                                                      validators=[
                                                                                          osf.models.spam._validate_reports])),
                ('last_logged',
                 osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now,
                                                        null=True)),
                ('title', models.TextField(validators=[osf.models.validators.validate_title])),
                ('description', models.TextField(blank=True, default='')),
                ('date_last_transitioned', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('machine_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], db_index=True, default='initial',
                    max_length=15)),
                ('is_published', models.BooleanField(db_index=True, default=False)),
                ('date_published', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('original_publication_date', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('preprint_doi_created', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('date_withdrawn', osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True)),
                ('withdrawal_justification', models.TextField(blank=True, default='')),
                ('ever_public', models.BooleanField(blank=True, default=False)),
                ('article_doi', models.CharField(blank=True, max_length=128, null=True,
                                                 validators=[osf.models.validators.validate_doi])),
                ('is_public', models.BooleanField(db_index=True, default=True)),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('migrated', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('conflict_of_interest_statement', models.TextField(blank=True, null=True)),
                ('has_coi', models.BooleanField(blank=True, null=True)),
                ('has_prereg_links', models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'),
                                                                           ('not_applicable', 'Not applicable')],
                                                      null=True)),
                ('why_no_prereg', models.TextField(blank=True, null=True)),
                ('prereg_links',
                 django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True),
                                                           blank=True, null=True, size=None)),
                ('prereg_link_info', models.TextField(blank=True,
                                                      choices=[('prereg_designs', 'Pre-registration of study designs'),
                                                               (
                                                               'prereg_analysis', 'Pre-registration of study analysis'),
                                                               ('prereg_both',
                                                                'Pre-registration of study designs and study analysis')],
                                                      null=True)),
                ('has_data_links', models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'),
                                                                         ('not_applicable', 'Not applicable')],
                                                    null=True)),
                ('why_no_data', models.TextField(blank=True, null=True)),
                ('data_links',
                 django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True),
                                                           blank=True, null=True, size=None)),
            ],
            options={
                'permissions': (
                    ('read_preprint', 'Can read the preprint'),
                    ('write_preprint', 'Can write the preprint'),
                    ('admin_preprint', 'Can manage the preprint')
                ),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='preprint',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='preprints', to='osf.Subject'),
        ),
        migrations.CreateModel(
            name='PreprintContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PreprintGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreprintLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict,
                                                                                     encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('should_hide', models.BooleanField(default=False)),
                ('foreign_user', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='PreprintRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('machine_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected')], db_index=True, default='initial', max_length=15)),
                ('date_last_transitioned', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('request_type',
                 models.CharField(choices=[('access', 'Access'), ('withdrawal', 'Withdrawal')], max_length=31)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='PreprintRequestAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept', 'Accept'), ('reject', 'Reject'),
                                                      ('edit_comment', 'Edit_Comment')], max_length=31)),
                ('from_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected')], max_length=31)),
                ('to_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected')], max_length=31)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='PreprintUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProviderAssetFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(
                    choices=[('favicon', 'favicon'), ('powered_by_share', 'powered_by_share'), ('sharing', 'sharing'),
                             ('square_color_no_transparent', 'square_color_no_transparent'),
                             ('square_color_transparent', 'square_color_transparent'), ('style', 'style'),
                             ('wide_black', 'wide_black'), ('wide_color', 'wide_color'), ('wide_white', 'wide_white')],
                    max_length=63)),
                ('file', models.FileField(upload_to='assets')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept_submission', 'AcceptSubmission'),
                                                      ('reject_submission', 'RejectSubmission'),
                                                      ('request_withdrawal', 'RequestWithdrawal'),
                                                      ('accept_withdrawal', 'AcceptWithdrawal'),
                                                      ('reject_withdrawal', 'RejectWithdrawal'),
                                                      ('force_withdraw', 'ForceWithdraw')], max_length=31)),
                ('from_state', models.CharField(
                    choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'),
                             ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'),
                             ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'),
                             ('pending_withdraw_request', 'PendingWithdrawRequest'),
                             ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], max_length=31)),
                ('to_state', models.CharField(
                    choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'),
                             ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'),
                             ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'),
                             ('pending_withdraw_request', 'PendingWithdrawRequest'),
                             ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationBulkUploadJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('payload_hash', models.CharField(max_length=255, unique=True)),
                ('state', models.IntegerField(
                    choices=[(osf.models.registration_bulk_upload_job.JobState['PENDING'], 'PENDING'),
                             (osf.models.registration_bulk_upload_job.JobState['INITIALIZED'], 'INITIALIZED'),
                             (osf.models.registration_bulk_upload_job.JobState['PICKED_UP'], 'PICKED_UP'),
                             (osf.models.registration_bulk_upload_job.JobState['DONE_FULL'], 'DONE_FULL'),
                             (osf.models.registration_bulk_upload_job.JobState['DONE_PARTIAL'], 'DONE_PARTIAL'),
                             (osf.models.registration_bulk_upload_job.JobState['DONE_ERROR'], 'DONE_ERROR')],
                    default=osf.models.registration_bulk_upload_job.JobState['PENDING'])),
                ('email_sent', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationBulkUploadRow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_completed', models.BooleanField(default=False)),
                ('is_picked_up', models.BooleanField(default=False)),
                ('csv_raw', models.TextField(default='')),
                ('csv_parsed', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict,
                                                                                         encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('row_hash', models.CharField(default='', max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('name', models.CharField(max_length=255)),
                ('schema', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict,
                                                                                     encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('visible', models.BooleanField(default=True)),
                ('schema_version', models.IntegerField()),
                ('config', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict,
                                                                                     encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationSchemaBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('help_text', models.TextField()),
                ('example_text', models.TextField(null=True)),
                ('registration_response_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('schema_block_group_key', models.CharField(db_index=True, max_length=24, null=True)),
                ('block_type', models.CharField(
                    choices=[('page-heading', 'page-heading'), ('section-heading', 'section-heading'),
                             ('subsection-heading', 'subsection-heading'), ('paragraph', 'paragraph'),
                             ('question-label', 'question-label'), ('short-text-input', 'short-text-input'),
                             ('long-text-input', 'long-text-input'), ('file-input', 'file-input'),
                             ('contributors-input', 'contributors-input'),
                             ('single-select-input', 'single-select-input'),
                             ('multi-select-input', 'multi-select-input'),
                             ('select-input-option', 'select-input-option'),
                             ('select-other-option', 'select-other-option')], db_index=True, max_length=31)),
                ('display_text', models.TextField()),
                ('required', models.BooleanField(default=False)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='ReviewAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept', 'Accept'), ('reject', 'Reject'),
                                                      ('edit_comment', 'Edit_Comment'), ('withdraw', 'Withdraw')],
                                             max_length=31)),
                ('from_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], max_length=31)),
                ('to_state', models.CharField(
                    choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'),
                             ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='reviewaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions',
                                    to='osf.preprint'),
        ),
        migrations.CreateModel(
            name='ScheduledBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('start_date', osf.utils.fields.NonNaiveDateTimeField()),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField()),
                ('color', models.CharField(max_length=7)),
                ('license', models.CharField(blank=True, max_length=256, null=True)),
                ('link', models.URLField(blank=True, default='https://www.crowdrise.com/centerforopenscience')),
                ('default_photo', models.FileField(storage=osf.utils.storage.BannerImageStorage(), upload_to='')),
                ('default_alt_text', models.TextField()),
                ('mobile_photo', models.FileField(storage=osf.utils.storage.BannerImageStorage(), upload_to='')),
                ('mobile_alt_text', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchemaResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('revision_justification', models.CharField(blank=True, max_length=2048, null=True)),
                ('submitted_timestamp', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('reviews_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                            ('pending_moderation', 'PendingModeration'),
                                                            ('approved', 'Approved'), ('rejected', 'Rejected'),
                                                            ('moderator_rejected', 'ModeratorRejected'),
                                                            ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                                   default='in_progress', max_length=255)),
                ('object_id', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['-created'],
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='SchemaResponseAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(
                    choices=[('submit', 'Submit'), ('approve', 'Approve'), ('accept', 'Accept'),
                             ('admin_reject', 'AdminReject'), ('moderator_reject', 'ModeratorReject')], max_length=31)),
                ('from_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                         ('pending_moderation', 'PendingModeration'),
                                                         ('approved', 'Approved'), ('rejected', 'Rejected'),
                                                         ('moderator_rejected', 'ModeratorRejected'),
                                                         ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                                max_length=31)),
                ('to_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'),
                                                       ('pending_moderation', 'PendingModeration'),
                                                       ('approved', 'Approved'), ('rejected', 'Rejected'),
                                                       ('moderator_rejected', 'ModeratorRejected'),
                                                       ('completed', 'Completed'), ('in_progress', 'InProgress')],
                                              max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='SchemaResponseBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('schema_key', models.CharField(max_length=255)),
                ('response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True,
                                                                                       encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder,
                                                                                       null=True)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='WhitelistedSHAREPreprintProvider',
            fields=[
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('provider_name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='BitbucketFileNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='DraftNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.CreateModel(
            name='GitLabFileNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='OneDriveFileNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.basefilenode',),
        ),
        migrations.CreateModel(
            name='QuickFilesNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.AddField(
            model_name='apioauth2personaltoken',
            name='scopes',
            field=models.ManyToManyField(related_name='tokens', to='osf.ApiOAuth2Scope'),
        ),
        migrations.AlterIndexTogether(
            name='basefilenode',
            index_together={('target_content_type', 'target_object_id')},
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(
                condition=models.Q(('is_public', True), ('is_deleted', False), ('type', 'osf.registration')),
                fields=['is_public', 'is_deleted', 'type'], name='reg_pub_del_type_index'),
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(condition=models.Q(('is_public', True), ('is_deleted', False), ('type', 'osf.node')),
                               fields=['is_public', 'is_deleted', 'type'], name='node_pub_del_type_index'),
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(
                condition=models.Q(('is_public', True), ('is_deleted', False), ('type', 'osf.collection')),
                fields=['is_public', 'is_deleted', 'type'], name='collection_pub_del_type_index'),
        ),
        migrations.AddIndex(
            model_name='nodelog',
            index=models.Index(fields=['node', '-date'], name='nodelog__node_id_date_desc'),
        ),
        migrations.AddIndex(
            model_name='pagecounter',
            index=models.Index(fields=['action', 'resource_id', 'file_id', 'version'], name='page_counter_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(django.db.models.functions.text.Lower('name'), django.db.models.expressions.F('system'),
                               name='lowercase_tag_index'),
        ),
        migrations.AddField(
            model_name='schemaresponseblock',
            name='source_schema_response',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updated_response_blocks',
                                    to='osf.schemaresponse'),
        ),
        migrations.AddField(
            model_name='schemaresponseaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponseaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions',
                                    to='osf.schemaresponse'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='initiator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='pending_approvers',
            field=models.ManyToManyField(related_name='pending_submissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='previous_response',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='updated_response', to='osf.schemaresponse'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='response_blocks',
            field=models.ManyToManyField(to='osf.SchemaResponseBlock'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='reviewaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registrationschemablock',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schema_blocks',
                                    to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadrow',
            name='draft_registration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadrow',
            name='upload',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='osf.registrationbulkuploadjob'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadjob',
            name='initiator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadjob',
            name='schema',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='registrationaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registrationaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions',
                                    to='osf.registration'),
        ),
        migrations.AddField(
            model_name='providerassetfile',
            name='providers',
            field=models.ManyToManyField(blank=True, related_name='asset_files', to='osf.AbstractProvider'),
        ),
        migrations.AddField(
            model_name='preprintuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.preprint'),
        ),
        migrations.AddField(
            model_name='preprintuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='preprintuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprintrequestaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprintrequestaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions',
                                    to='osf.preprintrequest'),
        ),
        migrations.AddField(
            model_name='preprintrequest',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='submitted_preprintrequest', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprintrequest',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests',
                                    to='osf.preprint'),
        ),
        migrations.AddField(
            model_name='preprintlog',
            name='preprint',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='logs', to='osf.preprint'),
        ),
        migrations.AddField(
            model_name='preprintlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='preprint_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprintgroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.preprint'),
        ),
        migrations.AddField(
            model_name='preprintgroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='preprintgroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='preprintcontributor',
            name='preprint',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.preprint'),
        ),
        migrations.AddField(
            model_name='preprintcontributor',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprint',
            name='_contributors',
            field=models.ManyToManyField(related_name='preprints', through='osf.PreprintContributor',
                                         to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprint',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='preprints_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprint',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='osf.nodelicenserecord'),
        ),
        migrations.AddField(
            model_name='preprint',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='preprints', to='osf.abstractnode'),
        ),
        migrations.AddField(
            model_name='preprint',
            name='primary_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='preprint', to='osf.osfstoragefile'),
        ),
        migrations.AddField(
            model_name='preprint',
            name='tags',
            field=models.ManyToManyField(related_name='preprint_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='osfgroupuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.osfgroup'),
        ),
        migrations.AddField(
            model_name='osfgroupuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='osfgroupuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfgrouplog',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='logs', to='osf.osfgroup'),
        ),
        migrations.AddField(
            model_name='osfgrouplog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='group_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfgroupgroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.osfgroup'),
        ),
        migrations.AddField(
            model_name='osfgroupgroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='osfgroupgroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='osfgroup',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='osfgroups_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nodeuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.abstractnode'),
        ),
        migrations.AddField(
            model_name='nodeuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='nodeuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='noderequestaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='noderequestaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions',
                                    to='osf.noderequest'),
        ),
        migrations.AddField(
            model_name='noderequest',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_noderequest',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='noderequest',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests',
                                    to='osf.abstractnode'),
        ),
        migrations.AddField(
            model_name='nodegroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.abstractnode'),
        ),
        migrations.AddField(
            model_name='nodegroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='nodegroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='fileversionusermetadata',
            name='file_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.fileversion'),
        ),
        migrations.AddField(
            model_name='fileversionusermetadata',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='filemetadataschema',
            unique_together={('name', 'schema_version')},
        ),
        migrations.AddField(
            model_name='filemetadatarecord',
            name='file',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records',
                                    to='osf.osfstoragefile'),
        ),
        migrations.AddField(
            model_name='filemetadatarecord',
            name='schema',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records',
                                    to='osf.filemetadataschema'),
        ),
        migrations.AddField(
            model_name='email',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='draft_registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.draftregistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dismissedalert',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='collectionuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='collectionuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='collectiongroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='collectiongroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='chronossubmission',
            name='journal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.chronosjournal'),
        ),
        migrations.AddField(
            model_name='chronossubmission',
            name='preprint',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.preprint'),
        ),
        migrations.AddField(
            model_name='chronossubmission',
            name='submitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='basefileversionsthrough',
            name='basefilenode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.basefilenode'),
        ),
        migrations.AddField(
            model_name='basefileversionsthrough',
            name='fileversion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.fileversion'),
        ),
        migrations.AddField(
            model_name='abstractprovideruserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.abstractprovider'),
        ),
        migrations.AddField(
            model_name='abstractprovideruserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='abstractprovideruserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractprovidergroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.abstractprovider'),
        ),
        migrations.AddField(
            model_name='abstractprovidergroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
        ),
        migrations.AddField(
            model_name='abstractprovidergroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='providers', to='osf.brand'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='default_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='default_license', to='osf.nodelicense'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='default_schema',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='default_schema', to='osf.registrationschema'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='licenses_acceptable',
            field=models.ManyToManyField(blank=True, related_name='licenses_acceptable', to='osf.NodeLicense'),
        ),
        migrations.CreateModel(
            name='BitbucketFile',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.bitbucketfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='BitbucketFolder',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.bitbucketfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='CollectionProvider',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractprovider',),
        ),
        migrations.CreateModel(
            name='GitLabFile',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.gitlabfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GitLabFolder',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.gitlabfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OneDriveFile',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.onedrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OneDriveFolder',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.onedrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='RegistrationProvider',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractprovider',),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='_contributors',
            field=models.ManyToManyField(related_name='draft_registrations', through='osf.DraftRegistrationContributor',
                                         to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fileversion',
            name='seen_by',
            field=models.ManyToManyField(related_name='versions_seen', through='osf.FileVersionUserMetadata',
                                         to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationdigest',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='osf.abstractprovider'),
        ),
        migrations.AddField(
            model_name='notificationsubscription',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='notification_subscriptions', to='osf.abstractprovider'),
        ),
        migrations.AddField(
            model_name='subject',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subjects',
                                    to='osf.abstractprovider'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registered_schema',
            field=models.ManyToManyField(to='osf.RegistrationSchema'),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='versions',
            field=models.ManyToManyField(through='osf.BaseFileVersionsThrough', to='osf.FileVersion'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_schema',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='osf.registrationschema'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationsubscription',
            unique_together={('_id', 'provider')},
        ),
        migrations.AlterUniqueTogether(
            name='subject',
            unique_together={('text', 'provider')},
        ),
        migrations.AlterUniqueTogether(
            name='schemaresponseblock',
            unique_together={('source_schema_response', 'schema_key')},
        ),
        migrations.AddIndex(
            model_name='schemaresponse',
            index=models.Index(fields=['reviews_state'], name='osf_schemar_reviews_c361bc_idx'),
        ),
        migrations.AddIndex(
            model_name='schemaresponse',
            index=models.Index(fields=['object_id', 'content_type'], name='osf_schemar_object__8cc95e_idx'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='registrationschemablock',
            order_with_respect_to='schema',
        ),
        migrations.AlterUniqueTogether(
            name='registrationschemablock',
            unique_together={('schema', 'registration_response_key')},
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='providers',
            field=models.ManyToManyField(blank=True, related_name='schemas', to='osf.RegistrationProvider'),
        ),
        migrations.AddField(
            model_name='registrationbulkuploadjob',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='osf.registrationprovider'),
        ),
        migrations.AlterUniqueTogether(
            name='preprintuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='preprintgroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='preprintcontributor',
            order_with_respect_to='preprint',
        ),
        migrations.AlterUniqueTogether(
            name='preprintcontributor',
            unique_together={('user', 'preprint')},
        ),
        migrations.AlterUniqueTogether(
            name='osfgroupuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='osfgroupgroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='nodeuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='nodegroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='fileversionusermetadata',
            unique_together={('user', 'file_version')},
        ),
        migrations.AlterUniqueTogether(
            name='filemetadatarecord',
            unique_together={('file', 'schema')},
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationgroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='draftregistrationcontributor',
            order_with_respect_to='draft_registration',
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationcontributor',
            unique_together={('user', 'draft_registration')},
        ),
        migrations.AlterUniqueTogether(
            name='dismissedalert',
            unique_together={('_id', 'location')},
        ),
        migrations.AlterUniqueTogether(
            name='chronossubmission',
            unique_together={('preprint', 'journal')},
        ),
        migrations.AlterUniqueTogether(
            name='basefileversionsthrough',
            unique_together={('basefilenode', 'fileversion')},
        ),
        migrations.AlterIndexTogether(
            name='basefileversionsthrough',
            index_together={('basefilenode', 'fileversion')},
        ),
        migrations.AlterUniqueTogether(
            name='abstractprovideruserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='abstractprovidergroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.CreateModel(
            name='PreprintProvider',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('osf.abstractprovider',),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='registrations', to='osf.registrationprovider'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='provider',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='draft_registrations', to='osf.registrationprovider'),
        ),
        migrations.AlterUniqueTogether(
            name='registrationschema',
            unique_together={('name', 'schema_version')},
        ),
        migrations.AddField(
            model_name='preprint',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='preprints', to='osf.preprintprovider'),
        ),
        migrations.AlterUniqueTogether(
            name='abstractprovider',
            unique_together={('_id', 'type')},
        ),
        migrations.AddIndex(
            model_name='nodelog',
            index=models.Index(fields=['should_hide', 'node'], name='osf_nodelog_should_hide_nid'),
        ),
        migrations.AddConstraint(
            model_name='noderequest',
            constraint=models.UniqueConstraint(condition=models.Q(_negated=True, machine_state='accepted'),
                                               fields=('target_id', 'creator_id'),
                                               name='osf_noderequest_target_creator_non_accepted'),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=200, validators=[osf.models.validators.validate_title])),
                ('collected_type_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('status_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('volume_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('issue_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('program_area_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('school_type_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('study_design_choices',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True,
                                                           default=list, size=None)),
                ('is_public', models.BooleanField(db_index=True, default=False)),
                ('is_promoted', models.BooleanField(db_index=True, default=False)),
                ('is_bookmark_collection', models.BooleanField(db_index=True, default=False)),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('collected_types', models.ManyToManyField(
                    limit_choices_to={
                        'model__in': [
                            'abstractnode',
                            'basefilenode',
                            'collection',
                            'preprint'
                        ]
                    },
                    related_name='_osf_collection_collected_types_+', to='contenttypes.ContentType'
                )
                ),
                ('creator',
                 models.ForeignKey(
                     on_delete=django.db.models.deletion.CASCADE,
                     to=settings.AUTH_USER_MODEL
                 )
                 ),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                               to='osf.abstractprovider')),
            ],
            options={
                'permissions': (('read_collection', 'Read Collection'), ('write_collection', 'Write Collection'),
                                ('admin_collection', 'Admin Collection')),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='collectionuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.collection'),
        ),
        migrations.AddField(
            model_name='collectiongroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.collection'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='primary_collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to='osf.collection'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='collectiongroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.CreateModel(
            name='CollectionSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('collected_type', models.CharField(blank=True, max_length=127)),
                ('status', models.CharField(blank=True, max_length=127)),
                ('volume', models.CharField(blank=True, max_length=127)),
                ('issue', models.CharField(blank=True, max_length=127)),
                ('program_area', models.CharField(blank=True, max_length=127)),
                ('school_type', models.CharField(blank=True, max_length=127)),
                ('study_design', models.CharField(blank=True, max_length=127)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Collection')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('guid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.guid')),
                ('subjects', models.ManyToManyField(blank=True, related_name='collectionsubmissions', to='osf.Subject')),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='collection',
            name='guid_links',
            field=models.ManyToManyField(related_name='collections', through='osf.CollectionSubmission', to='osf.Guid'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='collectionsubmission',
            order_with_respect_to='collection',
        ),
        migrations.AlterUniqueTogether(
            name='collectionsubmission',
            unique_together={('collection', 'guid')},
        ),
        migrations.RunSQL(
            [
                """
                CREATE INDEX fileversion_metadata_sha_arch_vault_index
                  ON osf_fileversion ((osf_fileversion.metadata -> 'sha256'), (osf_fileversion.metadata -> 'archive'), (
                    osf_fileversion.metadata -> 'vault'));
                """
            ],
            [
                """
                DROP INDEX fileversion_metadata_sha_arch_vault_index;
                """
            ]
        ),
        migrations.AddIndex(
            model_name='abstractnode',
            index=models.Index(fields=['-registered_date'], name='registered_date_index'),
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('title', models.TextField(validators=[osf.models.validators.validate_title])),
                ('description', models.TextField(blank=True, default='')),
                ('category', models.CharField(blank=True,
                                              choices=[('analysis', 'Analysis'), ('communication', 'Communication'),
                                                       ('data', 'Data'), ('hypothesis', 'Hypothesis'),
                                                       ('instrumentation', 'Instrumentation'),
                                                       ('methods and measures', 'Methods and Measures'),
                                                       ('procedure', 'Procedure'), ('project', 'Project'),
                                                       ('software', 'Software'), ('other', 'Other'),
                                                       ('', 'Uncategorized')], default='', max_length=255)),
                ('affiliated_institutions', models.ManyToManyField(related_name='outcomes', to='osf.Institution')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='OutcomeArtifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('artifact_type', models.IntegerField(
                    choices=[(0, 'UNDEFINED'), (1, 'DATA'), (11, 'CODE'), (21, 'MATERIALS'), (31, 'PAPERS'),
                             (41, 'SUPPLEMENTS'), (1001, 'PRIMARY')], default=osf.utils.outcomes.ArtifactTypes(0))),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('identifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                 related_name='artifact_metadata', to='osf.Identifier')),
                ('outcome',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artifact_metadata',
                                   to='osf.Outcome')),
            ],
            options={
                'ordering': ['artifact_type', 'title'],
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='outcome',
            name='artifacts',
            field=models.ManyToManyField(through='osf.OutcomeArtifact', to='osf.Identifier'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='outcomes', to='osf.NodeLicenseRecord'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='outcomes', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='tags',
            field=models.ManyToManyField(related_name='outcome_tagged', to='osf.Tag'),
        ),
        migrations.AddIndex(
            model_name='outcomeartifact',
            index=models.Index(fields=['outcome', 'artifact_type'], name='osf_outcome_outcome_a62f5c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='outcomeartifact',
            unique_together=set([('outcome', 'identifier', 'artifact_type')]),
        ),
        migrations.AddField(
            model_name='outcomeartifact',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='outcomeartifact',
            name='finalized',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='outcomeartifact',
            name='description',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='outcomeartifact',
            name='title',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='outcomeartifact',
            name='artifact_type',
            field=models.IntegerField(
                choices=[(0, 'UNDEFINED'), (1, 'DATA'), (11, 'ANALYTIC_CODE'), (21, 'MATERIALS'), (31, 'PAPERS'),
                         (41, 'SUPPLEMENTS'), (1001, 'PRIMARY')], default=osf.utils.outcomes.ArtifactTypes(0)),
        ),
    ]
