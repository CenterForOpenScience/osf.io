# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-08-15 19:09
from __future__ import unicode_literals

import dirtyfields.dirtyfields
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_extensions.db.fields
import osf.models.base
import osf.models.registration_bulk_upload_job
import osf.models.registrations
import osf.models.spam
import osf.models.validators
import osf.utils.datetime_aware_jsonfield
import osf.utils.fields
import osf.utils.migrations
import osf.utils.outcomes
import osf.utils.storage


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# osf.migrations.0012_auto_20170411_1548
# osf.migrations.0021_unique_notificationsettings__ids
# osf.migrations.0024_migrate_subject_parents_to_parent
# osf.migrations.0025_migrate_preprint_subjects_to_fks
# osf.migrations.0032_unquote_gd_nodesettings_folder_path
# osf.migrations.0033_user_emails_to_fk
# osf.migrations.0037_remove_emails_for_unconfirmed_users
# osf.migrations.0043_set_share_title
# osf.migrations.0044_basefilenode_uniqueness_index
# osf.migrations.0044_ever_mentioned_array_to_m2m
# osf.migrations.0051_remove_invalid_social_entries
# osf.migrations.0053_add_quickfiles
# osf.migrations.0055_update_metaschema_active
# osf.migrations.0061_add_reviews_notification_subscription
# osf.migrations.0062_accept_preprints
# osf.migrations.0069_auto_20171127_1119
# osf.migrations.0077_add_maintenance_permissions
# osf.migrations.0078_add_banner_permissions
# osf.migrations.0084_migrate_node_info_for_target
# osf.migrations.0092_populate_notification_subscriptions
# osf.migrations.0094_update_preprintprovider_group_auth
# osf.migrations.0096_add_provider_doi_prefixes
# osf.migrations.0099_migrate_comments_on_deleted_objects
# osf.migrations.0100_set_access_request_enabled
# osf.migrations.0103_set_osf_storage_node_settings_region
# osf.migrations.0106_set_preprint_identifier_category
# osf.migrations.0110_set_ever_public
# osf.migrations.0113_add_view_collectionprovider_to_admin_perm
# osf.migrations.0113_auto_20180615_1308
# osf.migrations.0115_auto_20180628_1253
# osf.migrations.0117_set_is_root
# osf.migrations.0119_add_asset_perms
# osf.migrations.0119_add_registrationprovider_perms_to_admin
# osf.migrations.0121_add_preprintrequest_perms_to_admin
# osf.migrations.0126_update_social_data_format
# osf.migrations.0127_add_regions_to_all_versions
# osf.migrations.0135_migrate_registrations_to_osf_registries_provider
# osf.migrations.0139_rename_aspredicted_schema
# osf.migrations.0145_add_preprint_contenttype_to_collections
# osf.migrations.0146_update_registration_schemas
# osf.migrations.0147_repoint_preprint_pagecounters
# osf.migrations.0150_fix_deleted_preprints
# osf.migrations.0158_fix_fork_last_logged
# osf.migrations.0161_add_spam_fields_to_user
# osf.migrations.0163_migrate_preprints_to_direct_fks
# osf.migrations.0163_populate_conference_submissions
# osf.migrations.0164_add_guardian_to_nodes
# osf.migrations.0171_add_registration_files_count
# osf.migrations.0179_apioauth2personaltoken_scopes_temp
# osf.migrations.0183_populate_file_versions_through
# osf.migrations.0193_migrate_registered_meta

class Migration(migrations.Migration):

    replaces = [('osf', '0002_add_lower_index_to_tags'), ('osf', '0003_auto_20170402_1611'), ('osf', '0004_abstractnode_comment_level'), ('osf', '0003_auto_20170330_1251'), ('osf', '0005_merge'), ('osf', '0006_add_jsonb_index_for_fileversions'), ('osf', '0007_auto_20170404_0857'), ('osf', '0007_auto_20170403_2304'), ('osf', '0008_merge'), ('osf', '0009_auto_20170406_1614'), ('osf', '0010_update_osfuser_permissions'), ('osf', '0011_auto_20170410_1711'), ('osf', '0012_auto_20170411_1548'), ('osf', '0013_auto_20170417_1437'), ('osf', '0013_auto_20170412_0957'), ('osf', '0014_merge'), ('osf', '0015_preprintprovider_domain'), ('osf', '0016_preprintprovider_domain_redirect_enabled'), ('osf', '0017_auto_20170419_1323'), ('osf', '0015_auto_20170421_1244'), ('osf', '0018_merge_20170424_1330'), ('osf', '0016_auto_20170424_1609'), ('osf', '0019_merge_20170424_1956'), ('osf', '0020_auto_20170426_0920'), ('osf', '0021_unique_notificationsettings__ids'), ('osf', '0022_auto_20170503_1818'), ('osf', '0021_retraction_date_retracted'), ('osf', '0023_merge_20170503_1947'), ('osf', '0024_migrate_subject_parents_to_parent'), ('osf', '0025_migrate_preprint_subjects_to_fks'), ('osf', '0026_rename_preprintservice_subjects'), ('osf', '0027_auto_20170428_1435'), ('osf', '0028_auto_20170504_1548'), ('osf', '0029_auto_20170511_1553'), ('osf', '0030_preprint_provider_institution_permissions'), ('osf', '0031_preprintprovider_share_source'), ('osf', '0032_unquote_gd_nodesettings_folder_path'), ('osf', '0033_user_emails_to_fk'), ('osf', '0034_rename_email_user_relation'), ('osf', '0035_metaschema_active'), ('osf', '0036_auto_20170605_1520'), ('osf', '0037_ensure_licenses'), ('osf', '0038_ensure_schemas'), ('osf', '0039_maintenancestate'), ('osf', '0037_remove_emails_for_unconfirmed_users'), ('osf', '0040_merge_20170619_0922'), ('osf', '0041_auto_20170706_1024'), ('osf', '0042_preprintprovider_share_title'), ('osf', '0042_auto_20170707_1019'), ('osf', '0043_merge_20170725_1328'), ('osf', '0044_ever_mentioned_array_to_m2m'), ('osf', '0045_add_view_subject_permissions'), ('osf', '0043_set_share_title'), ('osf', '0046_merge_20170803_1147'), ('osf', '0047_remove_abstractnode_users_watching_node'), ('osf', '0044_basefilenode_uniqueness_index'), ('osf', '0048_merge_20170804_0910'), ('osf', '0049_preprintprovider_preprint_word'), ('osf', '0050_auto_20170809_1511'), ('osf', '0051_remove_invalid_social_entries'), ('osf', '0052_preprintprovider_share_publish_type'), ('osf', '0053_add_quickfiles'), ('osf', '0054_auto_20170823_1555'), ('osf', '0055_auto_20170823_1648'), ('osf', '0053_nodelog_faster_index'), ('osf', '0056_merge_20170831_0832'), ('osf', '0057_order_fileversion_by_date_created'), ('osf', '0054_add_file_version_indices'), ('osf', '0058_merge_20170913_2232'), ('osf', '0055_update_metaschema_active'), ('osf', '0059_merge_20170914_1100'), ('osf', '0060_reviews'), ('osf', '0061_add_reviews_notification_subscription'), ('osf', '0062_accept_preprints'), ('osf', '0060_add_nodelog_should_hide_nid_index'), ('osf', '0063_merge_20171012_1215'), ('osf', '0064_auto_20171019_0918'), ('osf', '0065_preprintservice_original_publication_date'), ('osf', '0065_auto_20171024_1330'), ('osf', '0066_merge_20171121_1050'), ('osf', '0067_auto_20171121_1050'), ('osf', '0068_creator_modified_renames'), ('osf', '0069_skippable_created_modified'), ('osf', '0070_auto_20171121_1805'), ('osf', '0068_draftregistration_deleted'), ('osf', '0071_merge_20171128_0950'), ('osf', '0068_preprintservice_preprint_doi_created'), ('osf', '0069_auto_20171127_1119'), ('osf', '0070_merge_20171127_2232'), ('osf', '0072_merge_20171128_1018'), ('osf', '0073_citationstyle_has_bibliography'), ('osf', '0074_parse_citation_styles'), ('osf', '0074_auto_20171207_1331'), ('osf', '0075_merge_20171207_1511'), ('osf', '0076_action_rename'), ('osf', '0077_preprintprovider_facebook_app_id'), ('osf', '0077_add_maintenance_permissions'), ('osf', '0078_merge_20180206_1148'), ('osf', '0078_ensure_schemas'), ('osf', '0079_merge_20180207_1545'), ('osf', '0080_ensure_schemas'), ('osf', '0077_bannerimage_scheduledbanner'), ('osf', '0078_add_banner_permissions'), ('osf', '0077_ensure_schemas'), ('osf', '0079_merge_20180202_1206'), ('osf', '0081_merge_20180212_0949'), ('osf', '0077_add_noderequest_model'), ('osf', '0082_merge_20180213_1502'), ('osf', '0084_merge_20180308_1821'), ('osf', '0080_add_abstractprovider'), ('osf', '0081_alter_abstractprovider_permissions'), ('osf', '0082_add_preprint_word_choice'), ('osf', '0083_merge_20180228_1619'), ('osf', '0085_merge_20180316_1625'), ('osf', '0086_pre_migrate_collections'), ('osf', '0087_migrate_collections_data'), ('osf', '0088_post_migrate_collections'), ('osf', '0089_auto_20180315_1114'), ('osf', '0090_add_collection_groups_permissions'), ('osf', '0091_notificationsubscription_provider'), ('osf', '0092_populate_notification_subscriptions'), ('osf', '0093_node_subjects'), ('osf', '0094_update_preprintprovider_group_auth'), ('osf', '0095_ensure_licenses'), ('osf', '0095_abstractprovider_allow_commenting'), ('osf', '0096_merge_20180413_1110'), ('osf', '0095_reset_osf_abstractprovider_licenses_acceptable_id_seq'), ('osf', '0096_ensure_schemas'), ('osf', '0097_merge_20180416_1533'), ('osf', '0096_modify_noderequestaction_noderequest'), ('osf', '0097_merge_20180416_1453'), ('osf', '0098_merge_20180416_1807'), ('osf', '0098_auto_20180418_1722'), ('osf', '0099_merge_20180427_1109'), ('osf', '0100_set_access_request_enabled'), ('osf', '0099_migrate_comments_on_deleted_objects'), ('osf', '0101_merge_20180508_1011'), ('osf', '0099_file_version_user_metadata'), ('osf', '0099_add_default_storage_region'), ('osf', '0102_merge_20180509_0846'), ('osf', '0103_set_osf_storage_node_settings_region'), ('osf', '0101_osfuser_accepted_terms_of_service'), ('osf', '0104_merge_20180524_1621'), ('osf', '0095_collectedguidmetadata_subjects'), ('osf', '0096_abstractprovider_primary_collection'), ('osf', '0098_merge_20180424_1329'), ('osf', '0099_whitelistedsharepreprintprovider'), ('osf', '0100_notificationdigest_provider'), ('osf', '0104_merge_20180523_1240'), ('osf', '0105_merge_20180525_1529'), ('osf', '0106_citationstyle_parent_style'), ('osf', '0107_add_dependent_styles'), ('osf', '0108_auto_20180530_1310'), ('osf', '0106_auto_20180601_1341'), ('osf', '0109_merge_20180611_1410'), ('osf', '0110_set_ever_public'), ('osf', '0111_auto_20180605_1240'), ('osf', '0095_add_url_to_licenses'), ('osf', '0096_add_provider_doi_prefixes'), ('osf', '0099_merge_20180426_0930'), ('osf', '0101_merge_20180514_1932'), ('osf', '0104_merge_20180518_1337'), ('osf', '0105_add_identifier_deleted_field'), ('osf', '0106_set_preprint_identifier_category'), ('osf', '0107_merge_20180604_1232'), ('osf', '0112_merge_20180614_1454'), ('osf', '0113_auto_20180615_1308'), ('osf', '0112_ensure_schemas'), ('osf', '0114_merge_20180628_1234'), ('osf', '0115_auto_20180628_1253'), ('osf', '0112_alter_collectionprovider_permissions'), ('osf', '0113_add_view_collectionprovider_to_admin_perm'), ('osf', '0114_merge_20180621_1322'), ('osf', '0115_auto_20180621_1324'), ('osf', '0116_merge_20180703_2258'), ('osf', '0117_auto_20180625_0810'), ('osf', '0118_auto_20180706_1127'), ('osf', '0119_add_registrationprovider_perms_to_admin'), ('osf', '0116_osfuser_deleted'), ('osf', '0117_merge_20180712_1241'), ('osf', '0118_auto_20180716_1216'), ('osf', '0119_add_asset_perms'), ('osf', '0120_merge_20180716_1457'), ('osf', '0121_add_preprintrequest_perms_to_admin'), ('osf', '0122_unique_provider__id_by_type'), ('osf', '0123_auto_20180726_1546'), ('osf', '0083_add_file_fields_for_target'), ('osf', '0084_migrate_node_info_for_target'), ('osf', '0085_finalize_file_node_to_target'), ('osf', '0099_merge_20180505_1027'), ('osf', '0104_merge_20180524_1257'), ('osf', '0106_merge_20180531_0919'), ('osf', '0116_merge_20180706_0901'), ('osf', '0117_set_is_root'), ('osf', '0121_merge_20180801_1458'), ('osf', '0122_auto_20180801_2105'), ('osf', '0124_merge_20180803_1425'), ('osf', '0125_auto_20180808_1942'), ('osf', '0126_update_review_group_names'), ('osf', '0121_generalize_schema_models'), ('osf', '0123_merge_20180803_1346'), ('osf', '0121_remove_support_page_waffle_flag'), ('osf', '0124_merge_20180816_1229'), ('osf', '0127_merge_20180822_1927'), ('osf', '0128_rename_collectionsubmission'), ('osf', '0121_remove_waffle_flags'), ('osf', '0125_merge_20180824_1856'), ('osf', '0128_merge_20180829_0012'), ('osf', '0129_merge_20180910_1926'), ('osf', '0121_remove_wiki_fields_from_node'), ('osf', '0124_merge_20180815_1924'), ('osf', '0130_merge_20180914_1414'), ('osf', '0130_fileversion_region'), ('osf', '0131_merge_20180914_1937'), ('osf', '0127_add_regions_to_all_versions'), ('osf', '0128_merge_20180827_1907'), ('osf', '0129_merge_20180904_2028'), ('osf', '0123_merge_20180802_2004'), ('osf', '0124_merge_20180808_1451'), ('osf', '0125_merge_20180822_1508'), ('osf', '0132_merge_20180914_2001'), ('osf', '0126_update_social_data_format'), ('osf', '0129_merge_20180831_1412'), ('osf', '0133_merge_20180921_0025'), ('osf', '0134_abstractnode_custom_citation'), ('osf', '0135_update_preprint_model_for_divorce'), ('osf', '0136_preprint_node_divorce'), ('osf', '0137_transfer_preprint_service_permissions'), ('osf', '0138_remove_node_preprint_fields'), ('osf', '0135_user_settings_waffles'), ('osf', '0139_merge_20181003_1759'), ('osf', '0130_auto_20180912_2039'), ('osf', '0133_merge_20180920_1604'), ('osf', '0134_add_provider_reg_fks'), ('osf', '0135_migrate_registrations_to_osf_registries_provider'), ('osf', '0136_merge_20181010_2242'), ('osf', '0136_add_ember_auth_register_waffle_flag'), ('osf', '0140_merge_20181011_0021'), ('osf', '0137_merge_20181011_1525'), ('osf', '0141_merge_20181011_2016'), ('osf', '0137_auto_20181012_1756'), ('osf', '0138_merge_20181012_1944'), ('osf', '0142_merge_20181015_1554'), ('osf', '0138_ensure_subjects_and_providers'), ('osf', '0139_merge_20181019_0412'), ('osf', '0129_remove_osfuser_is_claimed'), ('osf', '0140_merge_20181022_1446'), ('osf', '0139_rename_aspredicted_schema'), ('osf', '0141_merge_20181023_1526'), ('osf', '0143_merge_20181023_1807'), ('osf', '0142_remove_forks_flag'), ('osf', '0142_remove_waffle_analytics_flags'), ('osf', '0144_merge_20181113_1420'), ('osf', '0145_add_preprint_contenttype_to_collections'), ('osf', '0142_change_registration_schemas'), ('osf', '0143_merge_20181115_1458'), ('osf', '0146_merge_20181119_2236'), ('osf', '0147_repoint_preprint_pagecounters'), ('osf', '0144_add_prereg_winddown_switches'), ('osf', '0145_add_visible_to_registrationschema'), ('osf', '0146_update_registration_schemas'), ('osf', '0147_blacklistedemaildomain'), ('osf', '0148_merge_20181213_2253'), ('osf', '0149_add_datacite_doi_switch'), ('osf', '0150_fix_deleted_preprints'), ('osf', '0151_auto_20181215_1911'), ('osf', '0152_remove_doi_switches'), ('osf', '0152_ensure_schemas'), ('osf', '0153_merge_20181221_1842'), ('osf', '0154_remove_ember_project_registrations_flag'), ('osf', '0135_add_file_metadata_models'), ('osf', '0136_add_datacite_file_metadata_schema'), ('osf', '0137_add_fm_record_to_osfstorage_files'), ('osf', '0155_merge_20190115_1437'), ('osf', '0156_create_cache_table'), ('osf', '0157_add_storage_usage_flag'), ('osf', '0158_fix_fork_last_logged'), ('osf', '0156_auto_20190306_1648'), ('osf', '0159_merge_20190331_2301'), ('osf', '0160_add_permissions_to_node'), ('osf', '0161_guardian_direct_fks'), ('osf', '0162_post_migrate'), ('osf', '0163_migrate_preprints_to_direct_fks'), ('osf', '0164_add_guardian_to_nodes'), ('osf', '0165_osfgroup'), ('osf', '0156_abstractnode_article_doi'), ('osf', '0160_merge_20190408_1618'), ('osf', '0166_merge_20190429_1632'), ('osf', '0167_auto_20190506_1556'), ('osf', '0161_add_spam_fields_to_user'), ('osf', '0168_merge_20190610_2308'), ('osf', '0162_conference_submissions'), ('osf', '0163_populate_conference_submissions'), ('osf', '0169_merge_20190618_1429'), ('osf', '0170_ensure_schemas'), ('osf', '0171_add_registration_files_count'), ('osf', '0172_ensure_schemas'), ('osf', '0173_ensure_schemas'), ('osf', '0174_add_ab_testing_home_page_version_b_flag'), ('osf', '0175_pagecounter_schema'), ('osf', '0176_pagecounter_data'), ('osf', '0177_pagecounter_index'), ('osf', '0178_apioauth2scope_is_public'), ('osf', '0179_apioauth2personaltoken_scopes_temp'), ('osf', '0180_finalize_token_scopes_mig'), ('osf', '0181_osfuser_contacted_deactivation'), ('osf', '0182_add_custom_file_versions_through'), ('osf', '0183_populate_file_versions_through'), ('osf', '0184_remove_basefilenode_versions'), ('osf', '0185_basefilenode_versions'), ('osf', '0186_make_pagecounter_fields_nonnull'), ('osf', '0187_remove_outdated_contributor_permissions'), ('osf', '0188_deleted_field_mig'), ('osf', '0189_deleted_field_data'), ('osf', '0190_add_schema_block_models'), ('osf', '0191_migrate_schemas_to_schemablocks'), ('osf', '0192_add_registation_responses_fields'), ('osf', '0193_migrate_registered_meta'), ('osf', '0191_abstractnode_external_registered_date'), ('osf', '0192_abstractnode_external_registration_boolean'), ('osf', '0194_merge_20191113_1611'), ('osf', '0195_add_enable_chronos_waffle_flag'), ('osf', '0196_update_schemas'), ('osf', '0197_add_ab_testing_home_page_hero_text_version_b_flag'), ('osf', '0198_draft_node_models'), ('osf', '0199_draft_node_permissions'), ('osf', '0200_auto_20200214_1518'), ('osf', '0201_add_egap_flag'), ('osf', '0202_add_sloan'), ('osf', '0203_auto_20200312_1435'), ('osf', '0204_ensure_schemas'), ('osf', '0205_auto_20200323_1850'), ('osf', '0206_auto_20200528_1319'), ('osf', '0207_ensure_schemas'), ('osf', '0207_update_schemas2'), ('osf', '0208_update_EGAP_schema'), ('osf', '0209_conference_auto_check_spam'), ('osf', '0210_branded_registries'), ('osf', '0211_auto_20200709_1320'), ('osf', '0212_registrationschema_providers'), ('osf', '0213_auto_20200728_1609'), ('osf', '0214_auto_20200701_1658'), ('osf', '0215_auto_20200819_1942'), ('osf', '0216_auto_20200910_1259'), ('osf', '0217_auto_20200901_1344'), ('osf', '0218_auto_20200929_1850'), ('osf', '0219_auto_20201020_1836'), ('osf', '0221_add_schemas'), ('osf', '0222_auto_20201023_2033'), ('osf', '0223_auto_20201026_1843'), ('osf', '0224_population_registration_subscription_notifications'), ('osf', '0225_auto_20201119_2027'), ('osf', '0226_auto_20210224_1610'), ('osf', '0227_add_secondary_data'), ('osf', '0228_abstractnode_branched_from_node'), ('osf', '0229_auto_20210317_2013'), ('osf', '0230_make_run_management_perm'), ('osf', '0231_abstractprovider_default_schema'), ('osf', '0232_abstractnode_ia_url'), ('osf', '0233_auto_20210608_1816'), ('osf', '0234_auto_20210610_1812'), ('osf', '0235_auto_20210823_1310'), ('osf', '0236_auto_20210913_2008'), ('osf', '0237_auto_20210929_1529'), ('osf', '0238_abstractprovider_allow_updates'), ('osf', '0239_notable_email_domains'), ('osf', '0239_auto_20211110_1921'), ('osf', '0240_merge_20211110_2051'), ('osf', '0241_abstractprovider_allow_bulk_uploads'), ('osf', '0242_auto_20220125_1604'), ('osf', '0243_auto_20211025_1353'), ('osf', '0244_auto_20220517_1718'), ('osf', '0245_auto_20220621_1950'), ('osf', '0246_add_outcomes_and_artifacts'), ('osf', '0247_artifact_finalized_and_deleted')]

    dependencies = [
        ('guardian', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('addons_osfstorage', '0004_storage_region_models'),
        ('auth', '0008_alter_user_username_max_length'),
        ('osf', '0001_initial'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='PreprintService',
            new_name='Preprint',
        ),
        migrations.CreateModel(
            name='NotableEmailDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('domain', osf.utils.fields.LowercaseCharField(db_index=True, max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created',
                 django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified',
                 django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24,
                                         unique=True)),
                ('reviews_workflow', models.CharField(blank=True,
                                                      choices=[(None, 'None'), ('pre-moderation', 'Pre-Moderation'),
                                                               ('post-moderation', 'Post-Moderation')], max_length=15,
                                                      null=True)),
                ('reviews_comments_private', models.NullBooleanField()),
                ('reviews_comments_anonymous', models.NullBooleanField()),
                ('type', models.CharField(choices=[('osf.preprintprovider', 'preprint provider')], db_index=True,
                                          max_length=255)),
                ('name', models.CharField(max_length=128)),
                ('advisory_board', models.TextField(blank=True, default='')),
                ('description', models.TextField(blank=True, default='')),
                ('domain', models.URLField(blank=True, default='')),
                ('domain_redirect_enabled', models.BooleanField(default=False)),
                ('external_url', models.URLField(blank=True, null=True)),
                ('email_contact', models.CharField(blank=True, max_length=200, null=True)),
                ('email_support', models.CharField(blank=True, max_length=200, null=True)),
                ('social_twitter', models.CharField(blank=True, max_length=200, null=True)),
                ('social_facebook', models.CharField(blank=True, max_length=200, null=True)),
                ('social_instagram', models.CharField(blank=True, max_length=200, null=True)),
                ('footer_links', models.TextField(blank=True, default='')),
                ('facebook_app_id', models.BigIntegerField(blank=True, null=True)),
                ('example', models.CharField(blank=True, max_length=20, null=True)),
                ('allow_submissions', models.BooleanField(default=True)),
                ('share_publish_type',
                 models.CharField(choices=[('Preprint', 'Preprint'), ('Thesis', 'Thesis')], default='Preprint',
                                  help_text='This SHARE type will be used when pushing publications to SHARE',
                                  max_length=32, null=True)),
                ('share_source', models.CharField(blank=True, max_length=200, null=True)),
                ('share_title', models.TextField(blank=True, default='', null=True)),
                ('additional_providers',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True,
                                                           default=list, null=True, size=None)),
                ('access_token', osf.utils.fields.EncryptedTextField(blank=True, null=True)),
                ('preprint_word', models.CharField(
                    choices=[('preprint', 'Preprint'), ('paper', 'Paper'), ('thesis', 'Thesis'), ('none', 'None')],
                    default='preprint', max_length=10, null=True)),
                ('subjects_acceptable',
                 osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=list,
                                                                           encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder,
                                                                           null=True)),
                ('default_license',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='default_license', to='osf.NodeLicense')),
                ('licenses_acceptable',
                 models.ManyToManyField(blank=True, related_name='licenses_acceptable', to='osf.NodeLicense')),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),

        migrations.RunSQL(
            sql=['\n                CREATE INDEX lowercase_tag_index ON osf_tag (lower(name), system);\n                '],
            reverse_sql=['\n                DROP INDEX IF EXISTS lowercase_tag_index RESTRICT;\n                '],
        ),
        migrations.AlterModelOptions(
            name='tag',
            options={'ordering': ('name',)},
        ),
        migrations.AlterModelManagers(
            name='fileversion',
            managers=[
                ('includable_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='public_comments',
        ),
        migrations.RemoveField(
            model_name='osfuser',
            name='piwik_token',
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='comment_level',
            field=models.CharField(default='public', max_length=10),
        ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='date_modified',
        #     field=osf.utils.fields.NonNaiveDateTimeField(default=django.utils.timezone.now),
        # ),
        migrations.RunSQL(
            sql=["\n                CREATE INDEX fileversion_metadata_sha_arch_vault_index\n                  ON osf_fileversion ((osf_fileversion.metadata -> 'sha256'), (osf_fileversion.metadata -> 'archive'), (\n                    osf_fileversion.metadata -> 'vault'));\n                "],
            reverse_sql=['\n                DROP INDEX fileversion_metadata_sha_arch_vault_index;\n                '],
        ),
        # migrations.AlterModelOptions(
        #     name='preprintservice',
        #     options={'permissions': (('view_preprintservice', 'Can view preprint service details in the admin app.'),)},
        # ),
        migrations.RemoveField(
            model_name='osfuser',
            name='mailing_lists',
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='date_created',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='date_modified',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now=True, db_index=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='apioauth2application',
            name='date_created',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='comment',
            name='date_created',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='comment',
            name='date_modified',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='datetime_initiated',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='datetime_updated',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='fileversion',
            name='date_created',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='guid',
            name='created',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='osfuser',
            name='date_registered',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True, db_index=True),
        ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='date_created',
        #     field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        # ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='date_modified',
        #     field=osf.utils.fields.NonNaiveDateTimeField(auto_now=True),
        # ),
        migrations.AlterField(
            model_name='recentlyaddedcontributor',
            name='date_added',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='date_created',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='session',
            name='date_modified',
            field=osf.utils.fields.NonNaiveDateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='noderelation',
            name='child',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_parents', to='osf.AbstractNode'),
        ),
        migrations.AlterModelOptions(
            name='osfuser',
            options={'permissions': (('view_osfuser', 'Can view user details'),)},
        ),
        migrations.AlterField(
            model_name='fileversion',
            name='size',
            field=models.BigIntegerField(blank=True, default=-1, null=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0012_auto_20170411_1548.noop,
        #     reverse_code=osf.migrations.0012_auto_20170411_1548.noop,
        # ),
        migrations.AddField(
            model_name='institution',
            name='delegation_protocol',
            field=models.CharField(blank=True, choices=[('cas-pac4j', 'CAS by pac4j'), ('oauth-pac4j', 'OAuth by pac4j'), ('saml-shib', 'SAML by Shibboleth'), ('', 'No Delegation Protocol')], default='', max_length=15),
        ),
        migrations.AlterField(
            model_name='institution',
            name='logo_name',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='name',
            field=models.TextField(blank=True, default=''),
            preserve_default=False,
        ),
        # migrations.AddField(
        #     model_name='preprintprovider',
        #     name='domain',
        #     field=models.URLField(blank=True, default=b''),
        # ),
        migrations.AddField(
            model_name='preprintprovider',
            name='domain_redirect_enabled',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterModelOptions(
            name='abstractnode',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='basefilenode',
            options={'base_manager_name': 'objects'},
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='guid_string',
        ),
        migrations.RemoveField(
            model_name='basefilenode',
            name='guid_string',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='guid_string',
        ),
        migrations.RemoveField(
            model_name='osfuser',
            name='guid_string',
        ),
        # migrations.RemoveField(
        #     model_name='preprintservice',
        #     name='guid_string',
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0021_unique_notificationsettings__ids.remove_duplicate_notificationsubscriptions,
        #     reverse_code=osf.migrations.0021_unique_notificationsettings__ids.noop,
        # ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='_id',
            field=models.CharField(db_index=True, max_length=50, unique=True),
        ),
        migrations.AddField(
            model_name='retraction',
            name='date_retracted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='subject',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='osf.Subject', validators=[osf.models.validators.validate_subject_hierarchy_length]),
        ),
        migrations.AddField(
            model_name='subject',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subjects', to='osf.PreprintProvider'),
        ),
        migrations.AddField(
            model_name='subject',
            name='bepress_subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='osf.Subject'),
        ),
        migrations.RunSQL(
            sql=["\n            UPDATE osf_subject\n            SET provider_id = (SELECT id FROM osf_preprintprovider WHERE _id = 'osf');\n            "],
            reverse_sql=['\n            UPDATE osf_subject\n            SET provider_id = NULL;\n            '],
        ),
        migrations.RunSQL(
            sql=['\n            UPDATE osf_subject\n            SET parent_id=subquery.to_subject_id\n            FROM (SELECT from_subject_id, to_subject_id\n                  FROM  osf_subject_parents) AS subquery\n            WHERE osf_subject.id=subquery.from_subject_id;\n            '],
            reverse_sql=['\n            INSERT INTO osf_subject_parents (from_subject_id, to_subject_id)\n            SELECT id, parent_id FROM osf_subject\n            WHERE parent_id IS NOT NULL;\n            '],
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0024_migrate_subject_parents_to_parent.add_custom_mapping_constraint,
        #     reverse_code=osf.migrations.0024_migrate_subject_parents_to_parent.remove_custom_mapping_constraint,
        # ),
        migrations.RemoveField(
            model_name='subject',
            name='parents',
        ),
        migrations.AlterField(
            model_name='subject',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='osf.Subject', validators=[osf.models.validators.validate_subject_hierarchy_length]),
        ),
        migrations.AlterField(
            model_name='subject',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='osf.PreprintProvider'),
        ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='_subjects',
        #     field=models.ManyToManyField(blank=True, related_name='preprint_services', to='osf.Subject'),
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0025_migrate_preprint_subjects_to_fks.migrate_data,
        #     reverse_code=osf.migrations.0025_migrate_preprint_subjects_to_fks.unmigrate_data,
        # ),
        # migrations.RemoveField(
        #     model_name='preprintservice',
        #     name='subjects',
        # ),
        # migrations.RenameField(
        #     model_name='preprintservice',
        #     old_name='_subjects',
        #     new_name='subjects',
        # ),
        migrations.AlterField(
            model_name='subject',
            name='text',
            field=models.CharField(max_length=256),
        ),
        migrations.AlterUniqueTogether(
            name='subject',
            unique_together=set([('text', 'provider')]),
        ),
        migrations.AlterModelOptions(
            name='subject',
            options={'base_manager_name': 'objects'},
        ),
        # migrations.AddField(
        #     model_name='preprintprovider',
        #     name='default_license',
        #     field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='default_license', to='osf.NodeLicense'),
        # ),
        migrations.AlterField(
            model_name='preprintprovider',
            name='licenses_acceptable',
            field=models.ManyToManyField(blank=True, related_name='licenses_acceptable', to='osf.NodeLicense'),
        ),
        migrations.AlterModelOptions(
            name='institution',
            options={'permissions': (('view_institution', 'Can view institution details'),)},
        ),
        migrations.AlterModelOptions(
            name='preprintprovider',
            options={'permissions': (('view_preprintprovider', 'Can view preprint provider details'),)},
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='share_source',
            field=models.CharField(blank=True, max_length=200),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0032_unquote_gd_nodesettings_folder_path.unquote_folder_paths,
        #     reverse_code=osf.migrations.0032_unquote_gd_nodesettings_folder_path.quote_folder_paths,
        # ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('address', osf.utils.fields.LowercaseEmailField(db_index=True, max_length=254, unique=True, validators=[osf.models.validators.validate_email])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_emails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0033_user_emails_to_fk.populate_email_model,
        #     reverse_code=osf.migrations.0033_user_emails_to_fk.restore_old_emails,
        # ),
        migrations.RemoveField(
            model_name='osfuser',
            name='emails',
        ),
        migrations.AlterField(
            model_name='email',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='metaschema',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.RemoveField(
            model_name='preprintprovider',
            name='banner_name',
        ),
        migrations.RemoveField(
            model_name='preprintprovider',
            name='header_text',
        ),
        migrations.RemoveField(
            model_name='preprintprovider',
            name='logo_name',
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='additional_providers',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='allow_submissions',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='footer_links',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='preprintprovider',
            name='advisory_board',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='preprintprovider',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.CreateModel(
            name='MaintenanceState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', osf.utils.fields.NonNaiveDateTimeField()),
                ('end', osf.utils.fields.NonNaiveDateTimeField()),
            ],
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0037_remove_emails_for_unconfirmed_users.remove_emails,
        #     reverse_code=osf.migrations.0037_remove_emails_for_unconfirmed_users.restore_emails,
        # ),
        migrations.AddField(
            model_name='subject',
            name='highlighted',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name='subject',
            name='text',
            field=models.CharField(db_index=True, max_length=256),
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='share_title',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.CreateModel(
            name='BitbucketFileNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.basefilenode',),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='type',
            field=models.CharField(choices=[('osf.trashedfilenode', 'trashed file node'), ('osf.trashedfile', 'trashed file'), ('osf.trashedfolder', 'trashed folder'), ('osf.osfstoragefilenode', 'osf storage file node'), ('osf.osfstoragefile', 'osf storage file'), ('osf.osfstoragefolder', 'osf storage folder'), ('osf.bitbucketfilenode', 'bitbucket file node'), ('osf.bitbucketfolder', 'bitbucket folder'), ('osf.bitbucketfile', 'bitbucket file'), ('osf.boxfilenode', 'box file node'), ('osf.boxfolder', 'box folder'), ('osf.boxfile', 'box file'), ('osf.dataversefilenode', 'dataverse file node'), ('osf.dataversefolder', 'dataverse folder'), ('osf.dataversefile', 'dataverse file'), ('osf.dropboxfilenode', 'dropbox file node'), ('osf.dropboxfolder', 'dropbox folder'), ('osf.dropboxfile', 'dropbox file'), ('osf.figsharefilenode', 'figshare file node'), ('osf.figsharefolder', 'figshare folder'), ('osf.figsharefile', 'figshare file'), ('osf.githubfilenode', 'github file node'), ('osf.githubfolder', 'github folder'), ('osf.githubfile', 'github file'), ('osf.googledrivefilenode', 'google drive file node'), ('osf.googledrivefolder', 'google drive folder'), ('osf.googledrivefile', 'google drive file'), ('osf.owncloudfilenode', 'owncloud file node'), ('osf.owncloudfolder', 'owncloud folder'), ('osf.owncloudfile', 'owncloud file'), ('osf.s3filenode', 's3 file node'), ('osf.s3folder', 's3 folder'), ('osf.s3file', 's3 file')], db_index=True, max_length=255),
        ),
        migrations.CreateModel(
            name='BitbucketFile',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.bitbucketfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='BitbucketFolder',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.bitbucketfilenode', models.Model),
        ),
        migrations.RenameField(
            model_name='comment',
            old_name='ever_mentioned',
            new_name='_ever_mentioned',
        ),
        migrations.AddField(
            model_name='comment',
            name='ever_mentioned',
            field=models.ManyToManyField(blank=True, related_name='mentioned_in', to=settings.AUTH_USER_MODEL),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0044_ever_mentioned_array_to_m2m.migrate_user_guid_array_to_m2m,
        #     reverse_code=osf.migrations.0044_ever_mentioned_array_to_m2m.unmigrate_user_guid_array_from_m2m,
        # ),
        migrations.RemoveField(
            model_name='comment',
            name='_ever_mentioned',
        ),
        migrations.AlterModelOptions(
            name='subject',
            options={'base_manager_name': 'objects', 'permissions': (('view_subject', 'Can view subject details'),)},
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0043_set_share_title.set_share_titles,
        #     reverse_code=osf.migrations.0043_set_share_title.unset_share_titles,
        # ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='users_watching_node',
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0044_basefilenode_uniqueness_index.remove_duplicate_filenodes,
        #     reverse_code=osf.migrations.0044_basefilenode_uniqueness_index.noop,
        # ),
        migrations.RunSQL(
            sql=["\n                CREATE UNIQUE INDEX active_file_node_path_name_type_unique_index\n                ON public.osf_basefilenode (node_id, _path, name, type)\n                WHERE (type NOT IN ('osf.trashedfilenode', 'osf.trashedfile', 'osf.trashedfolder')\n                  AND parent_id IS NULL);\n                "],
            reverse_sql=['\n                DROP INDEX IF EXISTS active_file_node_path_name_type_unique_index RESTRICT;\n                '],
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='preprint_word',
            field=models.CharField(choices=[('preprint', 'Preprint'), ('paper', 'Paper'), ('thesis', 'Thesis'), ('none', 'None')], default='preprint', max_length=10),
        ),
        migrations.AddField(
            model_name='maintenancestate',
            name='level',
            field=models.IntegerField(choices=[(1, 'info'), (2, 'warning'), (3, 'danger')], default=1),
        ),
        migrations.AddField(
            model_name='maintenancestate',
            name='message',
            field=models.TextField(blank=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0051_remove_invalid_social_entries.remove_invalid_social_entries,
        # ),
        migrations.AddField(
            model_name='preprintprovider',
            name='share_publish_type',
            field=models.CharField(choices=[(b'Preprint', b'Preprint'), (b'Thesis', b'Thesis')], default=b'Preprint', help_text=b'This SHARE type will be used when pushing publications to SHARE', max_length=32),
        ),
        migrations.CreateModel(
            name='QuickFilesNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='type',
            field=models.CharField(choices=[('osf.node', 'node'), ('osf.collection', 'collection'), ('osf.registration', 'registration'), ('osf.quickfilesnode', 'quickfilesnode')], db_index=True, max_length=255),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0053_add_quickfiles.add_quickfiles,
        #     reverse_code=osf.migrations.0053_add_quickfiles.remove_quickfiles,
        # ),
        migrations.RunSQL(
            sql=["\n                CREATE UNIQUE INDEX one_quickfiles_per_user ON osf_abstractnode (creator_id, type, is_deleted)\n                WHERE type='osf.quickfilesnode' AND is_deleted=FALSE;\n                "],
            reverse_sql=['\n                DROP INDEX IF EXISTS one_quickfiles_per_user RESTRICT;\n                '],
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='type',
            field=models.CharField(choices=[('osf.node', 'node'), ('osf.collection', 'collection'), ('osf.registration', 'registration'), ('osf.quickfilesnode', 'quick files node')], db_index=True, max_length=255),
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='alternative_citations',
        ),
        migrations.DeleteModel(
            name='AlternativeCitation',
        ),
        migrations.RunSQL(
            sql=['CREATE INDEX nodelog__node_id_date_desc on osf_nodelog (node_id, date DESC);'],
            reverse_sql=['DROP INDEX IF EXISTS nodelog__node_id_date_desc RESTRICT;'],
        ),
        migrations.AlterModelOptions(
            name='fileversion',
            options={'ordering': ('-date_created',)},
        ),
        migrations.RunSQL(
            sql=['CREATE INDEX basefilenode_versions_compound_ids ON osf_basefilenode_versions (basefilenode_id, fileversion_id);', 'CREATE INDEX fileversion_date_created_desc on osf_fileversion (date_created DESC);'],
            reverse_sql=['DROP INDEX IF EXISTS basefilenode_versions_compound_ids RESTRICT;', 'DROP INDEX IF EXISTS fileversion_date_created_desc RESTRICT;'],
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0055_update_metaschema_active.update_metaschema_active,
        # ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('trigger', models.CharField(choices=[('accept', 'Accept'), ('edit_comment', 'Edit_Comment'), ('reject', 'Reject'), ('submit', 'Submit')], max_length=31)),
                ('from_state', models.CharField(choices=[('accepted', 'Accepted'), ('initial', 'Initial'), ('pending', 'Pending'), ('rejected', 'Rejected')], max_length=31)),
                ('to_state', models.CharField(choices=[('accepted', 'Accepted'), ('initial', 'Initial'), ('pending', 'Pending'), ('rejected', 'Rejected')], max_length=31)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('date_created', osf.utils.fields.NonNaiveDateTimeField(auto_now_add=True)),
                ('date_modified', osf.utils.fields.NonNaiveDateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='preprintprovider',
            options={'permissions': (('view_submissions', 'Can view all submissions to this provider'), ('add_moderator', 'Can add other users as moderators for this provider'), ('view_actions', 'Can view actions on submissions to this provider'), ('add_reviewer', 'Can add other users as reviewers for this provider'), ('review_assigned_submissions', 'Can submit reviews for submissions to this provider which have been assigned to this user'), ('assign_reviewer', 'Can assign reviewers to review specific submissions to this provider'), ('set_up_moderation', 'Can set up moderation for this provider'), ('view_assigned_submissions', 'Can view submissions to this provider which have been assigned to this user'), ('edit_reviews_settings', 'Can edit reviews settings for this provider'), ('accept_submissions', 'Can accept submissions to this provider'), ('reject_submissions', 'Can reject submissions to this provider'), ('edit_review_comments', 'Can edit comments on actions for this provider'), ('view_preprintprovider', 'Can view preprint provider details'))},
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='reviews_comments_anonymous',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='reviews_comments_private',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='reviews_workflow',
            field=models.CharField(blank=True, choices=[(None, 'None'), ('pre-moderation', 'Pre-Moderation'), ('post-moderation', 'Post-Moderation')], max_length=15, null=True),
        ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='date_last_transitioned',
        #     field=models.DateTimeField(blank=True, db_index=True, null=True),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='reviews_state',
        #     field=models.CharField(choices=[('accepted', 'Accepted'), ('initial', 'Initial'), ('pending', 'Pending'), ('rejected', 'Rejected')], db_index=True, default='initial', max_length=15),
        # ),
        # migrations.AddField(
        #     model_name='action',
        #     name='target',
        #     field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.PreprintService'),
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0061_add_reviews_notification_subscription.add_reviews_notification_subscription,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0062_accept_preprints.accept_all_published_preprints,
        # ),
        # migrations.RunSQL(
        #     sql=['CREATE INDEX CONCURRENTLY osf_nodelog_should_hide_nid ON osf_nodelog (should_hide, node_id);'],
        #     reverse_sql=['DROP INDEX IF EXISTS osf_nodelog_should_hide_nid, RESTRICT;'],
        # ),
        migrations.AlterField(
            model_name='notificationdigest',
            name='message',
            field=models.TextField(),
        ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='original_publication_date',
        #     field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        # ),
        migrations.CreateModel(
            name='GitLabFileNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.basefilenode',),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='type',
            field=models.CharField(choices=[('osf.trashedfilenode', 'trashed file node'), ('osf.trashedfile', 'trashed file'), ('osf.trashedfolder', 'trashed folder'), ('osf.osfstoragefilenode', 'osf storage file node'), ('osf.osfstoragefile', 'osf storage file'), ('osf.osfstoragefolder', 'osf storage folder'), ('osf.bitbucketfilenode', 'bitbucket file node'), ('osf.bitbucketfolder', 'bitbucket folder'), ('osf.bitbucketfile', 'bitbucket file'), ('osf.boxfilenode', 'box file node'), ('osf.boxfolder', 'box folder'), ('osf.boxfile', 'box file'), ('osf.dataversefilenode', 'dataverse file node'), ('osf.dataversefolder', 'dataverse folder'), ('osf.dataversefile', 'dataverse file'), ('osf.dropboxfilenode', 'dropbox file node'), ('osf.dropboxfolder', 'dropbox folder'), ('osf.dropboxfile', 'dropbox file'), ('osf.figsharefilenode', 'figshare file node'), ('osf.figsharefolder', 'figshare folder'), ('osf.figsharefile', 'figshare file'), ('osf.githubfilenode', 'github file node'), ('osf.githubfolder', 'github folder'), ('osf.githubfile', 'github file'), ('osf.gitlabfilenode', 'git lab file node'), ('osf.gitlabfolder', 'git lab folder'), ('osf.gitlabfile', 'git lab file'), ('osf.googledrivefilenode', 'google drive file node'), ('osf.googledrivefolder', 'google drive folder'), ('osf.googledrivefile', 'google drive file'), ('osf.owncloudfilenode', 'owncloud file node'), ('osf.owncloudfolder', 'owncloud folder'), ('osf.owncloudfile', 'owncloud file'), ('osf.s3filenode', 's3 file node'), ('osf.s3folder', 's3 folder'), ('osf.s3file', 's3 file')], db_index=True, max_length=255),
        ),
        migrations.CreateModel(
            name='GitLabFile',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.gitlabfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='GitLabFolder',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.gitlabfilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OneDriveFileNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.basefilenode',),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='type',
            field=models.CharField(choices=[('osf.trashedfilenode', 'trashed file node'), ('osf.trashedfile', 'trashed file'), ('osf.trashedfolder', 'trashed folder'), ('osf.osfstoragefilenode', 'osf storage file node'), ('osf.osfstoragefile', 'osf storage file'), ('osf.osfstoragefolder', 'osf storage folder'), ('osf.bitbucketfilenode', 'bitbucket file node'), ('osf.bitbucketfolder', 'bitbucket folder'), ('osf.bitbucketfile', 'bitbucket file'), ('osf.boxfilenode', 'box file node'), ('osf.boxfolder', 'box folder'), ('osf.boxfile', 'box file'), ('osf.dataversefilenode', 'dataverse file node'), ('osf.dataversefolder', 'dataverse folder'), ('osf.dataversefile', 'dataverse file'), ('osf.dropboxfilenode', 'dropbox file node'), ('osf.dropboxfolder', 'dropbox folder'), ('osf.dropboxfile', 'dropbox file'), ('osf.figsharefilenode', 'figshare file node'), ('osf.figsharefolder', 'figshare folder'), ('osf.figsharefile', 'figshare file'), ('osf.githubfilenode', 'github file node'), ('osf.githubfolder', 'github folder'), ('osf.githubfile', 'github file'), ('osf.gitlabfilenode', 'git lab file node'), ('osf.gitlabfolder', 'git lab folder'), ('osf.gitlabfile', 'git lab file'), ('osf.googledrivefilenode', 'google drive file node'), ('osf.googledrivefolder', 'google drive folder'), ('osf.googledrivefile', 'google drive file'), ('osf.onedrivefilenode', 'one drive file node'), ('osf.onedrivefolder', 'one drive folder'), ('osf.onedrivefile', 'one drive file'), ('osf.owncloudfilenode', 'owncloud file node'), ('osf.owncloudfolder', 'owncloud folder'), ('osf.owncloudfile', 'owncloud file'), ('osf.s3filenode', 's3 file node'), ('osf.s3folder', 's3 folder'), ('osf.s3file', 's3 file')], db_index=True, max_length=255),
        ),
        migrations.CreateModel(
            name='OneDriveFile',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.onedrivefilenode', models.Model),
        ),
        migrations.CreateModel(
            name='OneDriveFolder',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.onedrivefilenode', models.Model),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nodes_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.RenameField(
            model_name='comment',
            old_name='modified',
            new_name='edited',
        ),
        migrations.AlterModelOptions(
            name='fileversion',
            options={'ordering': ('-created',)},
        ),
        # migrations.RenameField(
        #     model_name='action',
        #     old_name='date_modified',
        #     new_name='modified',
        # ),
        # migrations.RenameField(
        #     model_name='action',
        #     old_name='date_created',
        #     new_name='created',
        # ),
        migrations.RenameField(
            model_name='fileversion',
            old_name='date_modified',
            new_name='external_modified',
        ),
        migrations.RenameField(
            model_name='abstractnode',
            old_name='date_created',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='abstractnode',
            old_name='date_modified',
            new_name='last_logged',
        ),
        migrations.RenameField(
            model_name='apioauth2application',
            old_name='date_created',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='comment',
            old_name='date_created',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='comment',
            old_name='date_modified',
            new_name='modified',
        ),
        migrations.RenameField(
            model_name='fileversion',
            old_name='date_created',
            new_name='created',
        ),
        # migrations.RenameField(
        #     model_name='preprintservice',
        #     old_name='date_created',
        #     new_name='created',
        # ),
        # migrations.RenameField(
        #     model_name='preprintservice',
        #     old_name='date_modified',
        #     new_name='modified',
        # ),
        migrations.RenameField(
            model_name='privatelink',
            old_name='date_created',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='session',
            old_name='date_created',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='session',
            old_name='date_modified',
            new_name='modified',
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='apioauth2application',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='apioauth2personaltoken',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='apioauth2personaltoken',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='apioauth2scope',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='apioauth2scope',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='archivejob',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='archivejob',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='archivetarget',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='archivetarget',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='blacklistguid',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='blacklistguid',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='citationstyle',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='citationstyle',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='conference',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='conference',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='draftregistrationapproval',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='draftregistrationapproval',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='draftregistrationlog',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='draftregistrationlog',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='embargo',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='embargo',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='embargoterminationapproval',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='embargoterminationapproval',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='externalaccount',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='externalaccount',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='fileversion',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='guid',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='identifier',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='identifier',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='institution',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='institution',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='mailrecord',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='mailrecord',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='metaschema',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='metaschema',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='nodelicense',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='nodelicense',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='nodelicenserecord',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='nodelicenserecord',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='nodelog',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='nodelog',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='noderelation',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='noderelation',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='notificationdigest',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='notificationdigest',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='notificationsubscription',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='notificationsubscription',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='osfuser',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='preprintprovider',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='privatelink',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='queuedmail',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='queuedmail',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='registrationapproval',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='registrationapproval',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='retraction',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='retraction',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='subject',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subject',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='tag',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='tag',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='useractivitycounter',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='useractivitycounter',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        # migrations.AlterField(
        #     model_name='action',
        #     name='created',
        #     field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        # ),
        # migrations.AlterField(
        #     model_name='action',
        #     name='modified',
        #     field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        # ),
        migrations.AlterField(
            model_name='abstractnode',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AlterField(
            model_name='apioauth2application',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AlterField(
            model_name='fileversion',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='created',
        #     field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        # ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='modified',
        #     field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        # ),
        migrations.AlterField(
            model_name='privatelink',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='session',
            name='created',
            field=django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='session',
            name='modified',
            field=django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='preprint_doi_created',
        #     field=osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True),
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0069_auto_20171127_1119.add_preprint_doi_created,
        #     reverse_code=osf.migrations.0069_auto_20171127_1119.reverse_func,
        # ),
        migrations.AddField(
            model_name='citationstyle',
            name='has_bibliography',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='comment',
            name='content',
            field=models.TextField(validators=[osf.models.validators.CommentMaxLength(1000), osf.models.validators.string_required]),
        ),
        # migrations.RenameModel(
        #     old_name='Action',
        #     new_name='ReviewAction',
        # ),
        # migrations.RenameField(
        #     model_name='preprintservice',
        #     old_name='reviews_state',
        #     new_name='machine_state',
        # ),
        migrations.AddField(
            model_name='preprintprovider',
            name='facebook_app_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0077_add_maintenance_permissions.noop,
        #     reverse_code=osf.migrations.0077_add_maintenance_permissions.noop,
        # ),
        migrations.CreateModel(
            name='BannerImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=256, unique=True)),
                ('image', models.BinaryField()),
            ],
        ),
        migrations.CreateModel(
            name='ScheduledBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('start_date', osf.utils.fields.NonNaiveDateTimeField()),
                ('end_date', osf.utils.fields.NonNaiveDateTimeField()),
                ('color', models.CharField(max_length=7)),
                ('license', models.CharField(blank=True, max_length=256, null=True)),
                ('default_photo', models.FileField(storage=osf.utils.storage.BannerImageStorage(), upload_to='')),
                ('default_alt_text', models.TextField()),
                ('mobile_photo', models.FileField(storage=osf.utils.storage.BannerImageStorage(), upload_to='')),
                ('mobile_alt_text', models.TextField(blank=True, null=True)),
            ],
            options={
                'permissions': (('view_scheduledbanner', 'Can view scheduled banner details'),),
            },
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0078_add_banner_permissions.noop,
        #     reverse_code=osf.migrations.0078_add_banner_permissions.noop,
        # ),
        migrations.CreateModel(
            name='NodeRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('machine_state', models.CharField(choices=[('accepted', 'Accepted'), ('initial', 'Initial'), ('pending', 'Pending'), ('rejected', 'Rejected')], db_index=True, default='initial', max_length=15)),
                ('date_last_transitioned', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('request_type', models.CharField(choices=[('access', 'Access')], max_length=31)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NodeRequestAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('trigger', models.CharField(choices=[('accept', 'Accept'), ('edit_comment', 'Edit_Comment'), ('reject', 'Reject'), ('submit', 'Submit')], max_length=31)),
                ('from_state', models.CharField(choices=[('accepted', 'Accepted'), ('initial', 'Initial'), ('pending', 'Pending'), ('rejected', 'Rejected')], max_length=31)),
                ('to_state', models.CharField(choices=[('accepted', 'Accepted'), ('initial', 'Initial'), ('pending', 'Pending'), ('rejected', 'Rejected')], max_length=31)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.NodeRequest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='access_requests_enabled',
            field=models.NullBooleanField(db_index=True),
        ),
        migrations.RunSQL(
            sql=['ALTER TABLE "osf_abstractnode" ALTER COLUMN "access_requests_enabled" SET DEFAULT TRUE', 'ALTER TABLE "osf_abstractnode" ALTER COLUMN "access_requests_enabled" DROP DEFAULT;'],
            state_operations=[migrations.AlterField(
                model_name='abstractnode',
                name='access_requests_enabled',
                field=models.NullBooleanField(db_index=True, default=True),
            )],
        ),
        migrations.AddField(
            model_name='noderequest',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='osf.AbstractNode'),
        ),
        migrations.AlterUniqueTogether(
            name='noderequest',
            unique_together=set([('target', 'creator')]),
        ),
        # migrations.RunSQL(
        #     sql=["\n                INSERT INTO osf_abstractprovider (id, created, modified, _id,\n                        reviews_workflow, reviews_comments_private, reviews_comments_anonymous, name, advisory_board, description,\n                        domain, domain_redirect_enabled, external_url, email_contact, email_support, social_twitter, social_facebook, social_instagram,\n                        footer_links, facebook_app_id, example, allow_submissions, share_publish_type, share_source, share_title, additional_providers,\n                        access_token, preprint_word, subjects_acceptable, default_license_id, type)\n                    SELECT id, created, modified, _id,\n                        reviews_workflow, reviews_comments_private, reviews_comments_anonymous, name, advisory_board, description,\n                        domain, domain_redirect_enabled, external_url, email_contact, email_support, social_twitter, social_facebook, social_instagram,\n                        footer_links, facebook_app_id, example, allow_submissions, share_publish_type, share_source, share_title, additional_providers,\n                        access_token, preprint_word, subjects_acceptable, default_license_id, 'osf.preprintprovider' as type\n                    FROM osf_preprintprovider;\n                INSERT INTO osf_abstractprovider_licenses_acceptable (id, abstractprovider_id, nodelicense_id)\n                    SELECT id, preprintprovider_id, nodelicense_id\n                    FROM osf_preprintprovider_licenses_acceptable\n                "],
        #     reverse_sql=['\n                INSERT INTO osf_preprintprovider_licenses_acceptable (id, preprintprovider_id, nodelicense_id)\n                    SELECT id, abstractprovider_id, nodelicense_id\n                    FROM osf_abstractprovider_licenses_acceptable\n                '],
        # ),
        migrations.AlterField(
            model_name='subject',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='osf.AbstractProvider'),
        ),
        # migrations.RunSQL(
        #     sql='',
        #     reverse_sql=['\n                INSERT INTO osf_preprintprovider (id, created, modified, _id,\n                        reviews_workflow, reviews_comments_private, reviews_comments_anonymous, name, advisory_board, description,\n                        domain, domain_redirect_enabled, external_url, email_contact, email_support, social_twitter, social_facebook, social_instagram,\n                        footer_links, facebook_app_id, example, allow_submissions, share_publish_type, share_source, share_title, additional_providers,\n                        access_token, preprint_word, subjects_acceptable, default_license_id)\n                    SELECT id, created, modified, _id,\n                        reviews_workflow, reviews_comments_private, reviews_comments_anonymous, name, advisory_board, description,\n                        domain, domain_redirect_enabled, external_url, email_contact, email_support, social_twitter, social_facebook, social_instagram,\n                        footer_links, facebook_app_id, example, allow_submissions, share_publish_type, share_source, share_title, additional_providers,\n                        access_token, preprint_word, subjects_acceptable, default_license_id\n                    FROM osf_abstractprovider\n                '],
        # ),
        # migrations.RemoveField(
        #     model_name='preprintprovider',
        #     name='default_license',
        # ),
        migrations.RemoveField(
            model_name='preprintprovider',
            name='licenses_acceptable',
        ),
        migrations.CreateModel(
            name='PreprintProvider',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
                'permissions': (('view_submissions', 'Can view all submissions to this provider'), ('add_moderator', 'Can add other users as moderators for this provider'), ('update_moderator', 'Can elevate or lower other moderators/admins'), ('view_actions', 'Can view actions on submissions to this provider'), ('add_reviewer', 'Can add other users as reviewers for this provider'), ('review_assigned_submissions', 'Can submit reviews for submissions to this provider which have been assigned to this user'), ('assign_reviewer', 'Can assign reviewers to review specific submissions to this provider'), ('remove_moderator', 'Can remove moderators from this provider. Implicitly granted to self'), ('set_up_moderation', 'Can set up moderation for this provider'), ('view_assigned_submissions', 'Can view submissions to this provider which have been assigned to this user'), ('edit_reviews_settings', 'Can edit reviews settings for this provider'), ('accept_submissions', 'Can accept submissions to this provider'), ('reject_submissions', 'Can reject submissions to this provider'), ('edit_review_comments', 'Can edit comments on actions for this provider'), ('view_preprintprovider', 'Can view preprint provider details')),
            },
            bases=('osf.abstractprovider',),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='preprint_word',
            field=models.CharField(choices=[('preprint', 'Preprint'), ('paper', 'Paper'), ('thesis', 'Thesis'), ('work', 'Work'), ('none', 'None')], default='preprint', max_length=10, null=True),
        ),
        migrations.CreateModel(
            name='CollectionSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('collected_type', models.CharField(blank=True, max_length=31)),
                ('status', models.CharField(blank=True, max_length=31)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('guid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Guid')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.DeleteModel(
            name='Collection',
        ),
        migrations.CreateModel(
            name='CollectionProvider',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.abstractprovider',),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='type',
            field=models.CharField(choices=[('osf.collectionprovider', 'collection provider'), ('osf.preprintprovider', 'preprint provider')], db_index=True, max_length=255),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('content_type_pk', models.PositiveIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=200, validators=[osf.models.validators.validate_title])),
                ('collected_type_choices', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=31), blank=True, default=list, size=None)),
                ('status_choices', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=31), blank=True, default=list, size=None)),
                ('is_public', models.BooleanField(db_index=True, default=False)),
                ('is_promoted', models.BooleanField(db_index=True, default=False)),
                ('is_bookmark_collection', models.BooleanField(db_index=True, default=False)),
                ('collected_types', models.ManyToManyField(related_name='_collection_collected_types_+', to='contenttypes.ContentType')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('guid_links', models.ManyToManyField(related_name='collections', through='osf.CollectionSubmission', to='osf.Guid')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractProvider')),
                ('deleted', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Collection'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='collectionsubmission',
            order_with_respect_to='collection',
        ),
        migrations.AlterUniqueTogether(
            name='collectionsubmission',
            unique_together=set([('collection', 'guid')]),
        ),
        # migrations.RunSQL(
        #     sql=["\n                -- Copy all existing collections into new table, keeping old pks\n                INSERT INTO osf_collection (id, created, modified, content_type_pk, title, is_public, is_promoted,\n                deleted, is_bookmark_collection, creator_id, provider_id, collected_type_choices, status_choices)\n                    SELECT id, created, modified, CT.c_id, title, FALSE, FALSE,\n                    CASE WHEN is_deleted IS TRUE\n                      THEN\n                        'epoch' :: TIMESTAMP WITH TIME ZONE\n                      ELSE\n                        NULL :: TIMESTAMP WITH TIME ZONE\n                    END,\n                    is_bookmark_collection,\n                        creator_id, NULL, ARRAY[]::text[], ARRAY[]::text[]\n                    FROM osf_abstractnode\n                    LEFT JOIN LATERAL (\n                        SELECT id AS c_id\n                        FROM django_content_type\n                        WHERE app_label = 'osf' AND model = 'collection'\n                    ) CT ON TRUE\n                    WHERE type = 'osf.collection';\n                ", "\n                -- Copy collected refs into thru-table\n                INSERT INTO osf_collectedguidmetadata (id, created, modified, collected_type, status, creator_id, guid_id, collection_id, _order)\n                    SELECT nextval('osf_collectedguidmetadata_id_seq'), created, modified, '', '', C.creator_id, G.id, C.id, _order\n                    FROM osf_noderelation NR\n                    LEFT JOIN LATERAL (\n                        SELECT id, creator_id\n                        FROM osf_collection\n                        WHERE id = NR.parent_id\n                    ) C on TRUE\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM osf_guid\n                        WHERE content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' AND model = 'abstractnode')\n                            AND object_id = NR.child_id\n                    ) G ON TRUE\n                    WHERE parent_id IN (SELECT id FROM osf_collection);\n                ", "\n                -- Populate thru-table for collection.collected_types. Until now, only nodes could be collected, so only populate with that type\n                INSERT INTO osf_collection_collected_types (id, collection_id, contenttype_id)\n                    SELECT nextval('osf_collection_collected_types_id_seq'), C.id, CT.id\n                    FROM osf_collection C\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM django_content_type\n                        WHERE app_label = 'osf'\n                            AND model = 'abstractnode'\n                    ) CT ON TRUE;\n                -- Also populate with collection type. Until now, they were nodes, and several have already been collected\n                INSERT INTO osf_collection_collected_types (id, collection_id, contenttype_id)\n                    SELECT nextval('osf_collection_collected_types_id_seq'), C.id, CT.id\n                    FROM osf_collection C\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM django_content_type\n                        WHERE app_label = 'osf'\n                            AND model = 'collection'\n                    ) CT ON TRUE;\n                ", "\n                -- Point old collection GUIDs to new object\n                UPDATE osf_guid\n                    SET content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' AND model = 'collection')\n                    WHERE id IN (\n                        SELECT id\n                        FROM osf_guid\n                        WHERE content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' and model = 'abstractnode')\n                            AND object_id IN (SELECT id FROM osf_collection)\n                    );\n                ", "\n                -- Make a system tag for old collections\n                INSERT INTO osf_tag (id, name, system, created, modified)\n                    SELECT nextval('osf_tag_id_seq'), 'old_node_collection', TRUE, current_timestamp, current_timestamp;\n                ", "\n                -- And tag all old collections with it\n                INSERT INTO osf_abstractnode_tags (id, abstractnode_id, tag_id)\n                    SELECT nextval('osf_abstractnode_tags_id_seq'), N.id, ONT.id\n                    FROM osf_abstractnode N\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM osf_tag\n                        WHERE system = TRUE\n                            AND name = 'old_node_collection'\n                    ) ONT ON TRUE\n                    WHERE N.type = 'osf.collection';\n                ", '\n                -- "Delete" old collection nodes\n                UPDATE osf_abstractnode\n                    SET type=\'osf.node\',\n                        is_deleted = TRUE,\n                        deleted_date = current_timestamp\n                    WHERE type=\'osf.collection\';\n               ', "\n                -- Update the collection id seq to avoid conflicts when more are made\n                SELECT setval('osf_collection_id_seq', max(id)) FROM osf_collection;\n                "],
        #     reverse_sql=["\n                -- Undelete nodes\n                UPDATE osf_abstractnode N\n                    SET type = 'osf.collection',\n                        is_deleted = FALSE,\n                        deleted_date = NULL\n                    FROM osf_abstractnode_tags ANT\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM osf_tag\n                        WHERE system = TRUE\n                            AND name = 'old_node_collection'\n                    ) T ON TRUE\n                    WHERE ANT.tag_id = T.id AND ANT.abstractnode_id = N.id\n                ", "\n                -- Repoint GUIDs\n                UPDATE osf_guid\n                    SET content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' AND model = 'abstractnode')\n                    WHERE id IN (\n                        SELECT id\n                        FROM osf_guid\n                        WHERE content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' and model = 'collection')\n                            AND object_id IN (SELECT id FROM osf_collection)\n                    );\n                ", "\n                -- Delete everything inserted in the forward\n                DELETE FROM osf_collection;\n                DELETE FROM osf_collection_collected_types;\n                DELETE FROM osf_collectedguidmetadata;\n                DELETE FROM osf_abstractnode_tags\n                    WHERE tag_id = (SELECT id\n                                    FROM osf_tag\n                                    WHERE system = TRUE\n                                        AND name = 'old_node_collection');\n                DELETE FROM osf_tag\n                    WHERE system = TRUE\n                        AND name = 'old_node_collection';\n                ", "\n                -- Reset collection id sequence\n                SELECT setval('osf_collection_id_seq', 1);\n                "],
        # ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='is_bookmark_collection',
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='type',
            field=models.CharField(choices=[('osf.node', 'node'), ('osf.registration', 'registration'), ('osf.quickfilesnode', 'quick files node')], db_index=True, max_length=255),
        ),
        migrations.CreateModel(
            name='CollectionGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='collection',
            options={'permissions': (('read_collection', 'Read Collection'), ('write_collection', 'Write Collection'), ('admin_collection', 'Admin Collection'))},
        ),
        migrations.AddField(
            model_name='collectionuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Collection'),
        ),
        migrations.AddField(
            model_name='collectionuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
        ),
        migrations.AddField(
            model_name='collectionuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='collectiongroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Collection'),
        ),
        migrations.AddField(
            model_name='collectiongroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='collectiongroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='collectiongroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.RunSQL(
            sql=["\n                -- Ensure Permissions exist. Somehow, edge cases exist where the previous migration does not add them\n                INSERT INTO auth_permission (id, name, content_type_id, codename)\n                    SELECT nextval('auth_permission_id_seq'), 'Read Collection', CT.id, 'read_collection'\n                    FROM django_content_type CT\n                    WHERE CT.app_label = 'osf' AND CT.model = 'collection'\n                        AND NOT EXISTS (\n                            SELECT *\n                            FROM auth_permission\n                            WHERE codename = 'read_collection');\n                INSERT INTO auth_permission (id, name, content_type_id, codename)\n                    SELECT nextval('auth_permission_id_seq'), 'Write Collection', CT.id, 'write_collection'\n                    FROM django_content_type CT\n                    WHERE CT.app_label = 'osf' AND CT.model = 'collection'\n                        AND NOT EXISTS (\n                            SELECT *\n                            FROM auth_permission\n                            WHERE codename = 'write_collection');\n                INSERT INTO auth_permission (id, name, content_type_id, codename)\n                    SELECT nextval('auth_permission_id_seq'), 'Admin Collection', CT.id, 'admin_collection'\n                    FROM django_content_type CT\n                    WHERE CT.app_label = 'osf' AND CT.model = 'collection'\n                        AND NOT EXISTS (\n                            SELECT *\n                            FROM auth_permission\n                            WHERE codename = 'admin_collection');\n                ", "\n                -- Create collection groups - Read/Write/Admin\n                INSERT INTO auth_group (id, name)\n                    SELECT nextval('auth_group_id_seq'), 'collections_' || C.id || '_read'\n                    FROM osf_collection C;\n                INSERT INTO auth_group (id, name)\n                    SELECT nextval('auth_group_id_seq'), 'collections_' || C.id || '_write'\n                    FROM osf_collection C;\n                INSERT INTO auth_group (id, name)\n                    SELECT nextval('auth_group_id_seq'), 'collections_' || C.id || '_admin'\n                    FROM osf_collection C;\n                ", "\n                -- Grant collection groups perms\n                -- -- Because the collection id is encoded in the group name, we can use split_part to extract it\n                -- ---- and avoid doing an extra join on osf_collection\n                -- Read granted to R/W/A groups\n                INSERT INTO osf_collectiongroupobjectpermission (id, content_object_id, group_id, permission_id)\n                    SELECT nextval('osf_collectiongroupobjectpermission_id_seq'), split_part(G.name, '_', 2) :: INT, G.id :: INT, P.id\n                    FROM auth_group G\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM auth_permission\n                        WHERE codename = 'read_collection'\n                    ) P ON TRUE\n                    WHERE G.name LIKE 'collections_%';\n                -- Write granted to W/A groups\n                INSERT INTO osf_collectiongroupobjectpermission (id, content_object_id, group_id, permission_id)\n                    SELECT nextval('osf_collectiongroupobjectpermission_id_seq'), split_part(G.name, '_', 2) :: INT, G.id :: INT, P.id\n                    FROM auth_group G\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM auth_permission\n                        WHERE codename = 'write_collection'\n                    ) P ON TRUE\n                    WHERE G.name LIKE 'collections_%_write'\n                        OR G.name LIKE 'collections_%_admin';\n                -- Admin granted to A groups\n                INSERT INTO osf_collectiongroupobjectpermission (id, content_object_id, group_id, permission_id)\n                    SELECT nextval('osf_collectiongroupobjectpermission_id_seq'), split_part(G.name, '_', 2) :: INT, G.id :: INT, P.id\n                    FROM auth_group G\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM auth_permission\n                        WHERE codename = 'admin_collection'\n                    ) P ON TRUE\n                    WHERE G.name LIKE 'collections_%_admin';\n                ", "\n                -- Add collection creators to their respective admin groups\n                INSERT INTO osf_osfuser_groups (id, osfuser_id, group_id)\n                    SELECT nextval('osf_osfuser_groups_id_seq'), C.creator_id, G.id\n                    FROM osf_collection C\n                    LEFT JOIN LATERAL (\n                        SELECT id\n                        FROM auth_group\n                        WHERE name = 'collections_' || C.id || '_admin'\n                    ) G ON TRUE;\n                "],
            reverse_sql=["\n                -- Delete things from the forward\n                DELETE FROM osf_osfuser_groups\n                    WHERE group_id IN (SELECT id\n                                       FROM auth_group\n                                       WHERE name LIKE 'collections_%');\n                DELETE FROM osf_collectiongroupobjectpermission;\n                DELETE FROM auth_group\n                    WHERE name LIKE 'collections_%';\n                ", "\n                -- Reset id sequence values\n                SELECT setval('osf_osfuser_groups_id_seq', max(id) + 1)\n                    FROM osf_osfuser_groups;\n                SELECT setval('osf_collectiongroupobjectpermission_id_seq', 1);\n                SELECT setval('auth_group_id_seq', max(id) + 1)\n                    FROM auth_group;\n                "],
        ),
        migrations.AddField(
            model_name='notificationsubscription',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to='osf.AbstractProvider'),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0092_populate_notification_subscriptions.populate_provider_notification_subscriptions,
        #     reverse_code=osf.migrations.0092_populate_notification_subscriptions.revert,
        # ),
        migrations.AddField(
            model_name='abstractnode',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='abstractnodes', to='osf.Subject'),
        ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='subjects',
        #     field=models.ManyToManyField(blank=True, related_name='preprintservices', to='osf.Subject'),
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0094_update_preprintprovider_group_auth.noop,
        #     reverse_code=osf.migrations.0094_update_preprintprovider_group_auth.noop,
        # ),
        migrations.AddField(
            model_name='abstractprovider',
            name='allow_commenting',
            field=models.BooleanField(default=False),
        ),
        migrations.RunSQL(
            sql='\n            SELECT setval(pg_get_serial_sequence(\'"osf_abstractprovider_licenses_acceptable"\',\'id\'),\n                        coalesce(max("id"), 1), max("id") IS NOT null)\n            FROM "osf_abstractprovider_licenses_acceptable";\n\n            SELECT setval(pg_get_serial_sequence(\'"osf_abstractprovider"\',\'id\'),\n                        coalesce(max("id"), 1), max("id") IS NOT null)\n            FROM "osf_abstractprovider";\n            ',
            reverse_sql='\n            SELECT setval(pg_get_serial_sequence(\'"osf_abstractprovider_licenses_acceptable"\',\'id\'), 1, max("id") IS NOT null)\n            FROM "osf_abstractprovider_licenses_acceptable";\n\n            SELECT setval(pg_get_serial_sequence(\'"osf_abstractprovider"\',\'id\'), 1, max("id") IS NOT null)\n            FROM "osf_abstractprovider_licenses_acceptable";\n            ',
        ),
        migrations.AddField(
            model_name='noderequestaction',
            name='permissions',
            field=models.CharField(choices=[('admin', 'Admin'), ('read', 'Read'), ('write', 'Write')], default='read', max_length=5),
        ),
        migrations.AddField(
            model_name='noderequestaction',
            name='visible',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterUniqueTogether(
            name='noderequest',
            unique_together=set([]),
        ),
        migrations.RunSQL(
            sql=["\n                CREATE UNIQUE INDEX osf_noderequest_target_creator_non_accepted ON osf_noderequest (target_id, creator_id)\n                WHERE machine_state != 'accepted';\n                "],
            reverse_sql=['\n                DROP INDEX IF EXISTS osf_noderequest_target_creator_non_accepted RESTRICT;\n                '],
        ),
        migrations.AddField(
            model_name='osfuser',
            name='change_password_last_attempt',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='old_password_invalid_attempts',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='noderequestaction',
            name='permissions',
            field=models.CharField(choices=[('read', 'Read'), ('write', 'Write'), ('admin', 'Admin')], default='read', max_length=5),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0100_set_access_request_enabled.Migration.add_default_access_requests_enabled,
        #     reverse_code=osf.migrations.0100_set_access_request_enabled.Migration.remove_default_access_requests_enabled,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0099_migrate_comments_on_deleted_objects.update_comment_root_target,
        # ),
        migrations.CreateModel(
            name='FileVersionUserMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('file_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.FileVersion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='fileversion',
            name='seen_by',
            field=models.ManyToManyField(related_name='versions_seen', through='osf.FileVersionUserMetadata', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='fileversionusermetadata',
            unique_together=set([('user', 'file_version')]),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0103_set_osf_storage_node_settings_region.Migration.add_default_region_to_nodesettings,
        #     reverse_code=osf.migrations.0103_set_osf_storage_node_settings_region.Migration.unset_default_region,
        # ),
        migrations.AddField(
            model_name='osfuser',
            name='accepted_terms_of_service',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='collectionsubmissions', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='primary_collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='osf.Collection'),
        ),
        migrations.CreateModel(
            name='WhitelistedSHAREPreprintProvider',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('provider_name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='notificationdigest',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractProvider'),
        ),
        migrations.AddField(
            model_name='citationstyle',
            name='parent_style',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.CreateModel(
            name='DismissedAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='ProviderAssetFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=63)),
                ('file', models.FileField(upload_to='assets')),
                ('providers', models.ManyToManyField(blank=True, related_name='asset_files', to='osf.AbstractProvider')),
            ],
            options={
                'abstract': False,
            },
        ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='date_last_reported',
        #     field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='date_retracted',
        #     field=osf.utils.fields.NonNaiveDateTimeField(blank=True, default=None, null=True),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='ever_public',
        #     field=models.BooleanField(default=False),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='reports',
        #     field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, validators=[osf.models.spam._validate_reports]),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='retraction_justification',
        #     field=models.TextField(blank=True, default=''),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='spam_data',
        #     field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='spam_pro_tip',
        #     field=models.CharField(blank=True, default=None, max_length=200, null=True),
        # ),
        # migrations.AddField(
        #     model_name='preprintservice',
        #     name='spam_status',
        #     field=models.IntegerField(blank=True, db_index=True, default=None, null=True),
        # ),
        migrations.AddField(
            model_name='scheduledbanner',
            name='link',
            field=models.URLField(blank=True, default='https://www.crowdrise.com/centerforopenscience'),
        ),
        migrations.AlterUniqueTogether(
            name='dismissedalert',
            unique_together=set([('_id', 'location')]),
        ),
        # migrations.RunPython(
        #     code=osf.utils.migrations.ensure_schemas,
        #     reverse_code=osf.utils.migrations.remove_schemas,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0110_set_ever_public.set_ever_public,
        #     reverse_code=osf.migrations.0110_set_ever_public.revert_to_default,
        # ),
        migrations.AlterModelOptions(
            name='preprintprovider',
            options={'permissions': (('view_submissions', 'Can view all submissions to this provider'), ('add_moderator', 'Can add other users as moderators for this provider'), ('update_moderator', 'Can elevate or lower other moderators/admins'), ('view_actions', 'Can view actions on submissions to this provider'), ('add_reviewer', 'Can add other users as reviewers for this provider'), ('review_assigned_submissions', 'Can submit reviews for submissions to this provider which have been assigned to this user'), ('assign_reviewer', 'Can assign reviewers to review specific submissions to this provider'), ('remove_moderator', 'Can remove moderators from this provider. Implicitly granted to self'), ('set_up_moderation', 'Can set up moderation for this provider'), ('view_assigned_submissions', 'Can view submissions to this provider which have been assigned to this user'), ('edit_reviews_settings', 'Can edit reviews settings for this provider'), ('withdraw_submissions', 'Can withdraw submissions from this provider'), ('accept_submissions', 'Can accept submissions to this provider'), ('reject_submissions', 'Can reject submissions to this provider'), ('edit_review_comments', 'Can edit comments on actions for this provider'), ('view_preprintprovider', 'Can view preprint provider details'))},
        ),
        migrations.AlterField(
            model_name='noderequest',
            name='machine_state',
            field=models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], db_index=True, default='initial', max_length=15),
        ),
        migrations.AlterField(
            model_name='noderequestaction',
            name='from_state',
            field=models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], max_length=31),
        ),
        migrations.AlterField(
            model_name='noderequestaction',
            name='to_state',
            field=models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], max_length=31),
        ),
        migrations.AlterField(
            model_name='noderequestaction',
            name='trigger',
            field=models.CharField(choices=[('submit', 'Submit'), ('accept', 'Accept'), ('reject', 'Reject'), ('edit_comment', 'Edit_Comment')], max_length=31),
        ),
        # migrations.AlterField(
        #     model_name='preprintservice',
        #     name='machine_state',
        #     field=models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], db_index=True, default='initial', max_length=15),
        # ),
        # migrations.AlterField(
        #     model_name='reviewaction',
        #     name='from_state',
        #     field=models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], max_length=31),
        # ),
        # migrations.AlterField(
        #     model_name='reviewaction',
        #     name='to_state',
        #     field=models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], max_length=31),
        # ),
        # migrations.AlterField(
        #     model_name='reviewaction',
        #     name='trigger',
        #     field=models.CharField(choices=[('submit', 'Submit'), ('accept', 'Accept'), ('reject', 'Reject'), ('edit_comment', 'Edit_Comment'), ('withdraw', 'Withdraw')], max_length=31),
        # ),
        # migrations.RenameField(
        #     model_name='preprintservice',
        #     old_name='date_retracted',
        #     new_name='date_withdrawn',
        # ),
        # migrations.RenameField(
        #     model_name='preprintservice',
        #     old_name='retraction_justification',
        #     new_name='withdrawal_justification',
        # ),
        migrations.AddField(
            model_name='nodelicense',
            name='url',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='doi_prefix',
            field=models.CharField(blank=True, max_length=32, null=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0096_add_provider_doi_prefixes.add_doi_prefix,
        #     reverse_code=osf.migrations.0096_add_provider_doi_prefixes.remove_doi_prefix,
        # ),
        migrations.AddField(
            model_name='identifier',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='identifier',
            name='category',
            field=models.CharField(max_length=20),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0106_set_preprint_identifier_category.set_preprint_identifier_catetory_to_legacy,
        #     reverse_code=osf.migrations.0106_set_preprint_identifier_category.return_preprint_identifier_category_to_doi,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0113_auto_20180615_1308.add_doi_prefix,
        #     reverse_code=osf.migrations.0113_auto_20180615_1308.remove_doi_prefix,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0115_auto_20180628_1253.add_doi_prefix,
        #     reverse_code=osf.migrations.0115_auto_20180628_1253.remove_doi_prefix,
        # ),
        migrations.AlterModelOptions(
            name='collectionprovider',
            options={'permissions': (('view_collectionprovider', 'Can view collection provider details'),)},
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0113_add_view_collectionprovider_to_admin_perm.noop,
        #     reverse_code=osf.migrations.0113_add_view_collectionprovider_to_admin_perm.noop,
        # ),
        migrations.AlterField(
            model_name='providerassetfile',
            name='name',
            field=models.CharField(choices=[('favicon', 'favicon'), ('powered_by_share', 'powered_by_share'), ('sharing', 'sharing'), ('square_color_no_transparent', 'square_color_no_transparent'), ('square_color_transparent', 'square_color_transparent'), ('style', 'style'), ('wide_black', 'wide_black'), ('wide_color', 'wide_color'), ('wide_white', 'wide_white')], max_length=63),
        ),
        migrations.CreateModel(
            name='PreprintRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('machine_state', models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], db_index=True, default='initial', max_length=15)),
                ('date_last_transitioned', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('request_type', models.CharField(choices=[('access', 'Access'), ('withdrawal', 'Withdrawal')], max_length=31)),
                ('comment', models.TextField(blank=True, null=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_preprintrequest', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='osf.Preprint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreprintRequestAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept', 'Accept'), ('reject', 'Reject'), ('edit_comment', 'Edit_Comment')], max_length=31)),
                ('from_state', models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], max_length=31)),
                ('to_state', models.CharField(choices=[('initial', 'Initial'), ('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], max_length=31)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.PreprintRequest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='noderequest',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_noderequest', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='noderequest',
            name='request_type',
            field=models.CharField(choices=[('access', 'Access'), ('withdrawal', 'Withdrawal')], max_length=31),
        ),
        migrations.CreateModel(
            name='RegistrationProvider',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
                'permissions': (('view_registrationprovider', 'Can view registration provider details'),),
            },
            bases=('osf.abstractprovider',),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='type',
            field=models.CharField(choices=[('osf.collectionprovider', 'collection provider'), ('osf.registrationprovider', 'registration provider'), ('osf.preprintprovider', 'preprint provider')], db_index=True, max_length=255),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0119_add_registrationprovider_perms_to_admin.noop,
        #     reverse_code=osf.migrations.0119_add_registrationprovider_perms_to_admin.noop,
        # ),
        migrations.AddField(
            model_name='osfuser',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterModelOptions(
            name='providerassetfile',
            options={'permissions': (('view_providerassetfile', 'Can view provider asset files'),)},
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0119_add_asset_perms.noop,
        #     reverse_code=osf.migrations.0119_add_asset_perms.noop,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0121_add_preprintrequest_perms_to_admin.noop,
        #     reverse_code=osf.migrations.0121_add_preprintrequest_perms_to_admin.noop,
        # ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='_id',
            field=models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24),
        ),
        migrations.AlterUniqueTogether(
            name='abstractprovider',
            unique_together=set([('_id', 'type')]),
        ),
        migrations.AlterModelOptions(
            name='adminprofile',
            options={'permissions': (('mark_spam', 'Can mark comments, projects and registrations as spam'), ('view_spam', 'Can view nodes, comments, and projects marked as spam'), ('view_metrics', 'Can view metrics on the OSF Admin app'), ('view_prereg', 'Can view entries for the preregistration chellenge on the admin'), ('administer_prereg', 'Can update, comment on, and approve entries to the prereg challenge'), ('view_desk', 'Can view details about Desk users'), ('delete_preprintrequest', 'Can delete preprints withdrawal requests'), ('change_preprintrequest', 'Can update preprints withdrawal requests'))},
        ),
        migrations.AddField(
            model_name='noderequestaction',
            name='auto',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='preprintrequestaction',
            name='auto',
            field=models.BooleanField(default=False),
        ),
        # migrations.AddField(
        #     model_name='reviewaction',
        #     name='auto',
        #     field=models.BooleanField(default=False),
        # ),
        migrations.AddField(
            model_name='basefilenode',
            name='target_content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='basefilenode_target', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='target_object_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='is_root',
            field=models.NullBooleanField(),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0084_migrate_node_info_for_target.set_basefilenode_target,
        #     reverse_code=osf.migrations.0084_migrate_node_info_for_target.reset_basefilenode_target_to_node,
        # ),
        migrations.RemoveField(
            model_name='basefilenode',
            name='node',
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='target_content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AlterField(
            model_name='basefilenode',
            name='target_object_id',
            field=models.PositiveIntegerField(),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0117_set_is_root.set_is_root,
        #     reverse_code=osf.migrations.0117_set_is_root.unset_is_root,
        # ),
        migrations.AlterIndexTogether(
            name='basefilenode',
            index_together=set([('target_content_type', 'target_object_id')]),
        ),
        migrations.CreateModel(
            name='AbstractProviderGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractProvider')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractProviderUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractProvider')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='abstractprovider',
            options={'permissions': (('set_up_moderation', 'Can set up moderation for this provider'), ('view_submissions', 'Can view all submissions to this provider'), ('accept_submissions', 'Can accept submissions to this provider'), ('reject_submissions', 'Can reject submissions to this provider'), ('withdraw_submissions', 'Can withdraw submissions from this provider'), ('edit_review_comments', 'Can edit comments on actions for this provider'), ('view_actions', 'Can view actions on submissions to this provider'), ('add_moderator', 'Can add other users as moderators for this provider'), ('update_moderator', 'Can elevate or lower other moderators/admins'), ('remove_moderator', 'Can remove moderators from this provider. Implicitly granted to self'), ('edit_reviews_settings', 'Can edit reviews settings for this provider'), ('add_reviewer', 'Can add other users as reviewers for this provider'), ('assign_reviewer', 'Can assign reviewers to review specific submissions to this provider'), ('view_assigned_submissions', 'Can view submissions to this provider which have been assigned to this user'), ('review_assigned_submissions', 'Can submit reviews for submissions to this provider which have been assigned to this user'))},
        ),
        migrations.AlterModelOptions(
            name='collectionprovider',
            options={'permissions': (('view_collectionprovider', 'Can view collection provider details'),)},
        ),
        migrations.AlterModelOptions(
            name='preprintprovider',
            options={'permissions': (('view_preprintprovider', 'Can view preprint provider details'),)},
        ),
        migrations.AlterModelOptions(
            name='registrationprovider',
            options={'permissions': (('view_registrationprovider', 'Can view registration provider details'),)},
        ),
        migrations.AlterUniqueTogether(
            name='abstractprovideruserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='abstractprovidergroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.RunSQL(
            sql=["\n                UPDATE auth_group AG0\n                SET name = (\n                            SELECT 'reviews_' ||\n                                CASE\n                                WHEN P.type = 'osf.preprintprovider'\n                                    THEN 'preprint'\n                                WHEN P.type = 'osf.collectionprovider'\n                                    THEN 'collection'\n                                WHEN P.type = 'osf.registrationprovider'\n                                    THEN 'registration'\n                                END || '_' || id || '_' || split_part(AG0.name, '_', 3)\n                            FROM osf_abstractprovider P\n                            WHERE _id = split_part(AG0.name, '_', 2)\n                )\n                WHERE AG0.name LIKE 'reviews_%';\n                "],
            reverse_sql=["\n                UPDATE auth_group AG0\n                SET name = (\n                            SELECT 'reviews_' || P._id || '_' || split_part(AG0.name, '_', 4)\n                                FROM osf_abstractprovider P\n                            WHERE id = split_part(AG0.name, '_', 3)::INT\n                )\n                WHERE AG0.name LIKE 'reviews_%';\n                "],
        ),
        migrations.RenameModel(
            old_name='MetaSchema',
            new_name='RegistrationSchema',
        ),
        migrations.AlterField(
            model_name='collectionsubmission',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='collectionsubmissions', to='osf.Subject'),
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='wiki_pages_current',
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='wiki_pages_versions',
        ),
        migrations.AddField(
            model_name='fileversion',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='addons_osfstorage.Region'),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0127_add_regions_to_all_versions.add_regions_to_existing_versions,
        #     reverse_code=osf.migrations.0127_add_regions_to_all_versions.remove_regions_from_versions,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0126_update_social_data_format.Migration.update_social_fields,
        #     reverse_code=osf.migrations.0126_update_social_data_format.Migration.reset_social_fields,
        # ),
        migrations.AddField(
            model_name='abstractnode',
            name='custom_citation',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='PreprintLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('should_hide', models.BooleanField(default=False)),
                ('foreign_user', models.CharField(blank=True, max_length=255, null=True)),
                ('preprint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.Preprint')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='preprint_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='PreprintContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
                ('preprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Preprint')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterModelOptions(
            name='preprint',
            options={'permissions': (('view_preprint', 'Can view preprint details in the admin app.'), ('read_preprint', 'Can read the preprint'), ('write_preprint', 'Can write the preprint'), ('admin_preprint', 'Can manage the preprint'))},
        ),
        migrations.AddField(
            model_name='preprint',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='addons_osfstorage.Region'),
        ),
        migrations.AddField(
            model_name='preprint',
            name='primary_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='preprint', to='osf.OsfStorageFile'),
        ),
        migrations.AlterField(
            model_name='preprint',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preprints', to='osf.PreprintProvider'),
        ),
        # migrations.AlterField(
        #     model_name='preprint',
        #     name='subjects',
        #     field=models.ManyToManyField(blank=True, related_name='preprints', to='osf.Subject'),
        # ),
        migrations.AddField(
            model_name='preprint',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preprints_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preprint',
            name='is_public',
            field=models.BooleanField(db_index=True, default=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='migrated',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='preprint',
            name='article_doi',
            field=models.CharField(blank=True, max_length=128, null=True, validators=[osf.models.validators.validate_doi]),
        ),
        migrations.AddField(
            model_name='preprint',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='tags',
            field=models.ManyToManyField(related_name='preprint_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='preprint',
            name='title',
            field=models.TextField(default='Untitled', validators=[osf.models.validators.validate_title]),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='preprint',
            name='_contributors',
            field=models.ManyToManyField(related_name='preprints', through='osf.PreprintContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='preprint',
            unique_together=set([]),
        ),
        migrations.AlterUniqueTogether(
            name='preprintcontributor',
            unique_together=set([('user', 'preprint')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='preprintcontributor',
            order_with_respect_to='preprint',
        ),
        # migrations.RunSQL(
        #     sql=["\n                -- Borrowed from https://gist.github.com/jamarparris/6100413\n                CREATE OR REPLACE FUNCTION generate_object_id() RETURNS varchar AS $$\n                DECLARE\n                    time_component bigint;\n                    machine_id bigint := FLOOR(random() * 16777215);\n                    process_id bigint;\n                    seq_id bigint := FLOOR(random() * 16777215);\n                    result varchar:= '';\n                BEGIN\n                    SELECT FLOOR(EXTRACT(EPOCH FROM clock_timestamp())) INTO time_component;\n                    SELECT pg_backend_pid() INTO process_id;\n\n                    result := result || lpad(to_hex(time_component), 8, '0');\n                    result := result || lpad(to_hex(machine_id), 6, '0');\n                    result := result || lpad(to_hex(process_id), 4, '0');\n                    result := result || lpad(to_hex(seq_id), 6, '0');\n                    RETURN result;\n                END;\n                $$ LANGUAGE PLPGSQL;\n                ", '\n                UPDATE osf_preprint P -- Copies basic preprint properties from node\n                SET title = N.title,\n                    description = N.description,\n                    article_doi = N.preprint_article_doi,\n                    is_public = N.is_public\n                FROM osf_abstractnode as N\n                WHERE P.node_id = N.id\n                AND P.node_id IS NOT NULL;\n                ', "\n                UPDATE osf_preprint P -- Copies node spam to preprint spam as long as preprint hasn't been confirmed as spam or ham\n                SET spam_status= N.spam_status,\n                    spam_pro_tip= N.spam_pro_tip,\n                    spam_data = N.spam_data,\n                    date_last_reported = N.date_last_reported,\n                    reports = N.reports\n                FROM osf_abstractnode as N\n                WHERE P.node_id = N.id\n                AND P.node_id IS NOT NULL\n                AND (P.spam_status is NULL\n                OR (P.spam_status != 4\n                AND P.spam_status != 2));\n                ", '\n                -- Creates PreprintContributor records from NodeContributors, except permissions\n                -- since preprints use django guardian\n                INSERT INTO osf_preprintcontributor (visible, user_id, preprint_id, _order)\n                  (SELECT C.visible, C.user_id, P.id, C._order\n                   FROM osf_preprint as P\n                   JOIN osf_abstractnode as N on P.node_id = N.id\n                   JOIN osf_contributor as C on N.id = C.node_id);\n                ', "\n                -- Copy the unclaimed record for the node and add it to the user using the preprint guid as the key\n                -- This is for preserving unregistered contributor info\n                CREATE OR REPLACE FUNCTION update_unclaimed_records_for_preprints()\n                  RETURNS SETOF varchar AS\n                $func$\n                DECLARE\n                  rec record;\n                BEGIN\n                  FOR rec IN\n                    SELECT jsonb_build_object(PG._id, unclaimed_records::jsonb-> NG._id) as newkeyvalue, U.id as user_id\n                    FROM osf_osfuser U, osf_contributor C, osf_abstractnode N, osf_preprint P, django_content_type NCT, django_content_type PCT, osf_guid NG, osf_guid PG\n                    WHERE C.user_id = U.id\n                    AND N.id = C.node_id\n                    AND P.node_id = N.id\n                    AND NCT.model = 'abstractnode'\n                    AND PCT.model = 'preprint'\n                    AND NG.object_id = N.id AND NG.content_type_id = NCT.id\n                    AND PG.object_id = P.id AND PG.content_type_id = PCT.id\n                    AND unclaimed_records::jsonb ? NG._id\n\n                  LOOP\n                    -- Loops through every row in temporary table above, and adding a new key/value pair to unclaimed_records, copying the node -> preprint\n                    -- Looping instead of joining to osf_user table because temporary table above has multiple rows with the same user\n                    UPDATE osf_osfuser\n                    SET unclaimed_records = unclaimed_records || rec.newkeyvalue\n                    WHERE osf_osfuser.id = rec.user_id;\n                  END LOOP;\n                END\n                $func$ LANGUAGE plpgsql;\n                SELECT update_unclaimed_records_for_preprints();\n                ", "\n                -- Creates Read, Write, and Admin groups for each preprint\n                INSERT INTO auth_group (name)\n                (SELECT 'preprint_' || P.id || '_read' FROM osf_preprint AS P WHERE P.node_id IS NOT NULL\n                UNION\n                SELECT 'preprint_' || P.id || '_write' FROM osf_preprint AS P WHERE P.node_id IS NOT NULL\n                UNION\n                SELECT 'preprint_' || P.id || '_admin' FROM osf_preprint AS P WHERE P.node_id IS NOT NULL);\n                ", '\n                -- Adds "read_preprint" permissions to all Preprint read groups\n                INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)\n                SELECT P.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id\n                FROM osf_preprint AS P, auth_group G, django_content_type AS CT, auth_permission AS PERM\n                WHERE P.node_id IS NOT NULL\n                AND G.name = \'preprint_\' || P.id || \'_read\'\n                AND CT.model = \'preprint\' AND CT.app_label = \'osf\'\n                AND PERM.codename = \'read_preprint\';\n                ', '\n                -- Adds "read_preprint" and "write_preprint" permissions to all Preprint write groups\n                INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)\n                SELECT P.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id\n                FROM osf_preprint AS P, auth_group G, django_content_type AS CT, auth_permission AS PERM\n                WHERE P.node_id IS NOT NULL\n                AND G.name = \'preprint_\' || P.id || \'_write\'\n                AND CT.model = \'preprint\' AND CT.app_label = \'osf\'\n                AND PERM.codename = \'read_preprint\';\n                ', "\n                INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)\n                SELECT P.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id\n                FROM osf_preprint AS P, auth_group G, django_content_type AS CT, auth_permission AS PERM\n                WHERE P.node_id IS NOT NULL\n                AND G.name = 'preprint_' || P.id || '_write'\n                AND CT.model = 'preprint' AND CT.app_label = 'osf'\n                AND PERM.codename = 'write_preprint';\n                ", '\n                -- Adds "read_preprint", "write_preprint", and "admin_preprint" permissions to all Preprint admin groups\n                INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)\n                SELECT P.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id\n                FROM osf_preprint AS P, auth_group G, django_content_type AS CT, auth_permission AS PERM\n                WHERE P.node_id IS NOT NULL\n                AND G.name = \'preprint_\' || P.id || \'_admin\'\n                AND CT.model = \'preprint\' AND CT.app_label = \'osf\'\n                AND PERM.codename = \'read_preprint\';\n                ', "\n                INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)\n                SELECT P.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id\n                FROM osf_preprint AS P, auth_group G, django_content_type AS CT, auth_permission AS PERM\n                WHERE P.node_id IS NOT NULL\n                AND G.name = 'preprint_' || P.id || '_admin'\n                AND CT.model = 'preprint' AND CT.app_label = 'osf'\n                AND PERM.codename = 'write_preprint';\n                ", "\n                INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)\n                SELECT P.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id\n                FROM osf_preprint AS P, auth_group G, django_content_type AS CT, auth_permission AS PERM\n                WHERE P.node_id IS NOT NULL\n                AND G.name = 'preprint_' || P.id || '_admin'\n                AND CT.model = 'preprint' AND CT.app_label = 'osf'\n                AND PERM.codename = 'admin_preprint';\n                ", "\n                -- Add users with read permissions only on preprint-node to the preprint's read group\n                INSERT INTO osf_osfuser_groups (osfuser_id, group_id)\n                SELECT C.user_id as osfuser_id, G.id as group_id\n                FROM osf_preprint as P, osf_abstractnode as N, osf_contributor as C, auth_group as G\n                WHERE P.node_id IS NOT NULL\n                AND P.node_id = N.id\n                AND C.node_id = N.id\n                AND C.read = TRUE\n                AND C.write = FALSE\n                AND C.admin = FALSE\n                AND G.name = 'preprint_' || P.id || '_read';\n                ", "\n                -- Add users with write permissions on preprint-node to the preprint's write group\n                INSERT INTO osf_osfuser_groups (osfuser_id, group_id)\n                SELECT C.user_id as osfuser_id, G.id as group_id\n                FROM osf_preprint as P, osf_abstractnode as N, osf_contributor as C, auth_group as G\n                WHERE P.node_id IS NOT NULL\n                AND P.node_id = N.id\n                AND C.node_id = N.id\n                AND C.read = TRUE\n                AND C.write = TRUE\n                AND C.admin = FALSE\n                AND G.name = 'preprint_' || P.id || '_write';\n                ", "\n                -- Add users with admin permissions on preprint-node to the preprint's admin group\n                INSERT INTO osf_osfuser_groups (osfuser_id, group_id)\n                SELECT C.user_id as osfuser_id, G.id as group_id\n                FROM osf_preprint as P, osf_abstractnode as N, osf_contributor as C, auth_group as G\n                WHERE P.node_id IS NOT NULL\n                AND P.node_id = N.id\n                AND C.node_id = N.id\n                AND C.read = TRUE\n                AND C.write = TRUE\n                AND C.admin = TRUE\n                AND G.name = 'preprint_' || P.id || '_admin';\n                ", '\n                -- Add all the tags on nodes to their corresponding preprint\n                INSERT INTO osf_preprint_tags (preprint_id, tag_id)\n                SELECT P.id, T.tag_id\n                FROM osf_preprint AS P, osf_abstractnode AS N, osf_abstractnode_tags as T\n                WHERE P.node_id IS NOT NULL\n                AND P.node_id = N.id\n                AND T.abstractnode_id = N.id;\n                ', "\n                -- Update preprint region to be the same as the node's region\n                UPDATE osf_preprint\n                SET region_id = NS.region_id\n                FROM addons_osfstorage_nodesettings NS\n                WHERE osf_preprint.node_id = NS.owner_id;\n                ", "\n                -- Create a root folder for each preprint\n                INSERT INTO osf_basefilenode\n                (created, modified, _id, type, target_content_type_id, target_object_id, provider, name,\n                  _path, _materialized_path, is_root, _history)\n                SELECT current_timestamp,\n                    current_timestamp,\n                    generate_object_id(),\n                    'osf.osfstoragefolder',\n                    CT.id,\n                    P.id,\n                   'osfstorage',\n                   '',\n                   '',\n                   '',\n                   true,\n                   '[]'\n                FROM osf_preprint as P, django_content_type as CT\n                WHERE P.node_id IS NOT NULL\n                AND CT.model = 'preprint' and CT.app_label = 'osf';\n                ", "\n                -- Move the node's preprint file target from the node -> preprint, and\n                -- set the file's parent as the preprint's root_folder\n                UPDATE osf_basefilenode Fi\n                SET target_object_id = P.id,\n                  target_content_type_id = CT.id,\n                  parent_id = Fo.id\n                FROM osf_preprint P, osf_abstractnode N, django_content_type CT, osf_basefilenode Fo\n                WHERE P.node_id = N.id\n                and P.node_id IS NOT NULL\n                and N.preprint_file_id = Fi.id\n                and CT.model = 'preprint' and CT.app_label = 'osf'\n                and Fo.is_root = TRUE\n                and Fo.target_object_id = P.id\n                and Fo.target_content_type_id = CT.id;\n                ", "\n                -- Set the preprint primary file as the node's preprint file\n                UPDATE osf_preprint P\n                SET primary_file_id = N.preprint_file_id\n                FROM osf_abstractnode N\n                WHERE P.node_id = N.id\n                AND P.node_id IS NOT NULL;\n                ", "\n                -- Set deleted date on preprint, if exists, pulling from attached node's project_deleted log\n                UPDATE osf_preprint as P\n                SET deleted = L.date\n                FROM osf_abstractnode N, osf_nodelog L\n                WHERE P.node_id = N.id\n                AND P.node_id IS NOT NULL\n                AND L.node_id = N.id\n                AND L.action = 'project_deleted';\n                ", "\n                -- Set preprint creator to equal the user attached to the node's preprint initiated log\n                UPDATE osf_preprint P\n                SET creator_id = L.user_id\n                FROM osf_abstractnode N, osf_nodelog L\n                WHERE P.node_id = N.id\n                AND L.node_id = N.id\n                and L.action = 'preprint_initiated';\n                ", "\n                -- For preprints whose nodes don't have preprint initiated log, just set preprint creator to equal the node creator\n                UPDATE osf_preprint P\n                SET creator_id = N.creator_id\n                FROM  osf_abstractnode N\n                WHERE P.creator_id IS NULL\n                AND P.node_id = N.id;\n                ", "\n                -- Set preprint modified date to be the date of the latest preprint-related nodelog, if date is more recent\n                -- than the preprint modified date\n                UPDATE osf_preprint\n                SET modified =\n                  GREATEST((SELECT L.date\n                   FROM osf_nodelog L\n                   WHERE (L.node_id = (osf_preprint.node_id)\n                          AND L.action IN ('contributor_added',\n                                              'made_contributor_invisible',\n                                              'made_public',\n                                              'made_contributor_visible',\n                                              'edit_description',\n                                              'preprint_file_updated',\n                                              'preprint_initiated',\n                                              'contributor_removed',\n                                              'made_private',\n                                              'edit_title',\n                                              'preprint_license_updated',\n                                              'subjects_updated',\n                                              'tag_removed',\n                                              'permissions_updated',\n                                              'tag_added',\n                                              'contributors_reordered',\n                                              'project_deleted'))\n                   ORDER BY L.date DESC\n                   LIMIT 1), osf_preprint.modified)\n                WHERE osf_preprint.node_id IS NOT NULL;\n                ", '\n                -- Final step - set migrated date to current datetime\n                UPDATE osf_preprint\n                SET migrated = current_timestamp\n                WHERE osf_preprint.node_id IS NOT NULL\n                '],
        #     reverse_sql=[],
        # ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='_has_abandoned_preprint',
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='_is_preprint_orphan',
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='preprint_article_doi',
        ),
        migrations.RemoveField(
            model_name='abstractnode',
            name='preprint_file',
        ),
        migrations.AddField(
            model_name='collection',
            name='issue_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=31), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collection',
            name='program_area_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=31), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collection',
            name='volume_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=31), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='issue',
            field=models.CharField(blank=True, max_length=31),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='program_area',
            field=models.CharField(blank=True, max_length=31),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='volume',
            field=models.CharField(blank=True, max_length=31),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='osf.RegistrationProvider'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='draft_registrations', to='osf.RegistrationProvider'),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0135_migrate_registrations_to_osf_registries_provider.migrate_existing_registrations_into_osf_registries,
        #     reverse_code=osf.migrations.0135_migrate_registrations_to_osf_registries_provider.remove_existing_registrations_from_osf_registries,
        # ),
        migrations.AlterField(
            model_name='collection',
            name='collected_type_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='collection',
            name='issue_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='collection',
            name='program_area_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='collection',
            name='status_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='collection',
            name='volume_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='collectionsubmission',
            name='collected_type',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AlterField(
            model_name='collectionsubmission',
            name='issue',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AlterField(
            model_name='collectionsubmission',
            name='program_area',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AlterField(
            model_name='collectionsubmission',
            name='status',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AlterField(
            model_name='collectionsubmission',
            name='volume',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.RemoveField(
            model_name='osfuser',
            name='is_claimed',
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0139_rename_aspredicted_schema.rename_aspredicted_schema,
        #     reverse_code=osf.migrations.0139_rename_aspredicted_schema.undo_aspredicted_rename,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0145_add_preprint_contenttype_to_collections.add_preprint_type_to_collections,
        #     reverse_code=osf.migrations.0145_add_preprint_contenttype_to_collections.reverse_func,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0147_repoint_preprint_pagecounters.rekey_pagecounters,
        #     reverse_code=osf.migrations.0147_repoint_preprint_pagecounters.noop,
        # ),
        migrations.AddField(
            model_name='registrationschema',
            name='visible',
            field=models.BooleanField(default=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0146_update_registration_schemas.remove_version_1_schemas,
        #     reverse_code=osf.migrations.0146_update_registration_schemas.noop,
        # ),
        # osf.utils.migrations.UpdateRegistrationSchemas(
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0146_update_registration_schemas.update_v2_schemas,
        #     reverse_code=osf.migrations.0146_update_registration_schemas.noop,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0150_fix_deleted_preprints.forward,
        #     reverse_code=osf.migrations.0150_fix_deleted_preprints.backward,
        # ),
        migrations.AlterModelOptions(
            name='preprint',
            options={'permissions': (('view_preprint', 'Can view preprint details in the admin app'), ('read_preprint', 'Can read the preprint'), ('write_preprint', 'Can write the preprint'), ('admin_preprint', 'Can manage the preprint'))},
        ),
        osf.utils.migrations.DeleteWaffleSwitches(
            switch_names=['disable_datacite_dois', 'ezid_switch'],
        ),
        migrations.CreateModel(
            name='FileMetadataSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('schema', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('schema_version', models.IntegerField()),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='filemetadataschema',
            unique_together=set([('name', 'schema_version')]),
        ),
        migrations.CreateModel(
            name='FileMetadataRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('metadata', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='osf.OsfStorageFile')),
                ('schema', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='osf.FileMetadataSchema')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='filemetadatarecord',
            unique_together=set([('file', 'schema')]),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0158_fix_fork_last_logged.transfer_forked_date,
        #     reverse_code=osf.migrations.0158_fix_fork_last_logged.untransfer_forked_date,
        # ),
        migrations.CreateModel(
            name='ChronosJournal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField()),
                ('title', models.TextField()),
                ('journal_id', models.TextField(unique=True)),
                ('raw_response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChronosSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('publication_id', models.TextField(unique=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=None, null=True)),
                ('raw_response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('submission_url', models.TextField()),
                ('journal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.ChronosJournal')),
                ('preprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Preprint')),
            ],
        ),
        migrations.AddField(
            model_name='osfuser',
            name='chronos_user_id',
            field=models.TextField(blank=True, db_index=True, null=True),
        ),
        migrations.AddField(
            model_name='chronossubmission',
            name='submitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='chronossubmission',
            unique_together=set([('preprint', 'journal')]),
        ),
        migrations.AlterModelOptions(
            name='abstractnode',
            options={'base_manager_name': 'objects', 'permissions': (('view_node', 'Can view node details'), ('read_node', 'Can read the node'), ('write_node', 'Can edit the node'), ('admin_node', 'Can manage the node'))},
        ),
        migrations.AlterModelOptions(
            name='node',
            options={},
        ),
        migrations.CreateModel(
            name='NodeGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NodeUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.AbstractNode')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreprintGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Preprint')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreprintUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.Preprint')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='preprintuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='preprintgroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='nodeuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='nodegroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0163_migrate_preprints_to_direct_fks.migrate_preprints_to_direct_fks,
        #     reverse_code=osf.migrations.0163_migrate_preprints_to_direct_fks.reverse_migrate_preprints,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0164_add_guardian_to_nodes.migrate_nodes_to_guardian,
        #     reverse_code=osf.migrations.0164_add_guardian_to_nodes.reverse_guardian_migration,
        # ),
        migrations.CreateModel(
            name='OSFGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField()),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='osfgroups_created', to=settings.AUTH_USER_MODEL)),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
            ],
            options={
                'permissions': (('view_group', 'Can view group details'), ('member_group', 'Has group membership'), ('manage_group', 'Can manage group membership')),
            },
        ),
        migrations.CreateModel(
            name='OSFGroupGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.OSFGroup')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OSFGroupUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.OSFGroup')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='osfgroupgroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='osfgroupuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.CreateModel(
            name='OSFGroupLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('should_hide', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.AddField(
            model_name='osfgroup',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='osfgrouplog',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.OSFGroup'),
        ),
        migrations.AddField(
            model_name='osfgrouplog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='group_connected_email_records',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='member_added_email_records',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='article_doi',
            field=models.CharField(blank=True, max_length=128, null=True, validators=[osf.models.validators.validate_doi]),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='date_last_reported',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='reports',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, validators=[osf.models.spam._validate_reports]),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='spam_data',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='spam_pro_tip',
            field=models.CharField(blank=True, default=None, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='spam_status',
            field=models.IntegerField(blank=True, db_index=True, default=None, null=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0161_add_spam_fields_to_user.add_spam_status_to_tagged_users,
        #     reverse_code=osf.migrations.0161_add_spam_fields_to_user.remove_spam_status_from_tagged_users,
        # ),
        migrations.AddField(
            model_name='conference',
            name='submissions',
            field=models.ManyToManyField(related_name='conferences', to='osf.AbstractNode'),
        ),
        migrations.RemoveField(
            model_name='conference',
            name='num_submissions',
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0163_populate_conference_submissions.forward,
        #     reverse_code=osf.migrations.0163_populate_conference_submissions.backward,
        # ),
        migrations.AddField(
            model_name='abstractnode',
            name='files_count',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0171_add_registration_files_count.add_registration_files_count,
        #     reverse_code=osf.migrations.0171_add_registration_files_count.noop,
        # ),
        migrations.AddField(
            model_name='pagecounter',
            name='action',
            field=models.CharField(blank=True, max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.BaseFileNode'),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='resource',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.Guid'),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='version',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql="\n    UPDATE osf_pagecounter PC\n    SET\n        action = split_part(PC._id, ':', 1),\n        resource_id = Guid.id,\n        file_id = File.id,\n        version = NULLIF(split_part(PC._id, ':', 4), '')::int\n    FROM osf_guid Guid, osf_basefilenode File\n        WHERE\n              Guid._id = split_part(PC._id, ':', 2) AND\n              File._id = split_part(PC._id, ':', 3) AND\n              PC.id in (\n                  select PC.id from osf_pagecounter PC\n                      INNER JOIN osf_guid Guid on Guid._id = split_part(PC._id, ':', 2)\n                      INNER JOIN osf_basefilenode File on File._id = split_part(PC._id, ':', 3)\n                  WHERE (PC.resource_id IS NULL OR PC.file_id IS NULL)\n );",
            reverse_sql="\nUPDATE osf_pagecounter PC\nSET\n    resource_id = NULL,\n    file_id = NULL,\n    version = NULL,\n    action = NULL\nWHERE PC.id IN (\n    SELECT PC.id FROM osf_pagecounter PC\n        INNER JOIN osf_guid Guid on Guid._id = split_part(PC._id, ':', 2)\n        INNER JOIN osf_basefilenode File on File._id = split_part(PC._id, ':', 3)\n );",
        ),
        # migrations.RunSQL(
        #     sql=['CREATE INDEX CONCURRENTLY page_counter_idx ON osf_pagecounter (action, resource_id, file_id, version);'],
        #     reverse_sql=['DROP INDEX IF EXISTS page_counter_idx, RESTRICT;'],
        # ),
        migrations.AddField(
            model_name='apioauth2scope',
            name='is_public',
            field=models.BooleanField(db_index=True, default=True),
        ),
        migrations.AlterField(
            model_name='apioauth2personaltoken',
            name='scopes',
            field=models.CharField(max_length=300, null=True),
        ),
        # migrations.AddField(
        #     model_name='apioauth2personaltoken',
        #     name='scopes_temp',
        #     field=models.ManyToManyField(related_name='tokens', to='osf.ApiOAuth2Scope'),
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0179_apioauth2personaltoken_scopes_temp.migrate_scopes_from_char_to_m2m,
        #     reverse_code=osf.migrations.0179_apioauth2personaltoken_scopes_temp.remove_m2m_scopes,
        # ),
        migrations.RemoveField(
            model_name='apioauth2personaltoken',
            name='scopes',
        ),
        # migrations.RenameField(
        #     model_name='apioauth2personaltoken',
        #     old_name='scopes_temp',
        #     new_name='scopes',
        # ),
        migrations.AddField(
            model_name='osfuser',
            name='contacted_deactivation',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='BaseFileVersionsThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_name', models.TextField(blank=True)),
                ('basefilenode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.BaseFileNode')),
                ('fileversion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.FileVersion')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='basefileversionsthrough',
            unique_together=set([('basefilenode', 'fileversion')]),
        ),
        migrations.AlterIndexTogether(
            name='basefileversionsthrough',
            index_together=set([('basefilenode', 'fileversion')]),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0183_populate_file_versions_through.populate_fileversion_name,
        #     reverse_code=osf.migrations.0183_populate_file_versions_through.restore_default_through_table,
        # ),
        migrations.RemoveField(
            model_name='basefilenode',
            name='versions',
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='versions',
            field=models.ManyToManyField(through='osf.BaseFileVersionsThrough', to='osf.FileVersion'),
        ),
        migrations.AlterField(
            model_name='pagecounter',
            name='action',
            field=models.CharField(max_length=128),
        ),
        migrations.AlterField(
            model_name='pagecounter',
            name='file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.BaseFileNode'),
        ),
        migrations.AlterField(
            model_name='pagecounter',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.Guid'),
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='admin',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='read',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='write',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='admin',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='read',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='write',
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='privatelink',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql='UPDATE osf_basefilenode SET deleted = deleted_on\n    WHERE id IN (SELECT id FROM osf_basefilenode WHERE deleted_on IS NOT NULL AND deleted IS NULL);',
            reverse_sql='UPDATE osf_basefilenode SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_institution SET deleted=modified\nWHERE id IN (SELECT id FROM osf_institution WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_institution SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_abstractnode SET deleted = CASE WHEN deleted_date IS NOT NULL THEN deleted_date ELSE last_logged END\n    WHERE id IN (SELECT id FROM osf_abstractnode WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_abstractnode SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_privatelink SET deleted=modified\nWHERE id IN (SELECT id FROM osf_privatelink WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_privatelink SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_comment SET deleted=modified\nWHERE id IN (SELECT id FROM osf_comment WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_comment SET deleted = null',
        ),
        migrations.CreateModel(
            name='RegistrationSchemaBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('help_text', models.TextField()),
                ('example_text', models.TextField(null=True)),
                ('registration_response_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('schema_block_group_key', models.CharField(db_index=True, max_length=24, null=True)),
                ('block_type', models.CharField(choices=[('page-heading', 'page-heading'), ('section-heading', 'section-heading'), ('subsection-heading', 'subsection-heading'), ('paragraph', 'paragraph'), ('question-label', 'question-label'), ('short-text-input', 'short-text-input'), ('long-text-input', 'long-text-input'), ('file-input', 'file-input'), ('contributors-input', 'contributors-input'), ('single-select-input', 'single-select-input'), ('multi-select-input', 'multi-select-input'), ('select-input-option', 'select-input-option'), ('select-other-option', 'select-other-option')], db_index=True, max_length=31)),
                ('display_text', models.TextField()),
                ('required', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='config',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='registrationschemablock',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schema_blocks', to='osf.RegistrationSchema'),
        ),
        migrations.AlterUniqueTogether(
            name='registrationschemablock',
            unique_together=set([('schema', 'registration_response_key')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='registrationschemablock',
            order_with_respect_to='schema',
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_responses',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_responses_migrated',
            field=models.NullBooleanField(db_index=True, default=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_responses',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_responses_migrated',
            field=models.NullBooleanField(db_index=True, default=True),
        ),
        # migrations.RunPython(
        #     code=osf.migrations.0193_migrate_registered_meta.migrate_draft_registration_metadata,
        #     reverse_code=osf.migrations.0193_migrate_registered_meta.clear_draft_registration_responses,
        # ),
        # migrations.RunPython(
        #     code=osf.migrations.0193_migrate_registered_meta.migrate_registration_registered_meta,
        #     reverse_code=osf.migrations.0193_migrate_registered_meta.clear_registration_responses,
        # ),
        migrations.AddField(
            model_name='abstractnode',
            name='external_registration',
            field=models.NullBooleanField(default=False),
        ),
        migrations.CreateModel(
            name='DraftRegistrationContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DraftRegistrationGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftRegistrationUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.AlterModelOptions(
            name='draftregistration',
            options={'permissions': (('read_draft_registration', 'Can read the draft registration'), ('write_draft_registration', 'Can edit the draft registration'), ('admin_draft_registration', 'Can manage the draft registration'))},
        ),
        migrations.AlterModelOptions(
            name='draftregistrationlog',
            options={'get_latest_by': 'created', 'ordering': ['-created']},
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='affiliated_institutions',
            field=models.ManyToManyField(related_name='draft_registrations', to='osf.Institution'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='category',
            field=models.CharField(blank=True, choices=[('analysis', 'Analysis'), ('communication', 'Communication'), ('data', 'Data'), ('hypothesis', 'Hypothesis'), ('instrumentation', 'Instrumentation'), ('methods and measures', 'Methods and Measures'), ('procedure', 'Procedure'), ('project', 'Project'), ('software', 'Software'), ('other', 'Other'), ('', 'Uncategorized')], default='', max_length=255),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='draft_registrations', to='osf.NodeLicenseRecord'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='draftregistrations', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='tags',
            field=models.ManyToManyField(related_name='draftregistration_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='title',
            field=models.TextField(blank=True, default='', validators=[osf.models.validators.validate_title]),
        ),
        migrations.AddField(
            model_name='draftregistrationlog',
            name='params',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='type',
            field=models.CharField(choices=[('osf.node', 'node'), ('osf.draftnode', 'draft node'), ('osf.registration', 'registration'), ('osf.quickfilesnode', 'quick files node')], db_index=True, max_length=255),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='branched_from',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registered_draft', to='osf.AbstractNode'),
        ),
        migrations.AlterField(
            model_name='draftregistrationlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='draft_registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='_contributors',
            field=models.ManyToManyField(related_name='draft_registrations', through='osf.DraftRegistrationContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationgroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationcontributor',
            unique_together=set([('user', 'draft_registration')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='draftregistrationcontributor',
            order_with_respect_to='draft_registration',
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='in_sloan_study',
            field=models.NullBooleanField(default=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='conflict_of_interest_statement',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='data_links',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_coi',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_data_links',
            field=models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'), ('not_applicable', 'Not applicable')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_prereg_links',
            field=models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'), ('not_applicable', 'Not applicable')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='prereg_link_info',
            field=models.TextField(blank=True, choices=[('prereg_designs', 'Pre-registration of study designs'), ('prereg_analysis', 'Pre-registration of study analysis'), ('prereg_both', 'Pre-registration of study designs and study analysis')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='prereg_links',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='preprint',
            name='why_no_data',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='why_no_prereg',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterModelOptions(
            name='institution',
            options={'permissions': (('view_institution', 'Can view institution details'), ('view_institutional_metrics', 'Can access metrics endpoints for their Institution'))},
        ),
        migrations.AddField(
            model_name='osfuser',
            name='department',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.RegistrationProvider'),
        ),
        migrations.AddField(
            model_name='conference',
            name='auto_check_spam',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('hero_logo_image', models.URLField()),
                ('topnav_logo_image', models.URLField()),
                ('hero_background_image', models.URLField()),
                ('primary_color', models.CharField(max_length=7)),
                ('secondary_color', models.CharField(max_length=7)),
            ],
            options={
                'abstract': False,
                'permissions': (('view_brand', 'Can view brand details'), ('modify_brand', 'Can modify brands')),
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='advertises_on_discovery',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='branded_discovery_page',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='has_landing_page',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='providers', to='osf.Brand'),
        ),
        migrations.AlterField(
            model_name='osfuser',
            name='date_last_login',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='providers',
            field=models.ManyToManyField(blank=True, related_name='schemas', to='osf.RegistrationProvider'),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='provider',
            field=models.ForeignKey(default=osf.models.registrations.get_default_id, on_delete=django.db.models.deletion.CASCADE, related_name='draft_registrations', to='osf.RegistrationProvider'),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='share_publish_type',
            field=models.CharField(choices=[('Preprint', 'Preprint'), ('Thesis', 'Thesis'), ('Registration', 'Registration')], default='Thesis', help_text='This SHARE type will be used when pushing publications to SHARE', max_length=32),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='share_source',
            field=models.CharField(blank=True, default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='abstractprovider',
            name='share_title',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='purged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fileversion',
            name='purged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='custom_storage_usage_limit_private',
            field=models.DecimalField(blank=True, decimal_places=9, max_digits=100, null=True),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='custom_storage_usage_limit_public',
            field=models.DecimalField(blank=True, decimal_places=9, max_digits=100, null=True),
        ),
        migrations.CreateModel(
            name='RegistrationAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('accept_submission', 'AcceptSubmission'), ('reject_submission', 'RejectSubmission'), ('request_withdrawal', 'RequestWithdrawal'), ('accept_withdrawal', 'AcceptWithdrawal'), ('reject_withdrawal', 'RejectWithdrawal'), ('force_withdraw', 'ForceWithdraw')], max_length=31)),
                ('from_state', models.CharField(choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'), ('pending_withdraw_request', 'PendingWithdrawRequest'), ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], max_length=31)),
                ('to_state', models.CharField(choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'), ('pending_withdraw_request', 'PendingWithdrawRequest'), ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], max_length=31)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.Registration')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='moderation_state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('initial', 'Initial'), ('reverted', 'Reverted'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('embargo', 'Embargo'), ('pending_embargo_termination', 'PendingEmbargoTermination'), ('pending_withdraw_request', 'PendingWithdrawRequest'), ('pending_withdraw', 'PendingWithdraw'), ('withdrawn', 'Withdrawn')], default='initial', max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='_id',
            field=models.CharField(db_index=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='event_name',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterUniqueTogether(
            name='notificationsubscription',
            unique_together=set([('_id', 'provider')]),
        ),
        migrations.AlterField(
            model_name='draftregistrationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='embargo',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='embargoterminationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='registrationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='retraction',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='license_id',
            field=models.CharField(help_text='A unique id for the license. for example', max_length=128, unique=True),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='name',
            field=models.CharField(help_text='The name of the license', max_length=256, unique=True),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='properties',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, default=list, help_text="The custom elements in a license's text surrounded with curly brackets for example: <i>{year,copyrightHolders}</i>", size=None),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='text',
            field=models.TextField(help_text='The text of the license with custom properties surround by curly brackets, for example: <i>Copyright (c) {{year}}, {{copyrightHolders}} All rights reserved.</i>'),
        ),
        migrations.AlterField(
            model_name='nodelicense',
            name='url',
            field=models.URLField(blank=True, help_text="The license's url for example: <i>http://opensource.org/licenses/BSD-3-Clause</i>"),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='branched_from_node',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='additional_metadata',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, null=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='additional_metadata_fields',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, null=True),
        ),
        migrations.AlterModelOptions(
            name='adminprofile',
            options={'permissions': (('mark_spam', 'Can mark comments, projects and registrations as spam'), ('view_spam', 'Can view nodes, comments, and projects marked as spam'), ('view_metrics', 'Can view metrics on the OSF Admin app'), ('view_prereg', 'Can view entries for the preregistration chellenge on the admin'), ('administer_prereg', 'Can update, comment on, and approve entries to the prereg challenge'), ('view_desk', 'Can view details about Desk users'), ('delete_preprintrequest', 'Can delete preprints withdrawal requests'), ('change_preprintrequest', 'Can update preprints withdrawal requests'))},
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='default_schema',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_schema', to='osf.RegistrationSchema'),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='ia_url',
            field=models.URLField(blank=True, help_text='Where the archive.org data for the registration is stored', null=True),
        ),
        migrations.AddField(
            model_name='collection',
            name='school_type_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collection',
            name='study_design_choices',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=127), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='school_type',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AddField(
            model_name='collectionsubmission',
            name='study_design',
            field=models.CharField(blank=True, max_length=127),
        ),
        migrations.AddField(
            model_name='institution',
            name='deactivated',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='SchemaResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('revision_justification', models.CharField(max_length=2048, null=True)),
                ('submitted_timestamp', osf.utils.fields.NonNaiveDateTimeField(null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('previous_response', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_response', to='osf.SchemaResponse')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='SchemaResponseBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('schema_key', models.CharField(max_length=255)),
                ('response', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, null=True)),
                # ('source_schema_block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.RegistrationSchemaBlock')),
                ('source_schema_response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updated_response_blocks', to='osf.SchemaResponse')),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='response_blocks',
            field=models.ManyToManyField(to='osf.SchemaResponseBlock'),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.RegistrationSchema'),
        ),
        # migrations.AlterUniqueTogether(
        #     name='schemaresponseblock',
        #     unique_together=set([('source_schema_response', 'source_schema_block')]),
        # ),
        migrations.CreateModel(
            name='SchemaResponseAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('comment', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('auto', models.BooleanField(default=False)),
                ('trigger', models.CharField(choices=[('submit', 'Submit'), ('approve', 'Approve'), ('accept', 'Accept'), ('admin_reject', 'AdminReject'), ('moderator_reject', 'ModeratorReject')], max_length=31)),
                ('from_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], max_length=31)),
                ('to_state', models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AlterModelOptions(
            name='schemaresponse',
            options={'ordering': ['-created']},
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='pending_approvers',
            field=models.ManyToManyField(related_name='pending_submissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponse',
            name='reviews_state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='in_progress', max_length=255),
        ),
        migrations.AlterField(
            model_name='draftregistrationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='embargo',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='embargoterminationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='registrationapproval',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='retraction',
            name='state',
            field=models.CharField(choices=[('undefined', 'Undefined'), ('unapproved', 'Unapproved'), ('pending_moderation', 'PendingModeration'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('moderator_rejected', 'ModeratorRejected'), ('completed', 'Completed'), ('in_progress', 'InProgress')], default='unapproved', max_length=255),
        ),
        migrations.AlterField(
            model_name='schemaresponse',
            name='previous_response',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_response', to='osf.SchemaResponse'),
        ),
        migrations.AlterField(
            model_name='schemaresponse',
            name='revision_justification',
            field=models.CharField(blank=True, max_length=2048, null=True),
        ),
        migrations.AlterField(
            model_name='schemaresponse',
            name='submitted_timestamp',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name='schemaresponse',
            index=models.Index(fields=['reviews_state'], name='osf_schemar_reviews_c361bc_idx'),
        ),
        migrations.AddField(
            model_name='schemaresponseaction',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='schemaresponseaction',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='osf.SchemaResponse'),
        ),
        migrations.CreateModel(
            name='RegistrationBulkUploadJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('payload_hash', models.CharField(max_length=255, unique=True)),
                ('state', models.IntegerField(choices=[(osf.models.registration_bulk_upload_job.JobState(0), 'PENDING'), (osf.models.registration_bulk_upload_job.JobState(1), 'INITIALIZED'), (osf.models.registration_bulk_upload_job.JobState(2), 'PICKED_UP'), (osf.models.registration_bulk_upload_job.JobState(3), 'DONE_FULL'), (osf.models.registration_bulk_upload_job.JobState(4), 'DONE_PARTIAL'), (osf.models.registration_bulk_upload_job.JobState(5), 'DONE_ERROR')], default=osf.models.registration_bulk_upload_job.JobState(0))),
                ('email_sent', osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True)),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.RegistrationProvider')),
                ('schema', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.RegistrationSchema')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='RegistrationBulkUploadRow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_completed', models.BooleanField(default=False)),
                ('is_picked_up', models.BooleanField(default=False)),
                ('csv_raw', models.TextField(default='')),
                ('csv_parsed', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('row_hash', models.CharField(default='', max_length=255, unique=True)),
                ('draft_registration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration')),
                ('upload', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf.RegistrationBulkUploadJob')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='bulk_upload_auto_approval',
            field=models.NullBooleanField(default=False),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='allow_updates',
            field=models.NullBooleanField(default=False),
        ),
        migrations.AddField(
            model_name='notableemaildomain',
            name='note',
            field=models.IntegerField(choices=[(0, 'EXCLUDE_FROM_ACCOUNT_CREATION'), (1, 'ASSUME_HAM_UNTIL_REPORTED')], default=0),
        ),
        migrations.AddIndex(
            model_name='schemaresponse',
            index=models.Index(fields=['object_id', 'content_type'], name='osf_schemar_object__8cc95e_idx'),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='allow_bulk_uploads',
            field=models.NullBooleanField(default=False),
        ),
        # migrations.RemoveField(
        #     model_name='schemaresponseblock',
        #     name='source_schema_block',
        # ),
        migrations.AlterUniqueTogether(
            name='schemaresponseblock',
            unique_together=set([('source_schema_response', 'schema_key')]),
        ),
        migrations.AlterModelOptions(
            name='adminprofile',
            options={'permissions': (('mark_spam', 'Can mark comments, projects and registrations as spam'), ('view_spam', 'Can view nodes, comments, and projects marked as spam'), ('view_metrics', 'Can view metrics on the OSF Admin app'), ('view_desk', 'Can view details about Desk users'), ('delete_preprintrequest', 'Can delete preprints withdrawal requests'), ('change_preprintrequest', 'Can update preprints withdrawal requests'))},
        ),
        migrations.RemoveField(
            model_name='abstractprovider',
            name='in_sloan_study',
        ),
        migrations.RemoveField(
            model_name='draftregistration',
            name='approval',
        ),
        migrations.DeleteModel(
            name='DraftRegistrationApproval',
        ),
        migrations.AddField(
            model_name='institution',
            name='identifier_domain',
            field=models.URLField(blank=True, help_text='The full domain this institutions that will appear in DOI metadata.', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='ror_uri',
            field=models.URLField(blank=True, help_text='The full URI for the this institutions ROR.', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='orcid_record_verified_source',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.AlterField(
            model_name='institution',
            name='delegation_protocol',
            field=models.CharField(blank=True, choices=[('saml-shib', 'SAML_SHIBBOLETH'), ('cas-pac4j', 'CAS_PAC4J'), ('oauth-pac4j', 'OAUTH_PAC4J'), ('via-orcid', 'AFFILIATION_VIA_ORCID'), ('', 'NONE')], default='', max_length=15),
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('title', models.TextField(validators=[osf.models.validators.validate_title])),
                ('description', models.TextField(blank=True, default='')),
                ('category', models.CharField(blank=True, choices=[('analysis', 'Analysis'), ('communication', 'Communication'), ('data', 'Data'), ('hypothesis', 'Hypothesis'), ('instrumentation', 'Instrumentation'), ('methods and measures', 'Methods and Measures'), ('procedure', 'Procedure'), ('project', 'Project'), ('software', 'Software'), ('other', 'Other'), ('', 'Uncategorized')], default='', max_length=255)),
                ('affiliated_institutions', models.ManyToManyField(related_name='outcomes', to='osf.Institution')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.CreateModel(
            name='OutcomeArtifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('artifact_type', models.IntegerField(choices=[(0, 'UNDEFINED'), (1, 'DATA'), (11, 'CODE'), (21, 'MATERIALS'), (31, 'PAPERS'), (41, 'SUPPLEMENTS'), (1001, 'PRIMARY')], default=osf.utils.outcomes.ArtifactTypes(0))),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('identifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='artifact_metadata', to='osf.Identifier')),
                ('outcome', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artifact_metadata', to='osf.Outcome')),
            ],
            options={
                'ordering': ['artifact_type', 'title'],
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='outcome',
            name='artifacts',
            field=models.ManyToManyField(through='osf.OutcomeArtifact', to='osf.Identifier'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outcomes', to='osf.NodeLicenseRecord'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='outcomes', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='tags',
            field=models.ManyToManyField(related_name='outcome_tagged', to='osf.Tag'),
        ),
        migrations.AddIndex(
            model_name='outcomeartifact',
            index=models.Index(fields=['outcome', 'artifact_type'], name='osf_outcome_outcome_a62f5c_idx'),
        ),
        migrations.AddField(
            model_name='outcomeartifact',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='outcomeartifact',
            name='finalized',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='outcomeartifact',
            name='description',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='outcomeartifact',
            name='title',
            field=models.TextField(blank=True),
        ),
        migrations.AlterUniqueTogether(
            name='outcomeartifact',
            unique_together=set([('outcome', 'identifier', 'artifact_type')]),
        ),
        migrations.AlterField(
            model_name='outcomeartifact',
            name='artifact_type',
            field=models.IntegerField(choices=[(0, 'UNDEFINED'), (1, 'DATA'), (11, 'ANALYTIC_CODE'), (21, 'MATERIALS'), (31, 'PAPERS'), (41, 'SUPPLEMENTS'), (1001, 'PRIMARY')], default=osf.utils.outcomes.ArtifactTypes(0)),
        ),
    ]
