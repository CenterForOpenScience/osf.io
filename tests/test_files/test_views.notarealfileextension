# -*- coding: utf-8 -*-

import importlib

import framework
from framework.flask import app, add_handlers
from framework.mongo import database
from framework.logging import logger
from framework.mongo import set_up_storage
from framework.addons.utils import render_addon_capabilities
from framework.sentry import sentry
from framework.mongo import handlers as mongo_handlers
from framework.transactions import handlers as transaction_handlers

import website.models
from website.routes import make_url_map
from addons.base import init_addon


def init_addons(settings, routes=True):
    """

    """
    ADDONS_AVAILABLE = []
    for addon_name in settings.ADDONS_REQUESTED:
        addon = init_addon(app, addon_name, routes)
        if addon:
            ADDONS_AVAILABLE.append(addon)
    settings.ADDONS_AVAILABLE = ADDONS_AVAILABLE

    settings.ADDONS_AVAILABLE_DICT = {
        addon.short_name: addon
        for addon in settings.ADDONS_AVAILABLE
    }

    settings.ADDON_CAPABILITIES = render_addon_capabilities(settings.ADDONS_AVAILABLE)


def attach_handlers(app, settings):
    """Add callback handlers to ``app`` in the correct order."""
    # Add callback handlers to application
    add_handlers(app, mongo_handlers.handlers)
    add_handlers(app, transaction_handlers.handlers)

    # Attach handler for checking view-only link keys.
    # NOTE: This must be attached AFTER the TokuMX to avoid calling
    # a commitTransaction (in toku's after_request handler) when no transaction
    # has been created
    add_handlers(app, {'before_request': framework.sessions.prepare_private_key})
    # framework.session's before_request handler must go after
    # prepare_private_key, else view-only links won't work
    add_handlers(app, {'before_request': framework.sessions.before_request})
    return app


def init_app(settings_module='website.settings', set_backends=True, routes=True):
    """Initializes the GakuNin RDM. A sort of pseudo-app factory that allows you to
    bind settings, set up routing, and set storage backends, but only acts on
    a single app instance (rather than creating multiple instances).

    :param settings_module: A string, the settings module to use.
    :param set_backends: Whether to set the database storage backends.
    :param routes: Whether to set the url map.

    """
    # The settings module
    settings = importlib.import_module(settings_module)
    try:
        init_addons(settings, routes)
    except AssertionError as error:  # Addon Route map has already been created
        logger.error(error)

    app.debug = settings.DEBUG_MODE
    if routes:
        try:
            make_url_map(app)
        except AssertionError:  # Route map has already been created
            pass

    attach_handlers(app, settings)

    if app.debug:
        logger.info("Sentry disabled; Flask's debug mode enabled")
    else:
        sentry.init_app(app)
        logger.info("Sentry enabled; Flask's debug mode disabled")

    return app

